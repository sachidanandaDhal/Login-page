#!/usr/bin/env node

import process from 'node:process';
import path from 'node:path';
import minimist from 'minimist';
import { Plop, run } from 'plop';
import { transform } from './jscodeshift-file.mjs';
import { dirname } from 'node:path';
import { fileURLToPath } from 'node:url';

const args = process.argv.slice(2);
const argv = minimist(args);
const __dirname = dirname(fileURLToPath(import.meta.url));

const cliCommands = {
  /**
   * @example
   * ```bash
   *  npx omni-ui migrate --include=src/components
   * ```
   */
  migrate: async () => {
    const include = argv.include;
    if (!include) throw Error('--include=path/to/files is required');
    await transform(
      [`${process.cwd()}/${include}`],
      path.join(__dirname, 'transformers', 'structured-clone-transform.cjs')
    );
    await transform(
      [`${process.cwd()}/${include}`],
      path.join(__dirname, 'transformers', 'deprecated-icons-transform.cjs')
    );
  },
  /**
   * @example
   * ```bash
   *  npx omni-ui create-component src/component/test-component.js
   * ```
   */
  'create-component': () => {
    Plop.prepare(
      {
        cwd: argv.cwd,
        configPath: path.join(__dirname, 'plopfile.mjs'),
        preload: argv.preload || [],
        completion: argv.completion
      },
      env => Plop.execute(env, run)
    );
  }
};

const command = argv._[0];
if (command && Object.keys(cliCommands).includes(command)) {
  await cliCommands[command]();
} else {
  console.log(`Command '${command}' is unknown`);
}
