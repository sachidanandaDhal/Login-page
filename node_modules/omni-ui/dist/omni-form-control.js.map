{
  "version": 3,
  "sources": ["../lib/omni-form-control.js"],
  "sourcesContent": ["/*\n * DO NOT USE this functionality of this file is superceded by\n * element-internals-base.ts and will be removed in a future release\n */\nimport 'element-internals-polyfill'; // 'https://unpkg.com/element-internals-polyfill';\nimport { css } from 'lit';\nimport { OmniElement } from './omni-element.js';\nimport { OmniOverlay } from './component/omni-overlay/omni-overlay.js';\n\nexport { css };\n/*\n    WIP OmniFormControl provides features common to most/all form elements WIP\n\n    @description \n    form elements have to render in the same non-shadow/light-dom tree as the form\n    the containing form can be in a shadowRoot, use slots as needed\n\n    TODO form validation and related, Constraint Validation APIs... ValidityState (linked below)\n    TODO form-container events: reset, submit\n    TODO element events: invalid (no-bubbling), input (bubbles)\n    TODO attributes disabled required ...\n    TODO focus, blur\n\n    prior art: omni-form-control follows existing HTML API patterns, especially native form elements,\n    emulating these so the components have less deviation from native equivalanets and the knowledge\n    is transferrable;\n\n    current art: look and feel from UI+UX reconciled for the personas defined with accessibility and \n    related (government) requirements combined to meet the various practical and system considerations\n\n    @see {@link https://html.spec.whatwg.org/multipage/custom-elements.html#element-internals} ElementInternals, Custom Elements\n    @see {@link https://developer.mozilla.org/docs/Web/Accessibility/ARIA/Roles} Aria roles\n    @see {@link https://developer.mozilla.org/docs/Web/Accessibility/ARIA} Aria overview\n    @see {@link https://developer.mozilla.org/docs/Web/HTML/Attributes} attributes reference\n    @see {@link https://designsystem.digital.gov/components/overview/} US WDS components with related info\n    @see {@link https://designsystem.digital.gov/templates/form-templates/} US WDS Form templates patterns\n    @see {@link https://developer.mozilla.org/docs/Web/API/Constraint_validation} Constraint Validation API\n    @see {@link https://developer.mozilla.org/docs/Web/Guide/HTML/Constraint_validation} Constraint validation guide\n    @see {@link https://developer.mozilla.org/docs/Web/API/ValidityState} ValidityState API\n    @see {@link https://developer.mozilla.org/docs/Learn/Forms} ensure compatibility working with forms\n\n */\nexport class OmniFormControl extends OmniElement {\n  // value implement in component\n  static get properties() {\n    return {\n      autofocus: { type: Boolean, reflect: true },\n      autocomplete: { type: Boolean, reflect: true },\n      disabled: { type: Boolean, reflect: true },\n      required: { type: Boolean, reflect: true },\n      name: {\n        type: String,\n        reflect: true,\n        converter: {\n          // when the name is empty remove the attribute\n          toAttribute(value) {\n            const name = value.trim();\n            return name || undefined;\n          }\n        }\n      }\n    };\n  }\n\n  static get styles() {\n    return [\n      css`\n        :host {\n          --bg-color: var(--color-pale-grey-two, #fff);\n          background-color: var(--bg-color);\n          border: var(--form-input-border, #ddd);\n          --color: var(--color-gray-36);\n          --color-disabled: #aaa;\n        }\n        :host([disabled]) {\n        }\n      `\n    ];\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // initialize the overlay whenever any form element is connected\n    OmniOverlay.overlay;\n    if (!this.hasAttribute('tabindex')) {\n      // tabIndex required for focusable form controls; most values are fine, even -1\n      this.tabIndex = 0;\n    }\n  }\n\n  static get formAssociated() {\n    return true;\n  }\n\n  constructor() {\n    super();\n    this.name = '';\n    this.required = false;\n    this.disabled = false;\n\n    // TODO for Safari https://github.com/calebdwilliams/element-internals-polyfill\n    this.internals = this.attachInternals();\n  }\n\n  get form() {\n    return this.internals.form;\n  }\n\n  get labels() {\n    return this.internals.labels;\n  }\n\n  get type() {\n    return this.localName;\n  }\n\n  get validity() {\n    return this.internals.validity;\n  }\n\n  get validationMessage() {\n    return this.internals.validationMessage;\n  }\n\n  get willValidate() {\n    return this.internals.willValidate;\n  }\n\n  setCustomValidity(msg) {\n    msg ? this.internals.setValidity({ customError: true }, msg) : this.internals.setValidity({});\n    return this.validationMessage;\n  }\n\n  /*\n  TODO implement validity checks for the attributes in the link\n  static validation\n  @return {Boolean} true ok, false fail\n  @see {@link https://developer.mozilla.org/docs/Web/Guide/HTML/Constraint_validation} Constraint_validation API\n   */\n  checkValidity() {\n    return this.internals.checkValidity();\n  }\n\n  /*\n    interactive validation, ie shows ui elements related to invalid\n    TODO\n   */\n  reportValidity() {\n    return this.internals.reportValidity();\n  }\n\n  /** setup in components if indicated\n\t  formAssociatedCallback(form){ }\n\t  formResetCallback(){ }\n\t  // called when ancestor fieldset and similar are [disabled], and the element itself is NOT [disabled]\n\t  formDisabledCallback(disabled){ }\n\t  // mode === 'restore' when browser restarts, navigation; or alternately 'autocomplete' where enabled on the form or element\n\t  formStateRestoreCallback(state, mode){}\n  */\n  formStateRestoreCallback(state, mode) {\n    console.warn('formStateRestoreCallback', mode, state);\n  }\n}\n"],
  "mappings": "AAIA,OAAO;AACP,SAAS,WAAW;AACpB,SAAS,mBAAmB;AAC5B,SAAS,mBAAmB;AAmCrB,MAAM,wBAAwB,YAAY;AAAA;AAAA,EAE/C,WAAW,aAAa;AACtB,WAAO;AAAA,MACL,WAAW,EAAE,MAAM,SAAS,SAAS,KAAK;AAAA,MAC1C,cAAc,EAAE,MAAM,SAAS,SAAS,KAAK;AAAA,MAC7C,UAAU,EAAE,MAAM,SAAS,SAAS,KAAK;AAAA,MACzC,UAAU,EAAE,MAAM,SAAS,SAAS,KAAK;AAAA,MACzC,MAAM;AAAA,QACJ,MAAM;AAAA,QACN,SAAS;AAAA,QACT,WAAW;AAAA;AAAA,UAET,YAAY,OAAO;AACjB,kBAAM,OAAO,MAAM,KAAK;AACxB,mBAAO,QAAQ;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,WAAW,SAAS;AAClB,WAAO;AAAA,MACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWF;AAAA,EACF;AAAA,EAEA,oBAAoB;AAClB,UAAM,kBAAkB;AAExB,gBAAY;AACZ,QAAI,CAAC,KAAK,aAAa,UAAU,GAAG;AAElC,WAAK,WAAW;AAAA,IAClB;AAAA,EACF;AAAA,EAEA,WAAW,iBAAiB;AAC1B,WAAO;AAAA,EACT;AAAA,EAEA,cAAc;AACZ,UAAM;AACN,SAAK,OAAO;AACZ,SAAK,WAAW;AAChB,SAAK,WAAW;AAGhB,SAAK,YAAY,KAAK,gBAAgB;AAAA,EACxC;AAAA,EAEA,IAAI,OAAO;AACT,WAAO,KAAK,UAAU;AAAA,EACxB;AAAA,EAEA,IAAI,SAAS;AACX,WAAO,KAAK,UAAU;AAAA,EACxB;AAAA,EAEA,IAAI,OAAO;AACT,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,WAAW;AACb,WAAO,KAAK,UAAU;AAAA,EACxB;AAAA,EAEA,IAAI,oBAAoB;AACtB,WAAO,KAAK,UAAU;AAAA,EACxB;AAAA,EAEA,IAAI,eAAe;AACjB,WAAO,KAAK,UAAU;AAAA,EACxB;AAAA,EAEA,kBAAkB,KAAK;AACrB,UAAM,KAAK,UAAU,YAAY,EAAE,aAAa,KAAK,GAAG,GAAG,IAAI,KAAK,UAAU,YAAY,CAAC,CAAC;AAC5F,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,gBAAgB;AACd,WAAO,KAAK,UAAU,cAAc;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,iBAAiB;AACf,WAAO,KAAK,UAAU,eAAe;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,yBAAyB,OAAO,MAAM;AACpC,YAAQ,KAAK,4BAA4B,MAAM,KAAK;AAAA,EACtD;AACF;",
  "names": []
}
