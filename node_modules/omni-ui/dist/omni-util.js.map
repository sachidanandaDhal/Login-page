{
  "version": 3,
  "sources": ["../lib/omni-util.ts"],
  "sourcesContent": ["// note that the @internal tag is used to remove the function from the generated documentation in storybook\n// `@internal` functions can be used if you understand what they do and how to use them\n\nfunction mergekeyvalue(to, [key, value]) {\n  const orig = to[key];\n  if (orig && typeof orig === 'object' && typeof value === 'object') {\n    merger(orig, value);\n  } else {\n    to[key] = value;\n  }\n  return to;\n}\n\nfunction merger(to, from) {\n  if (Array.isArray(to) && Array.isArray(from)) {\n    to.push(...from);\n  } else if (from) {\n    let source;\n    try {\n      /*\n       * [Note] protection against unsupported data types\n       * For example structuredClone only supports plain objects\n       * objects created from the FormData constructor cannot be cloned\n       */\n      source = structuredClone(from);\n    } catch (e) {\n      source = from;\n    }\n\n    Object.entries(source).reduce(mergekeyvalue, to);\n  }\n  return to;\n}\n\n/*\n * simplistic deep merge of objects with shallow merge of arrays, ignores null and undefined secondary\n * returns a new object without modifying the original objects\n * @param   {Object} to\t           the target object\n * @param   {Array} from\t         additional object arguments\n * @returns {Object}               merged object\n * @example\n *\tmerge([1,2], [3,4])\n *\t// =>\t[1,2,3,4]\n *\tmerge(\n *\t\t{a:'1st', b:{b:0, sub:{m:[22]}}, list: [7,8]},\n *\t\t{a:'2nd', b:{c:0, sub:{m:[33]}}, list: [2,3], done: true},\n *\t\t{r: 2}\n *\t)\n *\t// =>\t{a:'2nd', b: {b:0, c:0, sub:{m:[22,33]}}, list: [7,8,2,3], done: true, r: 2}\n *\tmerge({a:{b:1}}, {}, undefined, null, {a:{c:2}})\n *\t// =>\t{a:{b:1,c:2}}\n * */\nexport function merge(to, ...from) {\n  const copyTarget = structuredClone(to);\n  return from.reduce(merger, copyTarget ?? {});\n}\n\nconst baseDateFormat = { month: 'short', day: 'numeric', year: 'numeric' };\nconst baseTimeFormat = { hour: 'numeric', minute: 'numeric' };\nconst baseRelTimeFormatOptions = { numeric: 'auto' };\nconst timeUnits = {\n  year: 24 * 60 * 60 * 1000 * 365,\n  month: (24 * 60 * 60 * 1000 * 365) / 12,\n  day: 24 * 60 * 60 * 1000,\n  hour: 60 * 60 * 1000,\n  minute: 60 * 1000,\n  second: 1000\n};\n\n/**\n * Omni standard for displaying localized dates\n *\n * @param      {Date}   date                      a Date object\n * @param      {Object} [formatOverides]          any overrides to base display format\n * @returns    {String}                           the date string to display\n *\n * @example\n * const displayDate = dateToString(new Date)\n * //=> (for en-US locale) Jul 8, 2019\n * @example\n * const displayDate = dateToString(new Date, { year: undefined })\n * //=> (for en-US locale) Jul 8\n */\nexport function dateToString(date: Date, formatOverrides: object): string {\n  return date.toLocaleDateString('default', merge(baseDateFormat, formatOverrides));\n}\n\n/**\n * Omni standard for displaying localized time\n *\n * @param      {Date} date                        a Date object\n * @param      {Object} [formatOverides]          any overrides to base display format\n * @returns    {String}                           the time string to display\n *\n * @example\n * const displayTime = dateToTimeString(new Date)\n * //=> (for en-US locale) 9:59 AM\n */\nexport function dateToTimeString(date: Date, formatOverrides: object = {}): string {\n  return date.toLocaleTimeString('default', merge(baseTimeFormat, formatOverrides));\n}\n\n/**\n * Omni standard for displaying relative time values\n *\n * @param     {Date} d1                           a Date object\n * @param     {Date} d2                           a second Date object (defaults to now)\n * @param     {String} [locale]                   a locale whose formatting conventions should be used\n * @param     {Object} [optionOverrides]          any overrides to base compare options\n * @returns   {String}                            the relative time string to display\n *\n * @example\n * const displayTime = dateToRelativeTimeString(new Date)\n * //=> (for en-US locale) 3 days ago\n */\nexport function dateToRelativeTimeString(d1: Date, d2 = new Date(), locale = 'en', optionOverrides) {\n  let isRelativeTimeSupported = false;\n  try {\n    // eslint-disable-next-line no-new\n    new Intl.RelativeTimeFormat('en', { numeric: 'auto' });\n    isRelativeTimeSupported = true;\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.log('Falling back to a regular date/time string due to Intl.RelativeTimeFormat not being supported.');\n  }\n  let result;\n  if (isRelativeTimeSupported) {\n    const rtf = new Intl.RelativeTimeFormat(locale, merge(baseRelTimeFormatOptions, optionOverrides));\n    //@ts-ignore\n    const elapsed = d1 - d2;\n    // Derived from https://stackoverflow.com/a/53800501\n    Object.entries(timeUnits).some(unitEntry => {\n      // Math.abs accounts for both past & future scenarios\n      if (Math.abs(elapsed) > unitEntry[1] || unitEntry[0] === 'second') {\n        //@ts-ignore\n        result = capitalizeFirstWord(rtf.format(Math.round(elapsed / unitEntry[1]), unitEntry[0]));\n        return true;\n      }\n      return false;\n    });\n  } else {\n    //@ts-ignore\n    result = dateToString(new Date(d1));\n  }\n  return result;\n}\n\nconst baseCompareOptions = { sensitivity: 'base' };\n\n/** sort strings */\nexport function sortString(a, b, locale, options = baseCompareOptions) {\n  const d = a.localeCompare(b, locale, options);\n  return d < 0 ? -1 : d > 0 ? 1 : 0;\n}\n\n/** sort numbers */\nexport function sortNumber(a, b) {\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n\n/**\n * Omni standard for a sorting human-readable strings\n *\n * @param     {Array} arry               an Array of Strings to sort\n * @param     {String} [locale]          a locale whose formatting conventions should be used\n * @param     {Object} [options]         options merged with defaults\n * @param     {Function} [fn]            optional sort operator\n * @returns   {Array}                    a sorted copy of the input Array\n *\n * @example\n * const sortedArry = sort(['2', 'Foo', '\u00E9', 'E', 'e', 'bar', '1'])\n * //=> [ '1', '2', 'bar', '\u00E9', 'E', 'e', 'Foo' ]\n */\n\nexport function sort<T>(\n  arry: T[],\n  locale: string = 'en',\n  options: object = {},\n  fn: (a, b) => number = (a, b) => sortString(a, b, locale, options as any)\n): T[] {\n  const merged = { ...baseCompareOptions, ...options };\n  // note target is original object to preserve fn reference\n  Object.assign(options, merged);\n  return [...arry].sort(fn);\n}\n\n/**\n * Omni standard for sorting object arrays by a property with human-readable string values\n *\n * @param     {Array} arry               an Array of Objects to sort\n * @param     {String} key               a name of an Object property to access\n * @param     {String} [locale]          a locale whose formatting conventions should be used\n * @param     {Object} [options]         options merged with defaults\n * @param     {Function} [fn]            optional sort operator\n * @returns   {Array}                    a sorted copy of the input Array\n *\n * @example\n * const sortedArry = sortObjects([{name: 'Olga', age: 36}, {name: 'Nathan', age: 40}], 'name')\n * //=> [ {name: 'Nathan', age: 40}, {name: 'Olga', age: 36} ]\n */\nexport function sortObjects<T>(\n  arry: T[],\n  key: string,\n  locale: string = 'en',\n  options: object = {},\n  //@ts-ignore\n  fn: (a, b) => number = (a, b) => sortString(a[key], b[key], locale, options)\n): T[] {\n  return sort(arry, locale, options, fn);\n}\n\n// Map to store custom responses\nconst responseForCode = {\n  204: () => null\n};\n\nfunction responseOK(res) {\n  if (res.ok) {\n    if (res.status in responseForCode) {\n      res.json = responseForCode[res.status];\n    }\n    return res;\n  }\n  return Promise.reject(res);\n}\n\n/** fetch a resource\n * see MDN and the various linked content about this API:\n * https://developer.mozilla.org/docs/Web/API/Fetch_API\n * see also AbortController, caching, HTTP headers, etc that relate to various requirements\n */\nexport function fetching(resource, options) {\n  return fetch(resource, options).then(responseOK);\n}\n\nconst baseFetchOptions = {\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  },\n  cache: 'no-store'\n};\n\n/** fetch JSON see fetching */\nexport function fetchJSON(url, options) {\n  return fetching(url, merge(baseFetchOptions, options)).then(res => res.json());\n}\n\n/** fetch text see fetching */\nexport function fetchText(url, options) {\n  return fetching(url, merge(baseFetchOptions, { headers: { Accept: 'text/plain' } }, options)).then(res => res.text());\n}\n/** fetch CSS see fetching */\nexport function fetchCSS(url, options) {\n  return fetching(url, merge(baseFetchOptions, { headers: { Accept: 'text/css' } }, options)).then(res => res.text());\n}\n\n/**\n * @internal\n * Regexp patern for matching the URL of CSS import at-rules in a given string\n * NOTE:\n * \t Currently supports the `<at>import \"my.css\"` variant only\n * \t Pattern is also used in rollup.config.js, tread lightly\n * @type {RegExp}\n */\nexport const cssImportAtRulePtn = /\\s*@import\\s+(?:\"|')([^\"')]+)(?:\"|')\\s*/;\n\n/**\n * @internal\n * A workaround for deprecated CSS import at-rules in CSSStyleSheet.replace()\n * NOTE: Only replaces first top-level import found\n * (https://chromestatus.com/feature/4735925877735424)\n *\n * @param     {CSSStyleSheet} sheet      instance of sheet\n * @param     {String} importOrCSS       CSS import statement or CSS string\n * @returns   {Promise}                  promise that resolves to Response object\n *\n * @example (replace <at> with @)\n * const omniStandardStyleSheet = new CSSStyleSheet();\n * styleSheetReplaceImport(omniStandardStyleSheet, '<at>import \"/standard.css\"')\n * \t .catch(handleStyleSheetImportError);\n */\nexport function styleSheetReplaceImport(sheet, importOrCSS) {\n  const matches = cssImportAtRulePtn.exec(importOrCSS);\n  if (!matches) return sheet.replace(importOrCSS); // is CSS\n  //@ts-ignore\n  return fetchCSS(matches[1]).then(css => sheet.replace(css)); // is import\n}\n\nexport function capitalizeFirstWord(phrase) {\n  return phrase.replace(/^\\w/, c => c.toUpperCase());\n}\n\n// trailing slash path insensitive equality\nconst trailingSlashesPathReplacePtn = /\\/+$/;\n/** @internal */\nexport function areUrlsEqualish(url1, url2) {\n  const u1 = new URL(url1);\n  const u2 = new URL(url2);\n  const pathsimilar =\n    u1.pathname.replace(trailingSlashesPathReplacePtn, '') === u2.pathname.replace(trailingSlashesPathReplacePtn, '');\n  // searchParams may be ordered differently; hash ignored (and should be)\n  return u1.origin === u2.origin && pathsimilar && u1.search === u2.search;\n}\n\n// derived from https://www.30secondsofcode.org/blog/s/javascript-memoization\nexport function memoize(fn) {\n  return new Proxy(fn, {\n    //@ts-ignore\n    cache: new Map(),\n    apply(target, thisArg, argsList) {\n      const cacheKey = JSON.stringify(argsList);\n      //@ts-ignore\n      if (!this.cache.has(cacheKey)) this.cache.set(cacheKey, target.apply(thisArg, argsList));\n      //@ts-ignore\n      return this.cache.get(cacheKey);\n    }\n  });\n}\n\n/**\n * Debounce given function so it does not run until wait milliseconds after the last call.\n * If immediate flag is true, then it will run on the first call and not run again until wait milliseconds\n * after the last call.\n *\n * Based off following sources:\n * https://davidwalsh.name/javascript-debounce-function\n * https://levelup.gitconnected.com/debounce-in-javascript-improve-your-applications-performance-5b01855e086\n *\n * @param func {function} function to debounce\n * @param wait {number} time to wait in milliseconds\n * @param immediate {boolean} True if function should be called on the leading edge instead of trailing edge\n * @return {function}\n */\nexport function debounce(func, wait, immediate = false) {\n  let timeout;\n  return (...args) => {\n    const callNow = immediate && !timeout;\n    const later = () => {\n      timeout = null;\n      if (!immediate) func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func(...args);\n  };\n}\n\n/**\n * give a file name with an extension and truncate to a smaller version with ellipses in place\n * if filename is < , it returns unmodified\n * if no extension is found in the string, it return unmodified\n * @param {string} filename\n * @param {number=} truncateAt\n * @return {string}\n */\nexport function truncateFilename(filename: string, truncateAt: number | undefined = 10): string {\n  if (!filename.includes('.')) return filename;\n  const split = filename.split('.');\n  if (split[0].length - 3 <= truncateAt) return filename;\n  const first = filename.slice(0, truncateAt);\n  const end = split[0].slice(split[0].length - 3, split[0].length);\n  split.shift();\n  const result = `${first}...${end}.${split.join('.')}`;\n  if (result.length > filename.length) return filename;\n  return result;\n}\n\n/**\n * use browser crypto to get a hash of a string\n */\nexport async function hashString(string: string, algorithm = 'SHA-256') {\n  const bufferIn = new TextEncoder().encode(string);\n  const bufferOut = await crypto.subtle.digest(algorithm, bufferIn);\n  return [...new Uint8Array(bufferOut)].map(bytes => bytes.toString(16).padStart(2, '0')).join('');\n}\n\n/**\n *  - returns first matching element from depth-first dom traversal\n *  - comparable to `document.querySelector`, but this adds the ability to pierce shadow roots indefinitely\n *  - useful when you would want to get a reference to an element that is outside of your current root\n *  - not as useful to query for an internal element that you don't control, .e.g., omni-table internal elements\n *  @example\n *  ```js\n *     // if dom currently has `<omni-card id=\"1234\"></omni-card>` within any root, the element is returned\n *     const element = querySelectorDeep('omni-card', '1234');\n *     // then you can call an element method\n *     element.doSomething();\n *     // to narrow the scope of your query, provide a shadow root\n *     // the element will be returned if the `<omni-card id=\"1234\"></omni-card>` is within or a descendant of the given shadowRoot\n *     // ... in your element class\n *     const element = querySelectorDeep('omni-card', '1234', this.shadowRoot);\n *  ```\n *  @param {string} tagName the tag name of the element\n *  @param {string=} id (optional) the dom id for the element\n *  @param {Document | ShadowRoot=} rootNode (optional) pass a shadow root to only include that shadow root and its descendants\n *  @returns {HTMLElement | undefined} element | undefined\n */\nexport function querySelectorDeep(\n  tagName: string,\n  id: string = null,\n  rootNode: Document | ShadowRoot = document\n): HTMLElement | undefined {\n  function traverseNodes(nodeList) {\n    for (const node of nodeList) {\n      if (node.localName === tagName && (id ? id === node.id : true)) {\n        return node;\n      }\n      if (node.shadowRoot) {\n        const found = traverseNodes(node.shadowRoot.querySelectorAll('*'));\n        if (found) {\n          return found;\n        }\n      }\n    }\n  }\n  return traverseNodes(rootNode.querySelectorAll('*'));\n}\n\n/** @internal */\nexport interface ResizeOptions {\n  edits: {\n    resize: {\n      width: number;\n      height: number;\n      fit: 'cover' | 'contain' | 'fill' | 'inside' | 'outside';\n    };\n  };\n  toFormat: 'png' | 'jpeg' | 'tiff' | 'webp' | 'raw';\n}\n\n/**\n * @param {string} url -> Image URL with image key(encode in url)\n * @param {ResizeOptions} options  -> the resize options\n * @returns {string} -> New image URL with all modification as specified in the options object.\n */\nexport function resizeImage(url: string, options: ResizeOptions): string {\n  const arr = url.split('/');\n  const encodedStr = arr[arr.length - 1].split('#')[0];\n  const decodedObj = JSON.parse(atob(encodedStr));\n  const newOption = {\n    key: decodedObj.key,\n    edits: options.edits\n  };\n  const encodeObj = btoa(JSON.stringify(newOption));\n  arr.splice(arr.length - 1, 1);\n  return arr.join('/') + '/' + encodeObj;\n}\n\n/**\n * - get element size including margin (default includes margin);\n * - numbers are integers\n * - will include padding if element is border-box (default for omni-elements)\n *  @param {HTMLElement} element the tag name of the element\n *  @param {boolean=} includeMargin (optional) the dom id for the element\n *  @returns {{width: number, height: number}} width and height\n */\nexport function getElementSize(element: HTMLElement, includeMargin: boolean = true): { width: number; height: number } {\n  let { width, height } = element.getBoundingClientRect();\n  if (includeMargin) {\n    const computedStyle = getComputedStyle(element);\n    width += parseInt(computedStyle.marginLeft) + parseInt(computedStyle.marginRight);\n    height += parseInt(computedStyle.marginTop) + parseInt(computedStyle.marginBottom);\n  }\n  return {\n    width: Math.trunc(width),\n    height: Math.trunc(height)\n  };\n}\n\n/** @internal */\nexport type Environment = 'local' | 'dev' | 'qa' | 'stg' | 'prod';\n\n/**\n * @internal\n * Treat local environment as dev, all others are themselves\n */\nexport const ssoEnv = (env: Environment): Environment => (env === 'local' ? 'dev' : env);\n\n/**\n * @internal\n * Determine the hostname given a base hostname and env.\n * \"local\" + \"omni.annalect.com\" => \"devomni.annalect.com\"\n */\nexport const ssoHost = (env: Environment, host: string) => {\n  let prefix: Environment | '' = ssoEnv(env);\n  if (prefix === 'prod') prefix = '';\n  return `${prefix}${host}`;\n};\n\n/** @internal */\nexport const fetchOmni = async (env: Environment, path: string, options) => {\n  // fetchJSON fails as it adds headers rejected by CORS; using fetch directly\n  const url = `https://${ssoHost(env, 'omni.annalect.com')}${path}`;\n  const response = await fetch(url, options);\n  return response.json();\n};\n\nexport const generateToken = async (\n  env: Environment,\n  clientId: string,\n  sid: string,\n  typeKey: string\n): Promise<string> =>\n  (\n    await fetchOmni(env, `/api/jwt/${clientId}/?ANsid=${sid}`, {\n      method: 'POST',\n      body: JSON.stringify({\n        omniTypeKeys: [typeKey],\n        withRoles: true\n      })\n    })\n  ).jwt;\n\ninterface JWTPayload {\n  client_guid: string;\n  omniTypeKeys?: string[];\n  ANsid: string;\n  roles?: string[];\n}\n\nexport const parseJWT = (token: string): JWTPayload => {\n  const base64Url = token.split('.')[1];\n  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  const jsonPayload = decodeURIComponent(\n    window\n      .atob(base64)\n      .split('')\n      .map(c => `%${`00${c.charCodeAt(0).toString(16)}`.slice(-2)}`)\n      .join('')\n  );\n  return JSON.parse(jsonPayload);\n};\n\nexport const userHasRole = (jwt: string, typeKey: string, requiredRoles: any[] = []): boolean => {\n  try {\n    const { omniTypeKeys, roles } = parseJWT(jwt);\n    const appIndex = omniTypeKeys?.indexOf(typeKey);\n    // Get user roles for this app\n    const userRoles = roles?.[appIndex]?.split(',') ?? [];\n    // Intersect with list of roles required for this app\n    const matches = userRoles.filter(x => requiredRoles.includes(x));\n    return matches.length > 0;\n  } catch {\n    return false;\n  }\n};\n"],
  "mappings": "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",
  "names": []
}
