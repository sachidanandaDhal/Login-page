import type { ReactiveController } from 'lit';
import type { OmniElement } from '../omni-element.js';
export interface DragAndDropOptions {
    /** an array of css selectors, to find your drag containers. your drag containers can all use the same selector, or different selectors. */
    dragContainerQueries?: string[];
    /** a css class available on your host element for styling the left over shadow when dragging */
    shadowClass?: string;
    /** a css class available on your host element for styling the element when dragging */
    ghostClass?: string;
    /** disallow an idx from allowing drops */
    noDropIdxs?: number[];
    /** animationDuration */
    animationDuration?: number;
}
export interface MoveInfo {
    container: DragContainer;
    moveFromIdx: number;
    moveToIdx: number;
}
export type DropCb = (move: MoveInfo) => void;
/**
 * although types are as a property, really only exists as attributes.
 * Only access using attribute methods
 * Number(.getAttribute('drag-idx')), .hasAttribute for boolean, .getAttribute for string
 * */
type DragContainer = HTMLElement & {
    /** attribute: boolean */
    'drag-container'?: '';
    /** attribute: key of host property */
    'drag-list'?: string;
    /** attribute: string */
    'drag-orientation'?: 'horizontal' | 'vertical';
    /** attribute could be unknown for custom drag container queries */
    [key: string]: unknown;
};
export declare class DragAndDropController implements ReactiveController {
    #private;
    debug: boolean;
    /**
     * @param {OmniElement} host - your component host element that extends OmniElement. pass as: `this`
     * @param {DragAndDropOptions=} options -
     * @param {DropCb=} dropCb - add a callback function to handle moves within your list of items
     * @example
     * ```js
     * constructor(){
     *   super();
     *   this.myList = ['item 1', 'item 2', 'item 3'];
     *   this.dragController = new DragAndDropController(this);
     * }
     * render(){
     *  return html`
     *  <div drag-container drag-list="myList">
     *   ${this.list.map((item, idx) => html`
     *       <div drag-idx=${idx}>
     *          <omni-icon drag-handle></omni-icon>
     *          ${item}
     *       </div>
     *    `)}
     *   </div>
     * `
     * }
     * ```
     */
    constructor(host: OmniElement, options?: DragAndDropOptions, dropCb?: DropCb);
    hostConnected(): void;
    /** unregister and reregister all drag elements */
    hostUpdated(): void;
    /** unregister all drag elements. cleans up and removes all event listeners */
    hostDisconnected(): void;
}
export declare const moveItemsInArray: <T>(array: T[], moveFromIdx: number, moveToIdx: number) => T[];
export {};
//# sourceMappingURL=drag-and-drop-controller.d.ts.map