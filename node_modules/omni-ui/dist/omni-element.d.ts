import { LitElement, type CSSResult } from 'lit';
import * as styles from './styles.js';
export { styles };
/**
 * A base class containing common behavior for Omni elements
 * @element omni-element
 */
export declare class OmniElement extends LitElement {
    /**
     * Sensible default styles for a new custom element
     */
    static get styles(): CSSResult[];
    /**
     * Static method for defining a custom element with the registry. Explicit registration
     * makes the module side-effect free enabling apps to tree-shake unused components.
     *
     * @param  {String=}   name        Tag name for the new custom element
     * @param  {Function=} constructor Constructor for the new custom element
     * @param  {Object=}   [options]   Control how the element is defined
     */
    static register(name?: string, constructor?: CustomElementConstructor, options?: ElementDefinitionOptions): void;
    /** (iterator) utility for finding/filtering CSS selector (as 'this') matches node
     * @internal
     * @returns { boolean } indicates matches selector
     */
    static _nodeMatches(node: any): boolean;
    /** event path utility for finding or filtering nodes
     @param { object } event - an Event object
     @param { string } cssSelector -
      a valid CSS selector to match against, if falsy the path array of nodes is returned
     @param { boolean } collectFilter -
      true (truthy) returns filtered array of nodes matching cssSelector
      false (default) returns array with the first node matching cssSelector
     @returns { Array } - array of 0 or more nodes
     */
    static pathfinder(event: Event, cssSelector: string, collectFilter: boolean): any[];
    /** @internal */
    pathfinder(event: Event, cssSelector: string, collectFilter: boolean): any[];
    /**
     * @internal
     * @deprecated
     * deprecate with warning and remove in a future version */
    get __dispatchNewEvent(): (type: string, optionOverrides?: {}, target?: Element) => CustomEvent<any> & {
        cancelled: boolean;
    };
    /**
     * Convenience method for creating and dispatching an event in a single call
     *
     * @param  {String}  type      Event's type
     * @param  {Object}  [options] Event creation option overrides
     *                               (see defaultDispatchNewEventOptions)
     * @param  {Element} [target]  Event target (defaults to this)
     * @return {CustomEvent & {cancelled: boolean}}             Event object decorated with cancelled boolean flag
     * @note previously returned Array[event, wasNotCancelled result of dispatchEvent]
     */
    dispatchNewEvent(type: string, optionOverrides?: {}, target?: Element): CustomEvent & {
        cancelled: boolean;
    };
    render(): unknown;
}
declare global {
    interface HTMLElementTagNameMap {
        'omni-element': OmniElement;
    }
}
//# sourceMappingURL=omni-element.d.ts.map