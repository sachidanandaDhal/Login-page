{
  "version": 3,
  "sources": ["../lib/context-provider.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable wc/no-method-prefixed-with-on */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { EVENT_TYPE, contextConsumerMixin, contextSymbol, providerSymbol } from './context-consumer.js';\n\nconst store = new WeakMap();\n\n/**\n * Creates a Provider component that notifies changes on its\n * `value` property.\n *\n * @param {*} initialValue Initial value of the Provider\n * @param {*} identifier Provider ID\n */\nconst createProvider = (initialValue, identifier) =>\n  class Provider extends HTMLElement {\n    constructor() {\n      super();\n      this.value = initialValue;\n      this[providerSymbol] = identifier;\n      this.onGetProvider = this.onGetProvider.bind(this);\n    }\n\n    set value(value) {\n      if (this.value !== value) {\n        store.set(this, value);\n        this.dispatchEvent(new Event('context-changed'));\n      }\n    }\n\n    get value() {\n      return store.get(this);\n    }\n\n    connectedCallback() {\n      // @ts-expect-error - unknown super\n      if (super.connectedCallback) {\n        // @ts-expect-error - unknown super\n        super.connectedCallback();\n      }\n\n      this.addEventListener(EVENT_TYPE, this.onGetProvider);\n    }\n\n    disconnectedCallback() {\n      this.removeEventListener(EVENT_TYPE, this.onGetProvider);\n      // @ts-expect-error - unknown super\n      if (super.disconnectedCallback) {\n        // @ts-expect-error - unknown super\n        super.disconnectedCallback();\n      }\n    }\n\n    onGetProvider(e) {\n      if (!e.detail?.identifier) return;\n      if (this[providerSymbol] !== e.detail.identifier) return;\n      e.stopPropagation();\n      e.detail.provider = this;\n    }\n  } as any;\n\n/**\n * Creates a Provider class.\n * @param {*} initialValue Initial value of the context\n */\n\nconst createContextProvider = initialValue => createProvider(initialValue, contextSymbol);\n\nexport { contextConsumerMixin, createContextProvider, createProvider };\n"],
  "mappings": "AAMA,SAAS,YAAY,sBAAsB,eAAe,sBAAsB;AAEhF,MAAM,QAAQ,oBAAI,QAAQ;AAS1B,MAAM,iBAAiB,CAAC,cAAc,eACpC,MAAM,iBAAiB,YAAY;AAAA,EACjC,cAAc;AACZ,UAAM;AACN,SAAK,QAAQ;AACb,SAAK,cAAc,IAAI;AACvB,SAAK,gBAAgB,KAAK,cAAc,KAAK,IAAI;AAAA,EACnD;AAAA,EAEA,IAAI,MAAM,OAAO;AACf,QAAI,KAAK,UAAU,OAAO;AACxB,YAAM,IAAI,MAAM,KAAK;AACrB,WAAK,cAAc,IAAI,MAAM,iBAAiB,CAAC;AAAA,IACjD;AAAA,EACF;AAAA,EAEA,IAAI,QAAQ;AACV,WAAO,MAAM,IAAI,IAAI;AAAA,EACvB;AAAA,EAEA,oBAAoB;AAElB,QAAI,MAAM,mBAAmB;AAE3B,YAAM,kBAAkB;AAAA,IAC1B;AAEA,SAAK,iBAAiB,YAAY,KAAK,aAAa;AAAA,EACtD;AAAA,EAEA,uBAAuB;AACrB,SAAK,oBAAoB,YAAY,KAAK,aAAa;AAEvD,QAAI,MAAM,sBAAsB;AAE9B,YAAM,qBAAqB;AAAA,IAC7B;AAAA,EACF;AAAA,EAEA,cAAc,GAAG;AACf,QAAI,CAAC,EAAE,QAAQ;AAAY;AAC3B,QAAI,KAAK,cAAc,MAAM,EAAE,OAAO;AAAY;AAClD,MAAE,gBAAgB;AAClB,MAAE,OAAO,WAAW;AAAA,EACtB;AACF;AAOF,MAAM,wBAAwB,kBAAgB,eAAe,cAAc,aAAa;",
  "names": []
}
