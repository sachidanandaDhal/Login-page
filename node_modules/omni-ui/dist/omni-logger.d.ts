export type Environment = 'local' | 'dev' | 'qa' | 'stg' | 'prod';
export interface LoggerArgs {
    env: Environment;
    args: string | any[];
}
/**
 * Environment aware console logging
 *
 * To include within your project `import { OmniLogger } from 'omni-ui/omni-logger.js';`
 *
 * ```js
 * // pass environment (default 'local') and optional boolean to add trace to end of log statements
 * const logger = new OmniLogger(getEnv(), true);
 *
 * logger.log('This is a log message that will not be printed to stg or prod');
 * logger.table([{name: 'John', age: 35},{name: 'Susan', age: 25}]);
 * logger.info('This is an informative message for all supported environments');
 * logger.warn('This is a warning message for all supported environments');
 * logger.error('This is an error message for all supported environments');
 * ```
 *
 * @tagname OmniLogger
 */
export declare class OmniLogger {
    env: Environment;
    includeTrace: boolean;
    constructor(env?: Environment, includeTrace?: boolean);
    getTrace(errStack: string): string;
    /** output of general information on 'local', 'dev', and 'qa' environments only. supports string substitution and additional arguments */
    log(...arg: unknown[]): void;
    /** output tabular data as a table in 'local', 'dev', and 'qa' environments only */
    table(...arg: unknown[]): void;
    /** output an informative message to supported all environments. supports string substituion and additional arguments */
    info(...arg: unknown[]): void;
    /** output a warning message to all supported environments. supports string substitution and additional arguments */
    warn(...arg: unknown[]): void;
    /** output an error message to all supported environments. supports string substitution with additional arguments */
    error(...arg: unknown[]): void;
}
//# sourceMappingURL=omni-logger.d.ts.map