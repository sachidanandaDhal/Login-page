{
  "version": 3,
  "sources": ["../lib/omni-logger.ts"],
  "sourcesContent": ["export type Environment = 'local' | 'dev' | 'qa' | 'stg' | 'prod';\n\nexport interface LoggerArgs {\n  env: Environment;\n  args: string | any[];\n}\n\n/**\n * Environment aware console logging\n *\n * To include within your project `import { OmniLogger } from 'omni-ui/omni-logger.js';`\n *\n * ```js\n * // pass environment (default 'local') and optional boolean to add trace to end of log statements\n * const logger = new OmniLogger(getEnv(), true);\n *\n * logger.log('This is a log message that will not be printed to stg or prod');\n * logger.table([{name: 'John', age: 35},{name: 'Susan', age: 25}]);\n * logger.info('This is an informative message for all supported environments');\n * logger.warn('This is a warning message for all supported environments');\n * logger.error('This is an error message for all supported environments');\n * ```\n *\n * @tagname OmniLogger\n */\nexport class OmniLogger {\n  constructor(\n    public env: Environment = 'local',\n    public includeTrace: boolean = false\n  ) {}\n\n  getTrace(errStack: string) {\n    try {\n      const regex = /\\(([^)]+)\\)/;\n      const match = regex.exec(errStack.split('\\n')[2]);\n      if (match) {\n        const url = new URL(match[1]);\n        const pathname = url.pathname;\n        const split = pathname.split('/');\n        const filename = split[split.length - 1];\n        const line = url.search.split(':')[1] ?? '0';\n        const column = url.search.split(':')[2] ?? '0';\n        return `${filename}:${line}:${column}`;\n      }\n    } catch (error) {\n      console.info('Error in getTrace', error);\n    }\n    return '';\n  }\n\n  /** output of general information on 'local', 'dev', and 'qa' environments only. supports string substitution and additional arguments */\n  public log(...arg: unknown[]) {\n    if (['local', 'dev', 'qa'].includes(this.env)) {\n      if (this.includeTrace) {\n        if (arg.length === 1 && typeof arg[0] === 'string') {\n          // log a single message and add a trace\n          console.log(arg.join(' ') + '\\n%c' + this.getTrace(new Error().stack), 'color: #00a1d2;');\n        } else {\n          if (typeof arg[0] === 'string' && arg[0].search(/%s|%d|%i|%f|%o|%O|%c/) >= 0) {\n            // log a single message with substitutions and add a trace\n            const msg = arg.shift();\n            arg.unshift([msg, '\\n%c', this.getTrace(new Error().stack)].join(' '));\n            arg.push('color: #00a1d2');\n            console.log(...arg);\n          } else {\n            if (arg.length === 1) {\n              // log a single value and add a trace\n              console.log(...['', ...arg, '\\n', this.getTrace(new Error().stack)]);\n            } else {\n              // log list of objects and add a trace\n              console.log(...arg, '\\n', this.getTrace(new Error().stack));\n            }\n          }\n        }\n      } else {\n        console.log(...arg);\n      }\n    }\n  }\n\n  //can be used to log object | array in table format\n  /** output tabular data as a table in 'local', 'dev', and 'qa' environments only */\n  public table(...arg: unknown[]) {\n    if (['local', 'dev', 'qa'].includes(this.env)) {\n      console.table(...arg);\n    }\n  }\n\n  /** output an informative message to supported all environments. supports string substituion and additional arguments */\n  public info(...arg: unknown[]) {\n    if (['local', 'dev', 'qa', 'stg', 'prod'].includes(this.env)) {\n      console.info(...arg);\n    }\n  }\n\n  /** output a warning message to all supported environments. supports string substitution and additional arguments */\n  public warn(...arg: unknown[]) {\n    if (['local', 'dev', 'qa', 'stg', 'prod'].includes(this.env)) {\n      console.warn(...arg);\n    }\n  }\n\n  /** output an error message to all supported environments. supports string substitution with additional arguments */\n  public error(...arg: unknown[]) {\n    if (['local', 'dev', 'qa', 'stg', 'prod'].includes(this.env)) {\n      console.error(...arg);\n    }\n  }\n}\n"],
  "mappings": "AAyBO,MAAM,WAAW;AAAA,EACtB,YACS,MAAmB,SACnB,eAAwB,OAC/B;AAFO;AACA;AAAA,EACN;AAAA,EAEH,SAAS,UAAkB;AACzB,QAAI;AACF,YAAM,QAAQ;AACd,YAAM,QAAQ,MAAM,KAAK,SAAS,MAAM,IAAI,EAAE,CAAC,CAAC;AAChD,UAAI,OAAO;AACT,cAAM,MAAM,IAAI,IAAI,MAAM,CAAC,CAAC;AAC5B,cAAM,WAAW,IAAI;AACrB,cAAM,QAAQ,SAAS,MAAM,GAAG;AAChC,cAAM,WAAW,MAAM,MAAM,SAAS,CAAC;AACvC,cAAM,OAAO,IAAI,OAAO,MAAM,GAAG,EAAE,CAAC,KAAK;AACzC,cAAM,SAAS,IAAI,OAAO,MAAM,GAAG,EAAE,CAAC,KAAK;AAC3C,eAAO,GAAG,QAAQ,IAAI,IAAI,IAAI,MAAM;AAAA,MACtC;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,KAAK,qBAAqB,KAAK;AAAA,IACzC;AACA,WAAO;AAAA,EACT;AAAA;AAAA,EAGO,OAAO,KAAgB;AAC5B,QAAI,CAAC,SAAS,OAAO,IAAI,EAAE,SAAS,KAAK,GAAG,GAAG;AAC7C,UAAI,KAAK,cAAc;AACrB,YAAI,IAAI,WAAW,KAAK,OAAO,IAAI,CAAC,MAAM,UAAU;AAElD,kBAAQ,IAAI,IAAI,KAAK,GAAG,IAAI,SAAS,KAAK,SAAS,IAAI,MAAM,EAAE,KAAK,GAAG,iBAAiB;AAAA,QAC1F,OAAO;AACL,cAAI,OAAO,IAAI,CAAC,MAAM,YAAY,IAAI,CAAC,EAAE,OAAO,sBAAsB,KAAK,GAAG;AAE5E,kBAAM,MAAM,IAAI,MAAM;AACtB,gBAAI,QAAQ,CAAC,KAAK,QAAQ,KAAK,SAAS,IAAI,MAAM,EAAE,KAAK,CAAC,EAAE,KAAK,GAAG,CAAC;AACrE,gBAAI,KAAK,gBAAgB;AACzB,oBAAQ,IAAI,GAAG,GAAG;AAAA,UACpB,OAAO;AACL,gBAAI,IAAI,WAAW,GAAG;AAEpB,sBAAQ,IAAI,GAAG,CAAC,IAAI,GAAG,KAAK,MAAM,KAAK,SAAS,IAAI,MAAM,EAAE,KAAK,CAAC,CAAC;AAAA,YACrE,OAAO;AAEL,sBAAQ,IAAI,GAAG,KAAK,MAAM,KAAK,SAAS,IAAI,MAAM,EAAE,KAAK,CAAC;AAAA,YAC5D;AAAA,UACF;AAAA,QACF;AAAA,MACF,OAAO;AACL,gBAAQ,IAAI,GAAG,GAAG;AAAA,MACpB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA,EAIO,SAAS,KAAgB;AAC9B,QAAI,CAAC,SAAS,OAAO,IAAI,EAAE,SAAS,KAAK,GAAG,GAAG;AAC7C,cAAQ,MAAM,GAAG,GAAG;AAAA,IACtB;AAAA,EACF;AAAA;AAAA,EAGO,QAAQ,KAAgB;AAC7B,QAAI,CAAC,SAAS,OAAO,MAAM,OAAO,MAAM,EAAE,SAAS,KAAK,GAAG,GAAG;AAC5D,cAAQ,KAAK,GAAG,GAAG;AAAA,IACrB;AAAA,EACF;AAAA;AAAA,EAGO,QAAQ,KAAgB;AAC7B,QAAI,CAAC,SAAS,OAAO,MAAM,OAAO,MAAM,EAAE,SAAS,KAAK,GAAG,GAAG;AAC5D,cAAQ,KAAK,GAAG,GAAG;AAAA,IACrB;AAAA,EACF;AAAA;AAAA,EAGO,SAAS,KAAgB;AAC9B,QAAI,CAAC,SAAS,OAAO,MAAM,OAAO,MAAM,EAAE,SAAS,KAAK,GAAG,GAAG;AAC5D,cAAQ,MAAM,GAAG,GAAG;AAAA,IACtB;AAAA,EACF;AACF;",
  "names": []
}
