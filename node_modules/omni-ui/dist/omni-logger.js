class OmniLogger {
  constructor(env = "local", includeTrace = false) {
    this.env = env;
    this.includeTrace = includeTrace;
  }
  getTrace(errStack) {
    try {
      const regex = /\(([^)]+)\)/;
      const match = regex.exec(errStack.split("\n")[2]);
      if (match) {
        const url = new URL(match[1]);
        const pathname = url.pathname;
        const split = pathname.split("/");
        const filename = split[split.length - 1];
        const line = url.search.split(":")[1] ?? "0";
        const column = url.search.split(":")[2] ?? "0";
        return `${filename}:${line}:${column}`;
      }
    } catch (error) {
      console.info("Error in getTrace", error);
    }
    return "";
  }
  /** output of general information on 'local', 'dev', and 'qa' environments only. supports string substitution and additional arguments */
  log(...arg) {
    if (["local", "dev", "qa"].includes(this.env)) {
      if (this.includeTrace) {
        if (arg.length === 1 && typeof arg[0] === "string") {
          console.log(arg.join(" ") + "\n%c" + this.getTrace(new Error().stack), "color: #00a1d2;");
        } else {
          if (typeof arg[0] === "string" && arg[0].search(/%s|%d|%i|%f|%o|%O|%c/) >= 0) {
            const msg = arg.shift();
            arg.unshift([msg, "\n%c", this.getTrace(new Error().stack)].join(" "));
            arg.push("color: #00a1d2");
            console.log(...arg);
          } else {
            if (arg.length === 1) {
              console.log(...["", ...arg, "\n", this.getTrace(new Error().stack)]);
            } else {
              console.log(...arg, "\n", this.getTrace(new Error().stack));
            }
          }
        }
      } else {
        console.log(...arg);
      }
    }
  }
  //can be used to log object | array in table format
  /** output tabular data as a table in 'local', 'dev', and 'qa' environments only */
  table(...arg) {
    if (["local", "dev", "qa"].includes(this.env)) {
      console.table(...arg);
    }
  }
  /** output an informative message to supported all environments. supports string substituion and additional arguments */
  info(...arg) {
    if (["local", "dev", "qa", "stg", "prod"].includes(this.env)) {
      console.info(...arg);
    }
  }
  /** output a warning message to all supported environments. supports string substitution and additional arguments */
  warn(...arg) {
    if (["local", "dev", "qa", "stg", "prod"].includes(this.env)) {
      console.warn(...arg);
    }
  }
  /** output an error message to all supported environments. supports string substitution with additional arguments */
  error(...arg) {
    if (["local", "dev", "qa", "stg", "prod"].includes(this.env)) {
      console.error(...arg);
    }
  }
}
export {
  OmniLogger
};
//# sourceMappingURL=omni-logger.js.map
