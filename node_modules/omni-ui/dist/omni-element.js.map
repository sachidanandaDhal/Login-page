{
  "version": 3,
  "sources": ["../lib/omni-element.ts"],
  "sourcesContent": ["import { LitElement, css, html, type CSSResult } from 'lit';\nimport * as styles from './styles.js';\nexport { styles };\n\nconst defaultDispatchNewEventOptions = {\n  bubbles: true,\n  composed: true,\n  cancelable: true\n};\n\n/**\n * A base class containing common behavior for Omni elements\n * @element omni-element\n */\nexport class OmniElement extends LitElement {\n  /**\n   * Sensible default styles for a new custom element\n   */\n  static get styles() {\n    const styles = [\n      css`\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        *,\n        *::before,\n        *::after,\n        .omni *,\n        .omni *::before,\n        .omni *::after {\n          box-sizing: border-box;\n        }\n      `\n    ];\n\n    // Include superclass styles in front if they exist\n    if (super.styles) styles.unshift(super.styles as CSSResult);\n    return styles;\n  }\n\n  /**\n   * Static method for defining a custom element with the registry. Explicit registration\n   * makes the module side-effect free enabling apps to tree-shake unused components.\n   *\n   * @param  {String=}   name        Tag name for the new custom element\n   * @param  {Function=} constructor Constructor for the new custom element\n   * @param  {Object=}   [options]   Control how the element is defined\n   */\n  static register(\n    name: string = '',\n    constructor: CustomElementConstructor = null,\n    options: ElementDefinitionOptions = {}\n  ) {\n    if (!(name && constructor)) {\n      return;\n    }\n\n    const existing = customElements.get(name);\n    if (!existing) {\n      customElements.define(name, constructor, options);\n    }\n  }\n\n  /** (iterator) utility for finding/filtering CSS selector (as 'this') matches node\n   * @internal\n   * @returns { boolean } indicates matches selector\n   */\n  static _nodeMatches(node): boolean {\n    return node.matches ? node.matches(this) : false;\n  }\n\n  /** event path utility for finding or filtering nodes\n   @param { object } event - an Event object\n   @param { string } cssSelector - \n    a valid CSS selector to match against, if falsy the path array of nodes is returned\n   @param { boolean } collectFilter - \n    true (truthy) returns filtered array of nodes matching cssSelector\n    false (default) returns array with the first node matching cssSelector\n   @returns { Array } - array of 0 or more nodes\n   */\n  static pathfinder(event: Event, cssSelector: string = '', collectFilter: boolean): any[] {\n    const path = event.composedPath();\n    if (cssSelector) {\n      if (collectFilter) {\n        return path.filter(this._nodeMatches, cssSelector);\n      }\n      const node = path.find(this._nodeMatches, cssSelector);\n      return node ? [node] : [];\n    }\n    return path;\n  }\n\n  /** @internal */\n  pathfinder(event: Event, cssSelector: string = '', collectFilter: boolean) {\n    return OmniElement.pathfinder(event, cssSelector, collectFilter);\n  }\n\n  /**\n   * @internal\n   * @deprecated\n   * deprecate with warning and remove in a future version */\n  get __dispatchNewEvent() {\n    console.warn(\n      'replace `__dispatchNewEvent` with `dispatchNewEvent`, __dispatchNewEvent will be deprecated in a future release'\n    );\n    return this.dispatchNewEvent;\n  }\n\n  /**\n   * Convenience method for creating and dispatching an event in a single call\n   *\n   * @param  {String}  type      Event's type\n   * @param  {Object}  [options] Event creation option overrides\n   *                               (see defaultDispatchNewEventOptions)\n   * @param  {Element} [target]  Event target (defaults to this)\n   * @return {CustomEvent & {cancelled: boolean}}             Event object decorated with cancelled boolean flag\n   * @note previously returned Array[event, wasNotCancelled result of dispatchEvent]\n   */\n  dispatchNewEvent(type: string, optionOverrides = {}, target: Element = this): CustomEvent & { cancelled: boolean } {\n    const options = { ...defaultDispatchNewEventOptions, ...optionOverrides };\n    const event = new CustomEvent(type, options) as CustomEvent & { cancelled: boolean };\n    // @ts-ignore\n    if (super.dispatchNewEvent) super.dispatchNewEvent(type, options, target);\n    const wasNotCancelled = target.dispatchEvent(event);\n    event.cancelled = !wasNotCancelled;\n    return event;\n  }\n\n  render(): unknown {\n    return html`<slot></slot>`;\n  }\n}\n\nOmniElement.register('omni-element', OmniElement);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'omni-element': OmniElement;\n  }\n}\n"],
  "mappings": "AAAA,SAAS,YAAY,KAAK,YAA4B;AACtD,YAAY,YAAY;AAGxB,MAAM,iCAAiC;AAAA,EACrC,SAAS;AAAA,EACT,UAAU;AAAA,EACV,YAAY;AACd;AAMO,MAAM,oBAAoB,WAAW;AAAA;AAAA;AAAA;AAAA,EAI1C,WAAW,SAAS;AAClB,UAAMA,UAAS;AAAA,MACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAkBF;AAGA,QAAI,MAAM;AAAQ,MAAAA,QAAO,QAAQ,MAAM,MAAmB;AAC1D,WAAOA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,SACL,OAAe,IACf,cAAwC,MACxC,UAAoC,CAAC,GACrC;AACA,QAAI,EAAE,QAAQ,cAAc;AAC1B;AAAA,IACF;AAEA,UAAM,WAAW,eAAe,IAAI,IAAI;AACxC,QAAI,CAAC,UAAU;AACb,qBAAe,OAAO,MAAM,aAAa,OAAO;AAAA,IAClD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,aAAa,MAAe;AACjC,WAAO,KAAK,UAAU,KAAK,QAAQ,IAAI,IAAI;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,OAAO,WAAW,OAAc,cAAsB,IAAI,eAA+B;AACvF,UAAM,OAAO,MAAM,aAAa;AAChC,QAAI,aAAa;AACf,UAAI,eAAe;AACjB,eAAO,KAAK,OAAO,KAAK,cAAc,WAAW;AAAA,MACnD;AACA,YAAM,OAAO,KAAK,KAAK,KAAK,cAAc,WAAW;AACrD,aAAO,OAAO,CAAC,IAAI,IAAI,CAAC;AAAA,IAC1B;AACA,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,WAAW,OAAc,cAAsB,IAAI,eAAwB;AACzE,WAAO,YAAY,WAAW,OAAO,aAAa,aAAa;AAAA,EACjE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,qBAAqB;AACvB,YAAQ;AAAA,MACN;AAAA,IACF;AACA,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,iBAAiB,MAAc,kBAAkB,CAAC,GAAG,SAAkB,MAA4C;AACjH,UAAM,UAAU,EAAE,GAAG,gCAAgC,GAAG,gBAAgB;AACxE,UAAM,QAAQ,IAAI,YAAY,MAAM,OAAO;AAE3C,QAAI,MAAM;AAAkB,YAAM,iBAAiB,MAAM,SAAS,MAAM;AACxE,UAAM,kBAAkB,OAAO,cAAc,KAAK;AAClD,UAAM,YAAY,CAAC;AACnB,WAAO;AAAA,EACT;AAAA,EAEA,SAAkB;AAChB,WAAO;AAAA,EACT;AACF;AAEA,YAAY,SAAS,gBAAgB,WAAW;",
  "names": ["styles"]
}
