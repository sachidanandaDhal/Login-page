{
  "version": 3,
  "sources": ["../lib/context-consumer.ts"],
  "sourcesContent": ["/*\n * Allows to use context Provider and Consumer components in a similar manner than the Context in React. This is a direct derivative of a customized fork of content-provider.\n * @see {@link https://github.com/pinkhominid/context-provider} fork of context-provider.\n * @see {@link https://github.com/kcmr/context-provider} context-provider.\n *\n * */\nconst providerSymbol = Symbol('provider') as unknown as string;\nconst contextSymbol = Symbol('context') as unknown as string;\nconst EVENT_TYPE = 'context-provider';\n\n/**\n * Gets the Provider component that matches the identifier.\n *\n * @param {*} identifier Provider identifier.\n * @param {HTMLElement} context\n */\nconst getProvider = async (identifier, context) => {\n  const eventInit: CustomEventInit = { bubbles: true, composed: true, detail: { identifier } };\n  const event = new CustomEvent<{ provider?: unknown }>(EVENT_TYPE, eventInit);\n  context.dispatchEvent(event);\n\n  if (!event.detail.provider) {\n    // If both consumer and provider's connectedCallback() fire in the same call\n    // stack, provider might not exist yet. Wait for current call stack to finish &\n    // try again.\n    await new Promise(res => setTimeout(res, 0));\n    context.dispatchEvent(event);\n  }\n  return event.detail.provider;\n};\n\n/**\n * Provides a `context` property with the value of the nearest Provider component.\n * Changes in the `value` property of the Provider can be handled by implementing\n * the `onContextChanged()` hook.\n *\n * @mixin\n */\nconst contextConsumerMixin = SuperClass =>\n  class Consumer extends SuperClass {\n    constructor() {\n      super();\n      this.onContextChanged = this.onContextChanged.bind(this);\n    }\n\n    get context() {\n      if (this[providerSymbol]) {\n        return this[providerSymbol].value;\n      }\n\n      return undefined;\n    }\n\n    async _discoverContextProvider() {\n      this._forgetContextProvider();\n      this[providerSymbol] = await getProvider(contextSymbol, this);\n\n      if (this[providerSymbol]) {\n        this[providerSymbol].addEventListener('context-changed', this.onContextChanged);\n      }\n\n      // If context is already defined in the provider when the mixin component is\n      // created/connected we should consider that a change (from undefined), otherwise\n      // the component may never find out when the context is available.\n      if (this.context !== undefined) {\n        // @ts-ignore\n        this.onContextChanged(new Event('context-changed'));\n      }\n    }\n\n    _forgetContextProvider() {\n      // @ts-ignore\n      if (this[providerSymbol]) {\n        // @ts-ignore\n        this[providerSymbol].removeEventListener('context-changed', this.onContextChanged);\n      }\n      // @ts-ignore\n      this[providerSymbol] = null;\n    }\n\n    connectedCallback() {\n      if (super.connectedCallback) {\n        super.connectedCallback();\n      }\n\n      this._discoverContextProvider();\n    }\n\n    disconnectedCallback() {\n      this._forgetContextProvider();\n\n      if (super.disconnectedCallback) {\n        super.disconnectedCallback();\n      }\n    }\n\n    /**\n     * Callback executed when the nearest Provider changes its `value` property.\n     */\n    // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-empty-function\n    onContextChanged() {}\n  };\n\nexport { EVENT_TYPE, providerSymbol, contextSymbol, contextConsumerMixin };\n"],
  "mappings": "AAMA,MAAM,iBAAiB,OAAO,UAAU;AACxC,MAAM,gBAAgB,OAAO,SAAS;AACtC,MAAM,aAAa;AAQnB,MAAM,cAAc,OAAO,YAAY,YAAY;AACjD,QAAM,YAA6B,EAAE,SAAS,MAAM,UAAU,MAAM,QAAQ,EAAE,WAAW,EAAE;AAC3F,QAAM,QAAQ,IAAI,YAAoC,YAAY,SAAS;AAC3E,UAAQ,cAAc,KAAK;AAE3B,MAAI,CAAC,MAAM,OAAO,UAAU;AAI1B,UAAM,IAAI,QAAQ,SAAO,WAAW,KAAK,CAAC,CAAC;AAC3C,YAAQ,cAAc,KAAK;AAAA,EAC7B;AACA,SAAO,MAAM,OAAO;AACtB;AASA,MAAM,uBAAuB,gBAC3B,MAAM,iBAAiB,WAAW;AAAA,EAChC,cAAc;AACZ,UAAM;AACN,SAAK,mBAAmB,KAAK,iBAAiB,KAAK,IAAI;AAAA,EACzD;AAAA,EAEA,IAAI,UAAU;AACZ,QAAI,KAAK,cAAc,GAAG;AACxB,aAAO,KAAK,cAAc,EAAE;AAAA,IAC9B;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,2BAA2B;AAC/B,SAAK,uBAAuB;AAC5B,SAAK,cAAc,IAAI,MAAM,YAAY,eAAe,IAAI;AAE5D,QAAI,KAAK,cAAc,GAAG;AACxB,WAAK,cAAc,EAAE,iBAAiB,mBAAmB,KAAK,gBAAgB;AAAA,IAChF;AAKA,QAAI,KAAK,YAAY,QAAW;AAE9B,WAAK,iBAAiB,IAAI,MAAM,iBAAiB,CAAC;AAAA,IACpD;AAAA,EACF;AAAA,EAEA,yBAAyB;AAEvB,QAAI,KAAK,cAAc,GAAG;AAExB,WAAK,cAAc,EAAE,oBAAoB,mBAAmB,KAAK,gBAAgB;AAAA,IACnF;AAEA,SAAK,cAAc,IAAI;AAAA,EACzB;AAAA,EAEA,oBAAoB;AAClB,QAAI,MAAM,mBAAmB;AAC3B,YAAM,kBAAkB;AAAA,IAC1B;AAEA,SAAK,yBAAyB;AAAA,EAChC;AAAA,EAEA,uBAAuB;AACrB,SAAK,uBAAuB;AAE5B,QAAI,MAAM,sBAAsB;AAC9B,YAAM,qBAAqB;AAAA,IAC7B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,mBAAmB;AAAA,EAAC;AACtB;",
  "names": []
}
