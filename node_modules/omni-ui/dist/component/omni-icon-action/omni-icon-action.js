var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { html } from "lit";
import { property } from "lit/decorators.js";
import { OmniElement } from "../../omni-element.js";
import { OmniStyleElement } from "../omni-style/omni-style.js";
import { OmniIconElement } from "../omni-icon/omni-icon.js";
import { OmniTooltipElement } from "../omni-tooltip/omni-tooltip.js";
import { classMap } from "lit/directives/class-map.js";
import { css } from "lit";
const styles = css`:host([disabled]:hover),:host([disabled]){cursor:not-allowed}.omni .button.pd{padding:12px 18px}.omni .button.pd.is-active{background-image:rgb(var(--rgb-primary), 0.15);border:var(--color-transparent);color:var(--color-core-light)}`;
OmniStyleElement.register();
OmniIconElement.register();
OmniTooltipElement.register();
class OmniIconActions extends OmniElement {
  constructor() {
    super(...arguments);
    this.iconId = "";
    this.message = "";
    this.active = false;
    this.disabled = false;
    this.showOnDisable = false;
    this.place = "top";
  }
  static get styles() {
    return [...super.styles, styles];
  }
  /** @internal */
  get iconActionTemplate() {
    const classes = classMap({
      "is-text": !this.active,
      "is-active": this.active,
      "is-shadowless": true,
      button: true,
      icon: true,
      pd: true
    });
    return this.message !== "" ? html`
          <omni-tooltip ?show-on-disabled=${this.showOnDisable} .place=${this.place}>
            <button slot="invoker" class=${classes} ?disabled=${this.disabled} part="icon-action-button">
              <omni-icon icon-id=${this.iconId}></omni-icon>
            </button>
            <div slot="content">
              <p>${this.message}</p>
            </div>
          </omni-tooltip>
        ` : html`
          <button class=${classes} ?disabled=${this.disabled} part="icon-action-button">
            <omni-icon icon-id=${this.iconId}></omni-icon>
          </button>
        `;
  }
  render() {
    return html` <omni-style> ${this.iconActionTemplate} </omni-style> `;
  }
}
__decorateClass([
  property({ type: String, reflect: true, attribute: "icon-id" })
], OmniIconActions.prototype, "iconId", 2);
__decorateClass([
  property({ type: String, reflect: true })
], OmniIconActions.prototype, "message", 2);
__decorateClass([
  property({ type: Boolean, reflect: true, attribute: true })
], OmniIconActions.prototype, "active", 2);
__decorateClass([
  property({ type: Boolean, attribute: true })
], OmniIconActions.prototype, "disabled", 2);
__decorateClass([
  property({ type: Boolean, attribute: "show-on-disable" })
], OmniIconActions.prototype, "showOnDisable", 2);
__decorateClass([
  property({ type: String, attribute: true, reflect: true })
], OmniIconActions.prototype, "place", 2);
OmniElement.register("omni-icon-action", OmniIconActions);
export {
  OmniIconActions
};
//# sourceMappingURL=omni-icon-action.js.map
