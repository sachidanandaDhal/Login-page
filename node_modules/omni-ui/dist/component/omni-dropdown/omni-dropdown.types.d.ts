type Attribute = {
    key: string;
    value: string;
} | string;
export interface SelectableItem<T = string | number> {
    value: T;
    /** optional:  if no 'real' id is available, create one */
    id?: string;
    disabled?: boolean;
    attributes?: Attribute[];
    [key: string]: unknown;
}
/**
 * - A group header is a selectable item that is used to group options in the dropdown.
 * - Items immediately following a group header are part of a group. Another groupheader marks the end of a previous group and the start of a new group.
 * @example
 * ```js
 * const options = [
 * { groupheader: true, value: 'Group 1' },
 * 'option1',
 * 'option2',
 * { groupheader: true, value: 'Group 2' },
 * 'option3',
 * 'option4',
 * ]
 * ```
 */
export interface GroupHeader extends SelectableItem {
    groupheader: boolean;
}
export type Option = number | string | SelectableItem | GroupHeader;
export type AsyncFetchOptionsFn = (searchString?: string) => Promise<Option[]>;
export type SyncFetchOptionsFn = (searchString?: string) => Option[];
export type FetchOptionsFn = AsyncFetchOptionsFn | SyncFetchOptionsFn;
/** type guard for groupheader */
export declare function isGroupHeader(option: Option | GroupHeader): option is GroupHeader;
export {};
//# sourceMappingURL=omni-dropdown.types.d.ts.map