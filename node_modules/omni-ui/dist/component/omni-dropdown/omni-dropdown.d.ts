import { type TemplateResult } from 'lit';
import { ElementInternalsBase } from '../../element-internals-base.js';
import { type Option, type GroupHeader, type FetchOptionsFn } from './omni-dropdown.types.js';
import '../omni-pill-list/omni-pill-list.js';
import '../omni-loading-indicator/omni-loading-indicator.js';
import '../omni-icon/omni-icon.js';
import '../omni-tooltip/omni-tooltip.js';
import '../omni-search/omni-search.js';
import '../omni-options/omni-options.js';
import '../omni-checkbox/omni-checkbox.js';
/**
 * To include within your project `import { OmniDropdown } from 'omni-ui';`
 *
 * @tagname omni-dropdown
 * @attr {boolean} required - adds required attribute to dropdown for form validation
 * @event {Option | Option[]} change - fires when selection changes
 */
export declare class OmniDropdown extends ElementInternalsBase<Option[]> {
    #private;
    static get styles(): import("lit").CSSResult[];
    /** given an option, find first group header with higher index than option */
    static findGroupHeaderForItem(option: Option, allOptions: Option[]): GroupHeader | null;
    private _selected;
    private _disabled;
    private _disabledOnMaxSet;
    private _computedTargetWidth;
    private _computedLabelWidth;
    private _searchTerm;
    private _filteredOptions;
    private _isLoading;
    private _hasGroupHeaders;
    opened: boolean;
    disableonmax: boolean;
    multiselect: boolean;
    noselect: boolean;
    selectall: boolean;
    typeahead: boolean;
    searchindropdown: boolean;
    dynamicadditions: boolean;
    hidefooter: boolean;
    name: string;
    valueMissingMessage: string;
    label: string;
    labelTooltip: string | TemplateResult;
    placeholder: string;
    searchPlaceholder: string;
    helpText: string;
    /** error message will show when set */
    error: string;
    disabledMessage: string;
    labelPosition: 'top' | 'left';
    dropdownAlignment: 'extend-right' | 'vertical';
    /** min: an integer: 1 or greater */
    min: number;
    /** max: an integer: 1 or greater */
    max: number;
    inputDebounceTimer: number;
    variant: 'default' | 'label';
    showxicon: boolean;
    options: Option[];
    value: Option[];
    fetchOptionsFn: FetchOptionsFn;
    private targetEl;
    private labelEl;
    connectedCallback(): Promise<void>;
    disconnectedCallback(): void;
    willUpdate(changed: Map<string, unknown>): Promise<void>;
    firstUpdated(): Promise<void>;
    updated(changed: Map<string, unknown>): void;
    /** select items in dropdown */
    select(options: Option[]): void;
    /** unselect items in dropdown */
    unselect(options: Option[]): void;
    /** toggle items to be selected or unselected based on current state */
    toggle(options: Option[]): void;
    /** add options to the list of disabled options */
    disableOptions(options: Option[]): void;
    /** reset all selected options, form value, and reflected value */
    reset(): void;
    render(): TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'omni-dropdown': OmniDropdown;
    }
}
//# sourceMappingURL=omni-dropdown.d.ts.map