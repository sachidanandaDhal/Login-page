{
  "version": 3,
  "sources": ["../../../lib/component/omni-dropdown/omni-dropdown.types.ts"],
  "sourcesContent": ["type Attribute =\n  | {\n      key: string;\n      value: string;\n    }\n  | string;\n\nexport interface SelectableItem<T = string | number> {\n  value: T;\n  /** optional:  if no 'real' id is available, create one */\n  id?: string;\n  disabled?: boolean;\n  attributes?: Attribute[];\n  [key: string]: unknown;\n}\n/**\n * - A group header is a selectable item that is used to group options in the dropdown.\n * - Items immediately following a group header are part of a group. Another groupheader marks the end of a previous group and the start of a new group.\n * @example\n * ```js\n * const options = [\n * { groupheader: true, value: 'Group 1' },\n * 'option1',\n * 'option2',\n * { groupheader: true, value: 'Group 2' },\n * 'option3',\n * 'option4',\n * ]\n * ```\n */\nexport interface GroupHeader extends SelectableItem {\n  groupheader: boolean;\n}\n\nexport type Option = number | string | SelectableItem | GroupHeader;\nexport type AsyncFetchOptionsFn = (searchString?: string) => Promise<Option[]>;\nexport type SyncFetchOptionsFn = (searchString?: string) => Option[];\nexport type FetchOptionsFn = AsyncFetchOptionsFn | SyncFetchOptionsFn;\n/** type guard for groupheader */\nexport function isGroupHeader(option: Option | GroupHeader): option is GroupHeader {\n  return (option as GroupHeader)?.groupheader;\n}\n"],
  "mappings": "AAuCO,SAAS,cAAc,QAAqD;AACjF,SAAQ,QAAwB;AAClC;",
  "names": []
}
