var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import "element-internals-polyfill";
import { html } from "lit";
import { property, query, state } from "lit/decorators.js";
import { classMap } from "lit/directives/class-map.js";
import { styleMap } from "lit/directives/style-map.js";
import { when } from "lit/directives/when.js";
import { defaultUploadImg } from "../../assets/img-upload-default.js";
import { OmniElement } from "../../omni-element.js";
import { OmniImageInputElement } from "../omni-img-input/omni-img-input.js";
import { css } from "lit";
const styles = css`:host{--bg-color: var(--color-white);border:none}:host([disabled]){opacity:.3;cursor:not-allowed}:host([disabled]) div{pointer-events:none}omni-style{height:100%}div{display:grid;grid-template-rows:repeat(3, 1fr);grid-template-columns:repeat(3, 1fr);place-items:center;width:100%;height:100%}.omni svg,.omni img{pointer-events:none;grid-area:1/1/4/4;width:100%;height:100%}div.cover{grid-area:1/1/4/4;background-color:#fff;opacity:.7}omni-icon{width:100%;height:100%;grid-column-start:2;grid-row-start:2;cursor:pointer;z-index:1}omni-icon:hover{transition:fill .3s ease;--color-icon-lines: var(--color-electric-blue)}omni-tooltip{grid-column-start:2}.offset-left{margin-left:-50%;margin-right:50%}.offset-right{margin-right:-50%;margin-left:50%}.tooltip-container{position:relative}.tooltip{position:absolute;top:0;left:0}#arrow{top:-4px;left:37.5px}[type=file]{display:none}`;
class OmniImgUploadElement extends OmniImageInputElement {
  constructor() {
    super(...arguments);
    /**@internal */
    this._internals = this.attachInternals();
    this.isHidden = true;
    this.height = 70;
    this.width = 70;
    this.imgSrc = "";
    this.valueMissingMessage = "Please select an image";
  }
  static get styles() {
    return [...super.styles, styles];
  }
  static {
    this.formAssociated = true;
  }
  /** @internal */
  get valid() {
    return this._internals.checkValidity();
  }
  /**
   * value behavior for file input element
   * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#value
   */
  /** @internal */
  get value() {
    if (this._fileInputElNoValidate?.value) {
      return this._fileInputElNoValidate.value;
    }
    if (this.imgSrc) {
      const segments = this.imgSrc.split("/");
      const fileNameWithType = segments.pop();
      const [fileName, fileType] = fileNameWithType.split(".");
      return `C:\\fakepath\\${fileName}.${fileType}`;
    }
    return "";
  }
  /** @internal */
  set value(value) {
    console.error("value cannot be set. set through img property");
  }
  connectedCallback() {
    super.connectedCallback();
    this.tabIndex = !this.disabled ? 0 : -1;
  }
  /** @internal */
  async initializeFiles(imgSrc) {
    await super.initializeFiles(imgSrc);
    if (Object.keys(this._files).length) {
      const [key, value] = Object.entries(this._files)[0];
      this.filename = value.file.name;
      this._internals.setFormValue(value.file);
    }
  }
  async firstUpdated() {
    await this.updateComplete;
    if (this.required && !this.imgSrc) {
      this._internals.setValidity({ valueMissing: true }, this.valueMissingMessage, this._imageIconEl);
    } else if (this.imgSrc) {
      await this.initializeFiles(this.imgSrc);
    } else {
      this._internals.setValidity({});
    }
  }
  willUpdate(changed) {
    if (changed.has("multiple")) {
      if (this.multiple) {
        console.warn("omni-img-upload does not support multiple files");
      }
      this.multiple = false;
    }
  }
  /** @internal */
  #handleHoverEvent(which) {
    this.isHidden = which === "exit";
  }
  /** @internal */
  #onUploadClick() {
    this._fileInputElNoValidate.click();
  }
  /** @internal */
  get #noUploadTemplate() {
    return html`
      ${defaultUploadImg(html)}
      <omni-icon part="upload-icon" icon-id="omni:interactive:plus" @click=${this.#onUploadClick}> </omni-icon>
    `;
  }
  /** @internal */
  #onDeleteClick() {
    this.reset();
    this.dispatchNewEvent("change", { detail: { file: null } });
  }
  /** @internal */
  get #uploadedTemplate() {
    const classes = { "is-hidden": this.isHidden };
    return html`
      <img class="image is-rounded" src=${this.imgSrc} alt="Uploaded from ${this.imgSrc}" />
      <div class="cover ${classMap(classes)}">
        <omni-icon part="upload-icon" icon-id="omni:interactive:edit" class="offset-left" @click=${this.#onUploadClick}>
        </omni-icon>
        <omni-icon
          part="delete-icon"
          icon-id="omni:interactive:delete"
          class="offset-right"
          @click=${this.#onDeleteClick}>
        </omni-icon>
      </div>
    `;
  }
  /**@internal */
  async #onFileChange(e) {
    if (!e.target.files.length) {
      return;
    }
    this._files = {};
    this._addFilesToOmniFileList(e.target.files);
    await this._processInvalidFiles();
    if (Object.keys(this._files).length > 0) {
      const [key, value] = Object.entries(this._files)[0];
      this.imgSrc = this._files[key].previewSrc;
      this.filename = value.file.name;
      this._internals.setFormValue(value.file);
      this._internals.setValidity({});
    }
    this._createAndEmitChangeEvent();
    this.isHidden = true;
  }
  reportValidity() {
    return this._internals.reportValidity();
  }
  checkValidity() {
    return this._internals.checkValidity();
  }
  /** reset the selected images */
  reset() {
    super.reset();
    if (!this.disabled) {
      this._fileInputElNoValidate.files = null;
      this._fileInputElNoValidate.value = "";
      this.imgSrc = "";
      this.filename = "";
      this._internals.setFormValue("");
      this._internals.setValidity({});
      if (this.required) {
        this._internals.setValidity({ valueMissing: true }, this.valueMissingMessage, this._imageIconEl);
      }
    }
  }
  /** @internal */
  render() {
    return html`
      <omni-style>
        <div
          style="${styleMap({ height: `${this.height}px`, width: `${this.width}px` })}"
          @mouseover=${() => this.#handleHoverEvent("enter")}
          @mouseout=${() => this.#handleHoverEvent("exit")}>
          ${when(
      !this.imgSrc,
      () => this.#noUploadTemplate,
      () => this.#uploadedTemplate
    )}
        </div>
      </omni-style>
      <input type="file" @change=${this.#onFileChange} accept=${this.accept} />
      <div class="tooltip-container">${this._tooltipTemplate}</div>
    `;
  }
}
__decorateClass([
  state()
], OmniImgUploadElement.prototype, "isHidden", 2);
__decorateClass([
  property({ type: String })
], OmniImgUploadElement.prototype, "name", 2);
__decorateClass([
  property({ type: String })
], OmniImgUploadElement.prototype, "filename", 2);
__decorateClass([
  property({ type: Number, reflect: true })
], OmniImgUploadElement.prototype, "height", 2);
__decorateClass([
  property({ type: Number, reflect: true })
], OmniImgUploadElement.prototype, "width", 2);
__decorateClass([
  property({ type: String, reflect: true, attribute: "img" })
], OmniImgUploadElement.prototype, "imgSrc", 2);
__decorateClass([
  property({ type: String })
], OmniImgUploadElement.prototype, "valueMissingMessage", 2);
__decorateClass([
  query('input[type="file"]')
], OmniImgUploadElement.prototype, "_fileInputElNoValidate", 2);
__decorateClass([
  query("div")
], OmniImgUploadElement.prototype, "_imageIconEl", 2);
OmniElement.register("omni-img-upload", OmniImgUploadElement);
export {
  OmniImgUploadElement
};
//# sourceMappingURL=omni-img-upload.js.map
