import { html, css } from "lit";
import { OmniElement } from "../omni-element.js";
class OmniOptgroup extends OmniElement {
  static get properties() {
    return {
      indeterminate: {
        type: Boolean
      },
      disabled: { type: Boolean, reflect: true },
      label: {
        type: String,
        reflect: true,
        converter: {
          // when the name is empty remove the attribute
          toAttribute(value) {
            const name = value.trim();
            return name || void 0;
          }
        }
      }
    };
  }
  static get styles() {
    return [
      css`
        :host {
          contain: strict style;
          display: flex;
          flex-direction: column;
          margin: 0.1rem;
          padding: 0;
          margin: 0;
          border: 0;
          --padding-adjust: 1em;
        }
        :host([disabled]) {
          pointer-events: none;
          --color: var(--color-disabled);
          --icon-border: var(--icon-border-disabled);
          --option-hover: transparent;
        }
      `
    ];
  }
  constructor() {
    super();
    this.addEventListener("option", this._option);
  }
  _option(event) {
    if (this.disabled) {
      event.stopPropagation();
    }
    const node = event.target;
    const optgroup = node.hasAttribute("optgroup");
    if (optgroup) {
      event.stopPropagation();
      return;
    }
    this.determine();
  }
  toggle(on) {
    const option = this.shadowRoot.querySelector("omni-option");
    if (on === void 0) {
      on = !option.selected;
    }
    const direction = Boolean(on);
    this.options.forEach((node) => {
      node.selected = direction;
    });
    this.indeterminate = false;
    option.selected = direction;
  }
  /* debounced, updates the indeterminate attribute
    based on a mix of events
   */
  determine() {
    cancelAnimationFrame(this._determine);
    this._determine = requestAnimationFrame(() => {
      if (!this.closest("[multiple]"))
        return;
      const { options } = this;
      const selectedCount = this.selectedOptions.length;
      const total = options.length;
      this.indeterminate = !(!selectedCount || total === selectedCount);
      this.shadowRoot.querySelector("omni-option[optgroup]").selected = total === selectedCount;
    });
  }
  // returns selected children
  get selectedOptions() {
    return this.querySelectorAll(":scope > omni-option[selected], :scope > option[selected]");
  }
  // returns option children
  get options() {
    return this.querySelectorAll(":scope > omni-option, :scope > option");
  }
  _slotchange() {
    this.determine();
  }
  render() {
    return html`
      <omni-option ?indeterminate=${this.indeterminate} optgroup>${this.label}</omni-option>
      <div><slot @slotchange=${this._slotchange}></slot></div>
    `;
  }
}
OmniOptgroup.register("omni-optgroup", OmniOptgroup);
export {
  OmniOptgroup
};
//# sourceMappingURL=omni-optgroup.js.map
