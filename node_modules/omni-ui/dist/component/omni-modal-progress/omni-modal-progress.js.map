{
  "version": 3,
  "sources": ["../../../lib/component/omni-modal-progress/omni-modal-progress.ts"],
  "sourcesContent": ["import { html, nothing } from 'lit';\nimport { property, state, query } from 'lit/decorators.js';\nimport { OmniElement } from '../../omni-element.js';\nimport '../omni-progress-bar/omni-progress-bar.js';\n\nimport {css} from 'lit';\nconst styles = css`:host{overflow:visible;position:relative;z-index:999;top:0;bottom:0;left:0;right:0}.modal-container{display:flex;flex-direction:column;align-items:center;justify-content:center;position:fixed;top:0;bottom:0;left:0;right:0}section.backdrop{position:fixed;top:0;bottom:0;left:0;right:0;background-color:#3b3e3f;opacity:.5;z-index:1000;cursor:default}section.body{position:relative;z-index:1001;width:479px;padding:40px;border:1px solid #edf0f4;border-radius:10px;background-color:#fff;display:flex;flex-direction:column;justify-content:center}section.body span.step{font-size:14px;font-weight:600;font-stretch:normal;font-style:normal;line-height:normal;letter-spacing:.31px;color:#3b3e3f;margin-bottom:20px}section.body div.bars{display:flex;align-items:center;justify-content:space-between;margin-bottom:8px}section.body div.bars omni-progress-bar{flex-grow:1;margin:0 5px}section.body span.info{font-size:14px;font-weight:normal;font-stretch:normal;font-style:normal;line-height:normal;letter-spacing:.31px;color:#a2a9ad;text-align:center}section.body ::slotted(div[slot=buttons]){margin-top:16px;display:flex;justify-content:end}`\n\n\nexport interface ProgressStep {\n  text: string;\n  ratio: number;\n}\n\n/**\n *\n * Progress bar with configurable phases\n *\n * To include within your project `import { OmniModalProgress } from 'omni-ui';`\n *\n * ## \uD83D\uDCDD Usage\n *\n * **Basic Omni Progress Modal Rendering**:\n *\n * ```html\n * <omni-style>\n *  <omni-modal-progress\n *   .steps=${this.steps}\n *   .estimatedTime=${5}\n *   showcountdown>\n *  </omni-modal-progress>\n * </omni-style>\n * ```\n *\n * ```Js\n * // if the request completes before the estimated time, animate the progress bars to completed,\n * // then do an action like routing\n * async closeModalEarly(){\n *   const omniModalProgress = this.shadowRoot.querySelector('omni-modal-progress');\n *   await omniModalProgress.rollToComplete();\n *   router.navigate('/complete');\n * }\n * ```\n *\n * ```Js\n * // if needed, add a click event handler to close the modal from clicks\n * handleClickOutsideModalBody(e) {\n *   const omniModalProgress = this.shadowRoot.querySelector('omni-modal-progress');\n *   if (omniModalProgress) {\n *     const { modalBody } = omniModalProgress;\n *     const isInsideModal = e.composedPath().includes(modalBody);\n *     if (!isInsideModal) {\n *       this.showModal = false;\n *     }\n *   }\n * }\n * ```\n * **Slots**:\n *\n * `<omni-modal-progress>` has two slots:\n * - `message`: The message slot element\n * - `buttons`: the buttons slot element\n *\n * **Methods**:\n *\n * `<omni-modal-progress>` has two methods:\n * - `rollToComplete()`: call to animate the progress bars to complete returns a promise\n * @tagname omni-modal-progress\n * @slot message - The message slot element\n * @slot buttons - The buttons slot element\n */\n\nexport class OmniModalProgress extends OmniElement {\n  static get styles() {\n    return [...super.styles, styles];\n  }\n\n  #stepInterval: ReturnType<typeof setInterval>;\n  #elapsedInterval: ReturnType<typeof setInterval>;\n  @state() private activeStepIdx: number = 0;\n  @state() private elapsed: number = 0;\n  @state() private progress: number[] = [];\n  @state() private isRollingToComplete = false;\n  @state() private slottedMessageExists = false;\n  @property({ type: Number }) estimatedTime: number = 30;\n  @property({ type: Array }) steps: ProgressStep[] = [];\n  @property({ type: Boolean, attribute: true }) showcountdown = false;\n  @query('.body') private modalBody!: HTMLElement;\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.progress = new Array(this.steps.length).fill(0);\n    this.#elapsedInterval = setInterval(() => {\n      this.elapsed = this.elapsed + 1;\n      if (this.elapsed >= this.estimatedTime) {\n        clearInterval(this.#elapsedInterval);\n      }\n    }, 1000);\n    this.moveToStep(0);\n  }\n\n  private moveToStep(idx: number) {\n    this.activeStepIdx = idx;\n    const intervalStepPeriod = 100;\n    const stepsToMake100 = this.estimatedTime * this.steps[idx].ratio * 100 * (intervalStepPeriod / 1000);\n    this.#stepInterval = setInterval(() => {\n      this.progress[idx] += intervalStepPeriod / stepsToMake100;\n      this.requestUpdate();\n      if (this.progress[idx] > 100) {\n        clearInterval(this.#stepInterval);\n        if (this.steps[idx + 1]) {\n          this.moveToStep(idx + 1);\n        }\n      }\n    }, intervalStepPeriod);\n  }\n\n  public async rollToComplete() {\n    this.isRollingToComplete = true;\n    clearInterval(this.#stepInterval);\n    this.elapsed = this.estimatedTime - 1;\n    const timeout = (timeoutMs: number) => new Promise(resolve => setTimeout(resolve, timeoutMs));\n    for (const idx in this.steps) {\n      if (this.progress[idx] < 100) {\n        this.progress[idx] = 100;\n        this.requestUpdate();\n        await timeout(500);\n      }\n    }\n    clearInterval(this.#elapsedInterval);\n  }\n\n  render() {\n    const remaining = this.estimatedTime - this.elapsed;\n    const countdown = this.showcountdown ? `About ${remaining} second${remaining > 1 ? 's' : ''} remaining.` : nothing;\n    const countdownPadding = this.slottedMessageExists ? 'margin-top: 8px' : 'margin-top: 24px';\n    return html`\n      <omni-style>\n        <div class=\"modal-container\">\n          <section class=\"backdrop\"></section>\n          <section class=\"body\">\n            <span class=\"step\"> ${this.steps[this.activeStepIdx].text} </span>\n            <div class=\"bars\">\n              ${this.steps.map(\n                (step, idx) => html` <omni-progress-bar .value=${this.progress[idx]}></omni-progress-bar> `\n              )}\n            </div>\n            <slot name=\"message\" @slotchange=${() => (this.slottedMessageExists = true)}></slot>\n            <span class=\"info\" style=\"${countdownPadding}\">\n              ${remaining > 0\n                ? countdown\n                : !this.isRollingToComplete\n                  ? 'This is taking longer than expected'\n                  : countdown}\n            </span>\n            <slot name=\"buttons\"></slot>\n          </section>\n        </div>\n      </omni-style>\n    `;\n  }\n}\n\nOmniElement.register('omni-modal-progress', OmniModalProgress);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'omni-modal-progress': OmniModalProgress;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
