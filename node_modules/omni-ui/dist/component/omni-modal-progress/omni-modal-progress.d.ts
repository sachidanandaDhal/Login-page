import { OmniElement } from '../../omni-element.js';
import '../omni-progress-bar/omni-progress-bar.js';
export interface ProgressStep {
    text: string;
    ratio: number;
}
/**
 *
 * Progress bar with configurable phases
 *
 * To include within your project `import { OmniModalProgress } from 'omni-ui';`
 *
 * ## üìù Usage
 *
 * **Basic Omni Progress Modal Rendering**:
 *
 * ```html
 * <omni-style>
 *  <omni-modal-progress
 *   .steps=${this.steps}
 *   .estimatedTime=${5}
 *   showcountdown>
 *  </omni-modal-progress>
 * </omni-style>
 * ```
 *
 * ```Js
 * // if the request completes before the estimated time, animate the progress bars to completed,
 * // then do an action like routing
 * async closeModalEarly(){
 *   const omniModalProgress = this.shadowRoot.querySelector('omni-modal-progress');
 *   await omniModalProgress.rollToComplete();
 *   router.navigate('/complete');
 * }
 * ```
 *
 * ```Js
 * // if needed, add a click event handler to close the modal from clicks
 * handleClickOutsideModalBody(e) {
 *   const omniModalProgress = this.shadowRoot.querySelector('omni-modal-progress');
 *   if (omniModalProgress) {
 *     const { modalBody } = omniModalProgress;
 *     const isInsideModal = e.composedPath().includes(modalBody);
 *     if (!isInsideModal) {
 *       this.showModal = false;
 *     }
 *   }
 * }
 * ```
 * **Slots**:
 *
 * `<omni-modal-progress>` has two slots:
 * - `message`: The message slot element
 * - `buttons`: the buttons slot element
 *
 * **Methods**:
 *
 * `<omni-modal-progress>` has two methods:
 * - `rollToComplete()`: call to animate the progress bars to complete returns a promise
 * @tagname omni-modal-progress
 * @slot message - The message slot element
 * @slot buttons - The buttons slot element
 */
export declare class OmniModalProgress extends OmniElement {
    #private;
    static get styles(): import("lit").CSSResult[];
    private activeStepIdx;
    private elapsed;
    private progress;
    private isRollingToComplete;
    private slottedMessageExists;
    estimatedTime: number;
    steps: ProgressStep[];
    showcountdown: boolean;
    private modalBody;
    connectedCallback(): void;
    private moveToStep;
    rollToComplete(): Promise<void>;
    render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'omni-modal-progress': OmniModalProgress;
    }
}
//# sourceMappingURL=omni-modal-progress.d.ts.map