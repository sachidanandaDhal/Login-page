var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { html, svg } from "lit";
import { property } from "lit/decorators.js";
import { OmniElement } from "../../omni-element.js";
import { resolveOmniIconset } from "../../icon/omni-icon-resolver.js";
import { css } from "lit";
const styles = css`:host{--color-icon-lines: var(--color-almost-black);fill:var(--color-icon-lines);height:1em;width:1em}:host svg{vertical-align:top}:host svg[fill-stroke],:host svg[stroke-fill],:host ::slotted(:is(svg[fill-stroke],svg[stroke-fill])){stroke:var(--color-icon-lines)}:host(.is-info),:host(.is-active),:host(.is-success),:host(.is-warning),:host(.is-danger){--color-icon-lines: white;width:2em;height:2em}:host(.is-info) div,:host(.is-active) div,:host(.is-success) div,:host(.is-warning) div,:host(.is-danger) div,:host(.is-info) slot,:host(.is-active) slot,:host(.is-success) slot,:host(.is-warning) slot,:host(.is-danger) slot{display:flex;align-items:center;justify-content:center;transform-style:preserve-3d;width:100%;height:100%}:host(.is-info) svg,:host(.is-active) svg,:host(.is-success) svg,:host(.is-warning) svg,:host(.is-danger) svg,:host(.is-info) ::slotted(svg),:host(.is-active) ::slotted(svg),:host(.is-success) ::slotted(svg),:host(.is-warning) ::slotted(svg),:host(.is-danger) ::slotted(svg){height:50%;width:50%}:host(.is-info) div::before,:host(.is-active) div::before,:host(.is-success) div::before,:host(.is-warning) div::before,:host(.is-danger) div::before,:host(.is-info) div::after,:host(.is-active) div::after,:host(.is-success) div::after,:host(.is-warning) div::after,:host(.is-danger) div::after,:host(.is-info) slot::before,:host(.is-active) slot::before,:host(.is-success) slot::before,:host(.is-warning) slot::before,:host(.is-danger) slot::before,:host(.is-info) slot::after,:host(.is-active) slot::after,:host(.is-success) slot::after,:host(.is-warning) slot::after,:host(.is-danger) slot::after{content:"";display:block;position:absolute;border-radius:50%;width:100%;height:100%}:host(.is-info) div::before,:host(.is-active) div::before,:host(.is-success) div::before,:host(.is-warning) div::before,:host(.is-danger) div::before,:host(.is-info) slot::before,:host(.is-active) slot::before,:host(.is-success) slot::before,:host(.is-warning) slot::before,:host(.is-danger) slot::before{box-shadow:inset 0 0 0 1.5px rgba(255,255,255,.3);transform:translateZ(-2px)}:host(.is-info) div::after,:host(.is-active) div::after,:host(.is-success) div::after,:host(.is-warning) div::after,:host(.is-danger) div::after,:host(.is-info) slot::after,:host(.is-active) slot::after,:host(.is-success) slot::after,:host(.is-warning) slot::after,:host(.is-danger) slot::after{background-color:rgba(255,255,255,.15);clip-path:polygon(0 20%, 0 0, 100% 0, 100% 80%);transform:translateZ(-1px)}:host(.is-info) div::before,:host(.is-info) slot::before{background-image:linear-gradient(172deg, var(--color-electric-blue) 11%, #03bbf3 122%)}:host(.is-success) div::before,:host(.is-success) slot::before{background-image:linear-gradient(144deg, var(--color-mint), #00e3ae 125%)}:host(.is-warning) div::before,:host(.is-warning) slot::before{background-image:linear-gradient(158deg, var(--color-honeycomb) -24%, #f0b248 126%)}:host(.is-danger) div::before,:host(.is-danger) slot::before{background-image:linear-gradient(137deg, var(--color-melon) 4%, #f56c8e)}:host(.is-active) div::before,:host(.is-active) slot::before{box-shadow:inset 0 0 0 1px var(--color-electric-blue);background-image:linear-gradient(93deg, #fff 50%, #03bbf3 50%, var(--color-electric-blue))}:host(.is-active) div,:host(.is-active) slot{--color-icon-lines: var(--color-electric-blue);fill:var(--color-icon-lines)}:host(.is-active) div::after,:host(.is-active) slot::after{background-color:#fff;clip-path:none;width:84%;height:84%;box-shadow:0 1px 2px 1px var(--color-electric-blue)}`;
class OmniIconElement extends OmniElement {
  constructor() {
    super(...arguments);
    this.ariaLabel = "icon";
    this.iconId = "";
    this.role = "img";
  }
  static get styles() {
    return [...super.styles, styles];
  }
  update(changedProperties) {
    super.update(changedProperties);
    if (changedProperties.has("iconId")) {
      this._updateIcon();
    }
  }
  /**@internal */
  _updateIcon(resolve = this.resolver ?? resolveOmniIconset) {
    const iconParts = (this.iconId || "").trim().split(":");
    const [collection, group, id] = iconParts;
    if (!this.iconId) {
      console.warn(`<omni-icon>: icon-id is not set`);
      return;
    }
    return resolve(group).then((res) => {
      const icon = res[id]();
      this.icon = icon;
      return { res, collection, group, id, icon };
    }).catch((error) => {
      console.error(`<omni-icon>: Error resolving icon-id ${this.iconId}`, error);
      this.icon = svg`?`;
      return error;
    }).finally(() => {
      this.requestUpdate();
    });
  }
  render() {
    return html`<div part="icon">${this.icon ?? ""}</div>`;
  }
}
__decorateClass([
  property({ type: String, attribute: "aria-label", reflect: true })
], OmniIconElement.prototype, "ariaLabel", 2);
__decorateClass([
  property({ type: String, attribute: "icon-id", reflect: true })
], OmniIconElement.prototype, "iconId", 2);
__decorateClass([
  property({ type: String, reflect: true })
], OmniIconElement.prototype, "role", 2);
OmniElement.register("omni-icon", OmniIconElement);
export {
  OmniIconElement
};
//# sourceMappingURL=omni-icon.js.map
