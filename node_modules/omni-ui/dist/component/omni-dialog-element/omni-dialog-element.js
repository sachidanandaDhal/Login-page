var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { html } from "lit";
import { property, query, state } from "lit/decorators.js";
import { classMap } from "lit/directives/class-map.js";
import { OmniElement } from "../../omni-element.js";
import { css } from "lit";
const styles = css`:host{--informative: linear-gradient(90deg, #00a1d2 0%, #00cfeb 100%);--success: var(--gradient-mint);--alert: var(--gradient-honeycomb);--error: var(--gradient-melon)}#toast{position:fixed;max-width:57.1428571429rem;border-radius:0.7142857143rem;border:none;top:1.4285714286rem;left:50%;transform:translateX(-50%);z-index:40;padding:15px}#toast .info{float:left;width:1.4285714286rem;--color-icon-lines: white;margin-top:0.7857142857rem;margin-left:1.4285714286rem;margin-right:1.4285714286rem;font-size:1.14rem}#toast.hide{display:none}#toast.close-toast{animation:fadeout .35s;animation-timing-function:cubic-besier(0.12, 1.09, 0.87, 0.98);animation-fill-mode:forwards}#toast.open-toast{display:block;animation:fadein .35s;animation-timing-function:cubic-besier(0, 0.74, 0.04, 0.92)}@keyframes fadein{from{top:-7.1428571429rem;opacity:0}to{top:1.4285714286rem;opacity:1}}@keyframes fadeout{from{top:1.4285714286rem;opacity:1}to{top:-7.1428571429rem;opacity:0}}.toast-content{padding:0.7142857143rem 1.4285714286rem 0.7142857143rem 4.2857142857rem}.banner-dialog{border:none;border-radius:0.7142857143rem;width:42.8571428571rem}.banner-dialog .close{--color-icon-lines: white;position:absolute;right:1.4285714286rem;top:0.8571428571rem;width:1.9285714286rem;cursor:pointer;font-size:1.14rem}.banner-dialog .close:hover{height:27px;border-radius:5px;background-color:rgba(255,255,255,.4)}.banner-dialog .info{float:left;width:1.4285714286rem;--color-icon-lines: white;margin-top:1.7857142857rem;margin-left:0.7142857143rem;margin-right:1.4285714286rem;font-size:1.14rem}.banner-dialog.alert omni-icon.close{--color-icon-lines: var(--color-almost-black)}.modal-dialog{border:none;border-radius:0.7142857143rem;padding:0rem;width:42.8571428571rem}.modal-dialog .close{position:absolute;right:1.0714285714rem;top:1.0714285714rem;width:1.7857142857rem;cursor:pointer}.modal-dialog .info{float:left;width:1.4285714286rem;--color-icon-lines: white;margin-top:0.2857142857rem;margin-right:1.4285714286rem;margin-left:0.7142857143rem;font-size:1.14rem}.modal-dialog .button{margin-right:10px}.omni .button.is-text.is-success:active{background-color:rgba(44,196,173,.15)}.omni .button.is-text.is-warning:active{background-color:rgba(254,216,130,.15)}.omni .button.is-text.is-danger:active{background-color:rgba(223,86,120,.15)}.informational{background:linear-gradient(90deg, #00a1d2 0%, #00cfeb 100%);color:#fff}.informational-modal{padding:0.7142857143rem !important;font-size:1.2857142857rem;font-weight:600;background:linear-gradient(90deg, #00a1d2 0%, #00cfeb 100%);color:#fff}.success{background:linear-gradient(90deg, #2cc4ad 0%, #00e3ae 100%);color:#fff}.success-modal{padding:0.7142857143rem !important;font-size:1.2857142857rem;font-weight:600;background:linear-gradient(90deg, #2cc4ad 0%, #00e3ae 100%);color:#fff}.alert{background:linear-gradient(90deg, #fed882 0%, #f8d991 100%);color:#000}.alert .info{--color-icon-lines: black !important}.alert-modal{padding:0.7142857143rem !important;font-size:1.2857142857rem;font-weight:600;background:linear-gradient(90deg, #fed882 0%, #f8d991 100%);color:#000}.alert-modal .info{--color-icon-lines: black}.error{background:linear-gradient(139.09deg, #df5678 14.91%, #f56c8e 85.27%);color:#fff}.error-modal{padding:0.7142857143rem !important;font-size:1.2857142857rem;font-weight:600;background:linear-gradient(139.09deg, #df5678 14.91%, #f56c8e 85.27%);color:#fff}dialog::backdrop{background-color:rgba(0,0,0,.4)}`;
class OmniDialogElement extends OmniElement {
  constructor() {
    super(...arguments);
    this._toastClasses = { hide: true };
    this.modalType = "modal";
    this.modalStyle = "informational";
    this.modalTitle = "";
    this.toastTimeOut = 3e3;
  }
  static get styles() {
    return [...super.styles, styles];
  }
  get iconId() {
    const iconMaps = {
      informational: "omni:informative:info",
      alert: "omni:informative:alert",
      success: "omni:informative:success",
      error: "omni:informative:error"
    };
    return iconMaps[this.modalStyle];
  }
  get banner() {
    const bannerClasses = classMap({
      "banner-dialog": true,
      alert: this.modalStyle === "alert",
      informational: this.modalStyle === "informational",
      success: this.modalStyle === "success",
      error: this.modalStyle === "error"
    });
    return html`
      <dialog class=${bannerClasses}>
        <omni-icon class="info" icon-id="${this.iconId}"></omni-icon>
        <div style="padding:25px 30px 25px 50px;">
          <omni-icon class="close" icon-id="omni:interactive:close" @click=${this.closeModal}></omni-icon>
          <slot name="content"></slot>
        </div>
      </dialog>
    `;
  }
  get toast() {
    const toastClass = classMap({
      alert: this.modalStyle === "alert",
      informational: this.modalStyle === "informational",
      success: this.modalStyle === "success",
      error: this.modalStyle === "error",
      ...this._toastClasses
    });
    return html`
      <div id="toast" class=${toastClass}>
        <omni-icon class="info" icon-id="${this.iconId}"> </omni-icon>
        <div class="toast-content">
          <slot name="content"></slot>
        </div>
      </div>
    `;
  }
  get modal() {
    const modalClasses = classMap({
      "alert-modal": this.modalStyle === "alert",
      "informational-modal": this.modalStyle === "informational",
      "success-modal": this.modalStyle === "success",
      "error-modal": this.modalStyle === "error"
    });
    const cancelButtonTheme = classMap({
      "is-danger": this.modalStyle === "error",
      "is-success": this.modalStyle === "success",
      "is-warning": this.modalStyle === "alert"
    });
    return html`
      <dialog class="modal-dialog">
        <p class="${modalClasses}">
          <omni-icon class="info" icon-id="${this.iconId}"></omni-icon>
          ${this.modalTitle}
        </p>
        <div style="padding:24px 30px 24px 55px;">
          <slot name="content"></slot>
          <div style="padding:10px 0px 24px 0px; float:right">
            <button class="button is-text is-medium ${cancelButtonTheme}" id="cancelButton" @click=${this.closeModal}>
              Cancel
            </button>
            <slot name="button"></slot>
          </div>
        </div>
      </dialog>
    `;
  }
  openModal() {
    if (this.modalType === "toast") {
      this._toastClasses = {
        "open-toast": true
      };
      setTimeout(() => {
        this._toastClasses = {
          "close-toast": true
        };
        setTimeout(() => {
          this._toastClasses = {
            "close-toast": true,
            hide: true
          };
        }, 350);
      }, this.toastTimeOut);
    } else {
      this.dialog.showModal();
      this.dialog.focus();
    }
  }
  closeModal() {
    if (this.modalType === "toast")
      return;
    this.dispatchNewEvent("cancel");
    return this.dialog.close();
  }
  render() {
    return html` <omni-style> ${this[this.modalType]} </omni-style> `;
  }
}
__decorateClass([
  state()
], OmniDialogElement.prototype, "_toastClasses", 2);
__decorateClass([
  property({ type: String, attribute: true, reflect: true })
], OmniDialogElement.prototype, "modalType", 2);
__decorateClass([
  property({ type: String, attribute: true, reflect: true })
], OmniDialogElement.prototype, "modalStyle", 2);
__decorateClass([
  property({ type: String, attribute: true, reflect: true })
], OmniDialogElement.prototype, "modalTitle", 2);
__decorateClass([
  property({ type: Number, attribute: true, reflect: true })
], OmniDialogElement.prototype, "toastTimeOut", 2);
__decorateClass([
  query("dialog")
], OmniDialogElement.prototype, "dialog", 2);
OmniElement.register("omni-dialog", OmniDialogElement);
export {
  OmniDialogElement
};
//# sourceMappingURL=omni-dialog-element.js.map
