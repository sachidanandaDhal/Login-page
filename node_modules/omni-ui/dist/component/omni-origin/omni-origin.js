var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { css } from "lit";
import { state } from "lit/decorators.js";
import { OmniElement } from "../../omni-element.js";
class OmniOrigin extends OmniElement {
  constructor() {
    super();
    this._target = null;
    this.attachShadow({ mode: "open" }).innerHTML = `<slot></slot>`;
  }
  static get styles() {
    return [
      css`
        :host {
          display: contents;
        }
      `
    ];
  }
  get target() {
    return this._target ?? null;
  }
  set target(node) {
    const { target } = this;
    if (!node) {
      if (target && target.origin) {
        target.origin = null;
        target.removeAttribute("origin");
      }
      this.removeAttribute("target");
      this._target = null;
      this.remove();
      return;
    }
    if (node.nodeType !== 1) {
      throw new Error(`invalid node type ${node.nodeType}`);
    }
    if (this.target) {
      throw new Error(`origin has a target ${target.localName}`);
    }
    this._target = node;
    this.setAttribute("target", node.localName);
    node.origin = this;
    node.setAttribute("origin", this.localName);
    node.before(this);
  }
  connectedCallback() {
    super.connectedCallback();
    this.dispatchEvent(new CustomEvent("origin", { detail: this, composed: true, cancelable: true, bubbles: true }));
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.target = null;
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  render() {
  }
}
__decorateClass([
  state()
], OmniOrigin.prototype, "_target", 2);
OmniElement.register("omni-origin", OmniOrigin);
export {
  OmniOrigin
};
//# sourceMappingURL=omni-origin.js.map
