var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { html } from "lit";
import { property, query } from "lit/decorators.js";
import { OmniElement } from "../../omni-element.js";
import "../omni-style/omni-style.js";
import { css } from "lit";
const styles = css`:host{--dialog-background-color: rgba(0, 0, 0, 0.4);--dialog-box-shadow: 0px 24px 31px -6px rgba(59, 62, 63, 0.35)}dialog{border:none;border-radius:10px;padding:0}dialog::backdrop{background-color:var(--dialog-background-color)}dialog[non-modal]{box-shadow:var(--dialog-box-shadow)}slot[name=content]{display:flex;flex-direction:column}`;
class OmniDialogBoxElement extends OmniElement {
  constructor() {
    super(...arguments);
    this.focusWithin = false;
    this.modal = false;
    this.nonModal = false;
  }
  static get styles() {
    return [...super.styles, styles];
  }
  get returnValue() {
    return this.dialogEl.returnValue;
  }
  set returnValue(val) {
    this.dialogEl.returnValue = val;
  }
  close(returnValue) {
    if (this.modal)
      this.modal = false;
    if (this.nonModal)
      this.nonModal = false;
    return returnValue ? this.dialogEl.close(returnValue) : this.dialogEl.close();
  }
  show() {
    this.nonModal = true;
    this.dialogEl.show();
    this.dialogEl.focus();
  }
  showModal() {
    this.modal = true;
    this.dialogEl.showModal();
    this.dialogEl.focus();
  }
  render() {
    return html`
      <omni-style>
        <dialog
          ?autofocus=${!this.focusWithin}
          ?modal=${this.modal}
          ?non-modal=${this.nonModal}
          @cancel=${this.#emitCancel}
          @close=${this.#emitClose}
          part="dialog">
          <slot name="content"></slot>
        </dialog>
      </omni-style>
    `;
  }
  #emitCancel() {
    const event = new Event("cancel", { composed: true });
    return this.dispatchEvent(event);
  }
  #emitClose() {
    const event = new Event("close", { composed: true });
    return this.dispatchEvent(event);
  }
}
__decorateClass([
  property({ type: Boolean, reflect: true, attribute: "focus-within" })
], OmniDialogBoxElement.prototype, "focusWithin", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniDialogBoxElement.prototype, "modal", 2);
__decorateClass([
  property({ type: Boolean, reflect: true, attribute: "non-modal" })
], OmniDialogBoxElement.prototype, "nonModal", 2);
__decorateClass([
  query("dialog")
], OmniDialogBoxElement.prototype, "dialogEl", 2);
OmniElement.register("omni-dialog-box", OmniDialogBoxElement);
export {
  OmniDialogBoxElement
};
//# sourceMappingURL=omni-dialog-box.js.map
