var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { html, nothing } from "lit";
import { property, state } from "lit/decorators.js";
import { classMap } from "lit/directives/class-map.js";
import { ifDefined } from "lit/directives/if-defined.js";
import { FocusTrapController } from "@vaadin/a11y-base";
import { OmniElement } from "../../omni-element.js";
import "../omni-style/omni-style.js";
import "../omni-icon/omni-icon.js";
import "../omni-loading-indicator/omni-loading-indicator.js";
import { css } from "lit";
const styles = css`:host{--omni-card-font-size: 11px;--omni-card-title-font-size: 16px;--omni-card-img-height: 185px;--omni-card-icon-bubble-size: 48px;--omni-card-icon-bubble-ml: 12px;--omni-card-icon-size: 21px;--omni-card-p: 17px;--omni-card-footer-pr: 11px;flex-grow:1;min-width:var(--omni-card-min-width, 200px);max-width:var(--omni-card-max-width, 240px)}.card{height:var(--omni-card-height, 312px)}.card>div{height:100%;position:relative}[name=card-img]{display:block;height:var(--omni-card-img-height);border:.5px solid #fff;border-radius:8px 8px 0 0;clip-path:polygon(0 0, 100% 0, 100% 100%, 0 75%)}[name=card-img]::slotted(img){width:100%;height:100% !important;object-fit:cover;object-position:center;border-radius:8px 8px 0 0}[name=card-icon]{position:absolute;top:calc(var(--omni-card-img-height)*.75 - var(--omni-card-icon-bubble-size)/2 + var(--omni-card-icon-bubble-ml)/2);margin-left:var(--omni-card-icon-bubble-ml);border:.5px solid #fff;border-radius:50%;width:var(--omni-card-icon-bubble-size);height:var(--omni-card-icon-bubble-size);background-image:linear-gradient(to bottom, rgba(255, 255, 255, 0.54), #edf0f5);-webkit-backdrop-filter:blur(8px);backdrop-filter:blur(8px);display:flex;align-items:center;justify-content:center}[name=card-icon]::slotted(*){width:var(--omni-card-icon-size);height:var(--omni-card-icon-size);fill:var(--omni-card-icon-color, var(--color-electric-blue))}#card-content{padding:calc(var(--omni-card-p)/2) var(--omni-card-p)}[name=card-title]::slotted(*){font-weight:inherit !important}[name=card-title]::slotted(*),[name=card-type]::slotted(*),[name=card-desc]::slotted(*),[name=card-status]::slotted(*),[name=card-time]::slotted(*){display:block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}[name=card-title]::slotted(*),[name=card-desc]::slotted(*){display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;white-space:normal}[name=card-desc]::slotted(*){-webkit-line-clamp:3}[name=card-desc]::slotted(*){opacity:.5}[name=card-type]{font-size:var(--omni-card-font-size);margin:0}[name=card-title]{font-size:var(--omni-card-title-font-size);line-height:1.25;margin:0}[name=card-content]>ul{list-style-type:none;display:flex}#card-footer{padding:var(--omni-card-p);padding-right:var(--omni-card-footer-pr);position:absolute;bottom:0;width:100%;display:flex}#card-footer .button{width:38px;padding:0}#card-footer .control:not(:last-child),#card-footer .toolbar-divider{margin-right:6px}#card-metadata{overflow:hidden}#card-footer .field.is-grouped{margin-left:auto}omni-tooltip>[slot=content]{white-space:nowrap}.omni .dropdown-menu{position:fixed;display:block;visibility:hidden;padding-bottom:4px}.dropdown.is-active>.dropdown-menu{visibility:visible}.overlay{display:flex;flex-direction:column;justify-content:flex-end;padding-bottom:75px;position:absolute;top:0;align-items:center;height:100%;width:100%;border-radius:8px;background-color:rgba(20,32,51,.85)}[name=overlay-header]{text-align:center;color:#fff;word-break:break-all;overflow:hidden;text-overflow:ellipsis;display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical}[name=overlay-content]{display:block;max-height:160px;overflow:hidden}.overlay-card-actions{z-index:1}#card-footer .overlay-card-actions omni-icon{fill:#fff}.overlay-card-actions .button:focus,.overlay-card-actions .button:hover,.overlay-card-actions .is-active{border-radius:8px;border-color:rgba(0,0,0,0) !important;background-color:#2f587a !important}.is-opacity-75{opacity:.75}#image-loading-container{position:absolute;top:0;width:100%;padding-top:66px}omni-loading-indicator{width:32px;margin:auto}`;
class OmniCardElement extends OmniElement {
  constructor() {
    super();
    this.focusTrapController = new FocusTrapController(this);
    this._hasMenu = false;
    this.href = "";
    this.target = "";
    this.menuOpen = false;
    this.isEditable = false;
    this.showOverlay = false;
    this.isLoadingCard = false;
    this.openMsg = "";
    this.closeMenu = this.closeMenu.bind(this);
  }
  static get styles() {
    return [...super.styles, styles];
  }
  connectedCallback() {
    super.connectedCallback();
    window.addEventListener("click", this.closeMenu);
    window.addEventListener("resize", this.closeMenu);
    window.addEventListener("scroll", this.closeMenu);
    this.focusTrapController.hostConnected();
  }
  update(changedProps) {
    if (changedProps.has("menuOpen")) {
      const menuTooltipEl = this.shadowRoot.querySelector(".dropdown-trigger omni-tooltip");
      if (menuTooltipEl) {
        const { menuOpen = false } = this;
        menuTooltipEl.disabled = menuOpen;
        if (menuOpen)
          menuTooltipEl.open = !menuOpen;
      }
    }
    super.update(changedProps);
  }
  disconnectedCallback() {
    window.removeEventListener("click", this.closeMenu);
    window.removeEventListener("resize", this.closeMenu);
    window.removeEventListener("scroll", this.closeMenu);
    super.disconnectedCallback();
    this.focusTrapController.hostDisconnected();
    this.focusTrapController.releaseFocus();
  }
  _positionMenu() {
    const trigger = this.shadowRoot.querySelector(".dropdown-trigger");
    const triggerRect = trigger.getBoundingClientRect();
    const menu = this.shadowRoot.querySelector(".dropdown-menu");
    const { clientWidth: docWidth, clientHeight: docHeight } = document.documentElement;
    if (triggerRect.top + triggerRect.height + menu.offsetHeight > docHeight) {
      menu.style.top = `${triggerRect.top - menu.offsetHeight}px`;
    } else {
      menu.style.top = `${triggerRect.top + triggerRect.height}px`;
    }
    if (triggerRect.right + menu.offsetWidth > docWidth) {
      menu.style.left = `${triggerRect.right - menu.offsetWidth}px`;
    } else {
      menu.style.left = `${triggerRect.left}px`;
    }
  }
  _onMenuSlotChange(e) {
    this._hasMenu = e.target.assignedElements().length > 0;
  }
  _onOpen(e) {
    const { cancelled } = this.dispatchNewEvent("open");
    if (cancelled)
      e.preventDefault();
  }
  _onEdit() {
    this.dispatchNewEvent("edit");
  }
  _onMenuTriggerClick() {
    if (!this.menuOpen) {
      this._positionMenu();
      setTimeout(() => this.toggleMenu(true));
    }
  }
  async toggleMenu(open = !this.menuOpen) {
    this.menuOpen = open;
    await this.updateComplete;
    this.focusTrapEl = this.shadowRoot.querySelector("#menu-slot");
    if (this.menuOpen) {
      this.focusTrapController.trapFocus(this.focusTrapEl);
    } else {
      this.focusTrapController.releaseFocus();
    }
  }
  closeMenu() {
    this.toggleMenu(false);
    this.dispatchNewEvent("closeMenu");
  }
  render() {
    return html`
      <omni-style>
        <article class="card transition-raise-hover">
          <div>
            <slot name="card-img" part="card-img" class="${classMap({ "is-opacity-75": this.isLoadingCard })}"></slot>
            <slot name="card-icon" part="card-icon"></slot>
            <div id="card-content">
              <slot name="card-type" class="has-text-grey"></slot>
              <slot name="card-title" class="has-text-weight-bold"></slot>
              <slot name="card-desc" class="is-size-6"></slot>
            </div>
            <div id="card-footer" part="card-footer">
              <div id="card-metadata">
                <slot name="card-status" class="is-size-7 has-text-grey"></slot>
                <slot name="card-time" class="is-size-7 has-text-weight-bold"></slot>
              </div>

              <div class="field is-grouped ${classMap({ "overlay-card-actions": this.showOverlay })}">
                <div class="control" ?hidden=${!this.isEditable}>
                  <omni-tooltip relateby="label">
                    <button slot="invoker" class="button is-text is-shadowless" @click=${this._onEdit}>
                      <omni-icon class="is-size-2" icon-id="omni:interactive:edit"></omni-icon>
                    </button>
                    <div slot="content">Edit</div>
                  </omni-tooltip>
                </div>
                <div class="control" ?hidden=${!this.href}>
                  <omni-tooltip relateby="label">
                    <a
                      slot="invoker"
                      class="button is-text is-shadowless"
                      href=${ifDefined(this.href)}
                      target=${ifDefined(this.target ? this.target : void 0)}
                      rel=${ifDefined(this.target ? "noopener noreferrer" : void 0)}
                      @click=${this._onOpen}>
                      <omni-icon class="is-size-2" icon-id="omni:interactive:launch"></omni-icon>
                    </a>
                    <div slot="content">
                      ${this.openMsg ? this.openMsg : `Open in ${/^(?:|_parent|_top|_self)$/.test(this.target) ? "App" : "tab"}`}
                    </div>
                  </omni-tooltip>
                </div>
                <div
                  class="toolbar-divider ${classMap({ "is-invisible": this.showOverlay })}"
                  ?hidden=${!this.href || !this._hasMenu}></div>
                <div class="control" ?hidden=${!this._hasMenu}>
                  <div class="dropdown ${classMap({ "is-active": this.menuOpen })}" justify="end">
                    <div class="dropdown-trigger" slot="trigger">
                      <omni-tooltip relateby="label">
                        <button
                          slot="invoker"
                          class="button is-text is-shadowless ${classMap({
      "is-active": this.menuOpen
    })}"
                          aria-haspopup="true"
                          aria-controls="dropdown-menu"
                          @click=${this._onMenuTriggerClick}>
                          <omni-icon class="is-size-2" icon-id="omni:interactive:actions"></omni-icon>
                        </button>
                        <div slot="content">More Actions</div>
                      </omni-tooltip>
                    </div>
                    <div class="dropdown-menu" id="dropdown-menu" role="menu" slot="menu">
                      <slot id="menu-slot" name="card-menu" @slotchange=${this._onMenuSlotChange}></slot>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            ${this.isLoadingCard ? html` <div id="image-loading-container" part="image-loading-container">
                  <omni-loading-indicator></omni-loading-indicator>
                </div>` : nothing}
            <div class="overlay ${classMap({ "is-hidden": !this.showOverlay })}" part="overlay">
              <slot name="overlay-header" part="overlay-header"></slot>
              <slot name="overlay-content" part="overlay-content"></slot>
            </div>
          </div>
        </article>
      </omni-style>
    `;
  }
}
__decorateClass([
  state()
], OmniCardElement.prototype, "_hasMenu", 2);
__decorateClass([
  property({ type: String })
], OmniCardElement.prototype, "href", 2);
__decorateClass([
  property({ type: String, reflect: true })
], OmniCardElement.prototype, "target", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniCardElement.prototype, "menuOpen", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniCardElement.prototype, "isEditable", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniCardElement.prototype, "showOverlay", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniCardElement.prototype, "isLoadingCard", 2);
__decorateClass([
  property({ type: String })
], OmniCardElement.prototype, "openMsg", 2);
OmniElement.register("omni-card", OmniCardElement);
export {
  OmniCardElement
};
//# sourceMappingURL=omni-card.js.map
