var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { html } from "lit";
import { property, state } from "lit/decorators.js";
import { OmniElement } from "../../omni-element.js";
import "../omni-style/omni-style.js";
import { css } from "lit";
const styles = css`#grid{display:grid;grid-template-rows:var(--omni-app-layout-header-height, 3.5714285714rem) 1fr;grid-template-columns:var(--omni-app-layout-drawer-closed-width, 5.3571428571rem) calc(var(--omni-app-layout-drawer-width, 21.4285714286rem) - var(--omni-app-layout-drawer-closed-width, 5.3571428571rem)) 1fr var(--omni-app-layout-end-drawer-width, 21.4285714286rem);width:-moz-fit-content;width:fit-content}#header{grid-row:1;grid-column:1/-1;position:sticky;top:var(--omni-app-layout-top, 0rem);left:var(--omni-app-layout-left, 0rem);width:calc(var(--vw, 1vw)*100 - var(--omni-app-layout-left, 0rem));z-index:var(--omni-app-layout-header-z-index, 36);background:var(--omni-app-layout-header-bg, var(--omni-app-layout-header-bg-color, #fff));box-shadow:0 0.0714285714rem var(--color-pale-grey-two)}slot[name=header]::slotted(*){height:100%}#drawer,#end-drawer{grid-row:2;position:sticky;top:calc(var(--omni-app-layout-top, 0rem) + var(--omni-app-layout-header-height, 3.5714285714rem));height:calc(var(--omni-app-layout-height, calc(var(--vh, 1vh) * 100 - var(--omni-app-layout-top, 0rem))) - var(--omni-app-layout-header-height, 3.5714285714rem));overflow-y:auto;overflow-x:hidden;box-shadow:0 0.7142857143rem 4.2857142857rem -0.3571428571rem rgba(1,33,78,.08)}#drawer{left:var(--omni-app-layout-left, 0rem);background:var(--omni-app-layout-drawer-bg, var(--omni-app-layout-drawer-bg-color, var(--gradient-black)));z-index:var(--omni-app-layout-drawer-z-index, 32)}#end-drawer{right:0;grid-column:4;background:var(--omni-app-layout-end-drawer-bg, var(--omni-app-layout-end-drawer-bg-color, #fff));z-index:var(--omni-app-layout-end-drawer-z-index, 34)}#content{width:100%;grid-row:2;background:var(--omni-app-layout-bg, var(--omni-app-layout-bg-color, #f1f5fa))}:host(:not([draweropen])) #drawer{grid-column:1}:host([draweropen]) #drawer{grid-column:1/span 2}:host(:not([draweropen])) #content{grid-column:2/span 3}:host([draweropen]) #content{grid-column:3/span 2}:host(:not([enddraweropen])) #end-drawer{position:relative;top:0;right:calc(-1*var(--omni-app-layout-end-drawer-width, 21.4285714286rem) - 0.0714285714rem);width:0}:host([enddraweropen]) #end-drawer{width:auto}:host(.drawer-closing) #drawer{grid-column:1/span 2 !important}:host(.end-drawer-opening),:host(.end-drawer-closing){overflow:hidden}:host(.end-drawer-closing) #end-drawer{width:auto !important}:host(.drawer-opening) #content{min-width:calc(100% + var(--omni-app-layout-drawer-width, 21.4285714286rem) - var(--omni-app-layout-drawer-closed-width, 5.3571428571rem)) !important}:host(.drawer-opening) #content,:host(.drawer-closing) #content{z-index:calc(1 + var(--omni-app-layout-drawer-z-index, 32))}:host(.parent-drawer-opening) #end-drawer,:host(.parent-drawer-closing) #end-drawer{right:unset !important}`;
function flipAnimateX(target, first, last) {
  const deltaX = first.left - last.left;
  return target.animate([{ transform: `translateX(${deltaX}px)` }, { transform: "unset" }], {
    duration: 300,
    easing: "ease-in-out"
  });
}
const _OmniAppLayoutElement = class _OmniAppLayoutElement extends OmniElement {
  constructor() {
    super(...arguments);
    this.drawerOpen = false;
    this.endDrawerOpen = false;
  }
  static get styles() {
    return [...super.styles, styles];
  }
  static computeViewportDims() {
    const vh = window.innerHeight * 0.01;
    const vw = window.innerWidth * 0.01;
    document.documentElement.style.setProperty("--vh", `${vh}px`);
    document.documentElement.style.setProperty("--vw", `${vw}px`);
  }
  connectedCallback() {
    super.connectedCallback();
    window.removeEventListener("resize", _OmniAppLayoutElement.computeViewportDims);
    window.addEventListener("resize", _OmniAppLayoutElement.computeViewportDims);
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    window.removeEventListener("resize", _OmniAppLayoutElement.computeViewportDims);
  }
  firstUpdated() {
    document.body.style.margin = "0px";
    _OmniAppLayoutElement.computeViewportDims();
    this._grid = this.shadowRoot.getElementById("grid");
    this._content = this.shadowRoot.getElementById("content");
    this._endDrawer = this.shadowRoot.getElementById("end-drawer");
  }
  update(changedProps) {
    if (changedProps.has("drawerOpen") && changedProps.get("drawerOpen") != null) {
      const first = this._content.getBoundingClientRect();
      super.update(changedProps);
      const last = this._content.getBoundingClientRect();
      const nestedLayout = this.querySelector("omni-app-layout");
      this.classList.add(`drawer-${this.drawerOpen ? "opening" : "closing"}`);
      if (nestedLayout) {
        nestedLayout.classList.add(`parent-drawer-${this.drawerOpen ? "opening" : "closing"}`);
      }
      window.scrollTo({ left: 0 });
      flipAnimateX(this._content, first, last).addEventListener(
        "finish",
        () => {
          this.classList.remove("drawer-opening", "drawer-closing");
          if (nestedLayout)
            nestedLayout.classList.remove("parent-drawer-opening", "parent-drawer-closing");
        },
        { once: true }
      );
    } else if (changedProps.has("endDrawerOpen") && changedProps.get("endDrawerOpen") != null) {
      const first = this._endDrawer.getBoundingClientRect();
      super.update(changedProps);
      const last = this._endDrawer.getBoundingClientRect();
      const nestedLayout = this.querySelector("omni-app-layout");
      this.classList.add(`end-drawer-${this.endDrawerOpen ? "opening" : "closing"}`);
      if (nestedLayout) {
        nestedLayout.classList.add(`parent-end-drawer-${this.endDrawerOpen ? "opening" : "closing"}`);
      }
      flipAnimateX(this._endDrawer, first, last).addEventListener(
        "finish",
        () => {
          this.classList.remove("end-drawer-opening", "end-drawer-closing");
          if (nestedLayout)
            nestedLayout.classList.remove("parent-end-drawer-opening", "parent-end-drawer-closing");
        },
        { once: true }
      );
    } else {
      super.update(changedProps);
    }
  }
  render() {
    return html`
      <omni-style>
        <div id="grid" part="grid">
          <div id="header" part="header"><slot name="header"></slot></div>
          <div id="drawer" part="drawer"><slot name="drawer"></slot></div>
          <div id="content" part="content"><slot></slot></div>
          <div id="end-drawer" part="end-drawer"><slot name="end-drawer"></slot></div>
        </div>
        <!-- <div id=scrim part="scrim"></div> -->
        <!-- <div id=dialog part="dialog"><slot name=dialog></slot></div> -->
      </omni-style>
    `;
  }
};
__decorateClass([
  state()
], _OmniAppLayoutElement.prototype, "_grid", 2);
__decorateClass([
  state()
], _OmniAppLayoutElement.prototype, "_content", 2);
__decorateClass([
  state()
], _OmniAppLayoutElement.prototype, "_endDrawer", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], _OmniAppLayoutElement.prototype, "drawerOpen", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], _OmniAppLayoutElement.prototype, "endDrawerOpen", 2);
let OmniAppLayoutElement = _OmniAppLayoutElement;
OmniElement.register("omni-app-layout", OmniAppLayoutElement);
export {
  OmniAppLayoutElement
};
//# sourceMappingURL=omni-app-layout.js.map
