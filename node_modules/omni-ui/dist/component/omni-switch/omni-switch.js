var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { GenericSwitch } from "@generic-components/components/generic-switch/GenericSwitch.js";
import { html } from "lit";
import { property } from "lit/decorators.js";
import { OmniElement } from "../../omni-element.js";
import "../omni-style/omni-style.js";
import "../omni-icon/omni-icon.js";
import { css } from "lit";
const styles = css`:host{display:inline-block;--omni-switch-gap: pxToRem(12)}omni-private-generic-switch{--generic-switch-focus: none;position:relative;height:auto;cursor:pointer}omni-style{display:flex;align-items:center}omni-private-generic-switch::part(track){background-color:var(--color-shark);border-radius:0.8571428571rem;width:3.4285714286rem;height:1.7142857143rem}omni-private-generic-switch::part(button){width:auto;height:auto}omni-private-generic-switch::part(label){margin-right:0.7142857143rem}:not([name=end])::slotted(*){margin-right:var(--omni-switch-gap)}[name=end]{display:inline-block}[name=end]::slotted(*){margin-left:var(--omni-switch-gap)}omni-private-generic-switch::part(thumb){right:auto;margin:0.2142857143rem;border-radius:50%;background-color:#fff;height:1.2857142857rem;width:1.2857142857rem;transition:transform .1s ease}omni-private-generic-switch[checked]::part(track){background-image:var(--gradient-electric-blue)}omni-private-generic-switch[checked]::part(track)::after{content:"";display:block;top:30%;left:20%;height:0.4285714286rem;width:0.7857142857rem;position:absolute;border-style:solid;border-color:#fff;border-width:0 0 0.0714285714rem 0.0714285714rem;transform:rotate(310deg)}omni-private-generic-switch[checked]::part(thumb){transform:translateX(1.7142857143rem)}omni-private-generic-switch::part(button):focus{outline:0}omni-private-generic-switch::part(button):focus-visible{box-shadow:0 0 0 0.2142857143rem var(--color-electric-blue) !important;border-radius:0.8571428571rem}`;
OmniElement.register("omni-private-generic-switch", GenericSwitch);
class OmniSwitchElement extends OmniElement {
  constructor() {
    super(...arguments);
    this.checked = false;
  }
  static get styles() {
    return [...super.styles, styles];
  }
  #onCheckedChanged(e) {
    this.checked = e.target.checked;
    const evtDetail = { detail: { checked: this.checked } };
    this.dispatchNewEvent("input", evtDetail);
    this.dispatchNewEvent("change", evtDetail);
  }
  render() {
    return html`
      <omni-style>
        <omni-private-generic-switch .checked=${this.checked} @checked-changed=${this.#onCheckedChanged}>
          <slot></slot>
        </omni-private-generic-switch>
        <slot name="end"></slot>
      </omni-style>
    `;
  }
}
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniSwitchElement.prototype, "checked", 2);
OmniElement.register("omni-switch", OmniSwitchElement);
export {
  OmniSwitchElement
};
//# sourceMappingURL=omni-switch.js.map
