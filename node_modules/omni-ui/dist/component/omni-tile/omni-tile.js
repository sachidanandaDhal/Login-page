var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { html } from "lit";
import { classMap } from "lit/directives/class-map.js";
import { OmniElement } from "../../omni-element.js";
import { capitalizeFirstWord } from "../../omni-util.js";
import "../omni-style/omni-style.js";
import { DocumentElementClipMixin } from "../../document-element-clip-mixin.js";
import { css } from "lit";
const styles = css`:host{--drag-left: auto;--drag-left-min: 0vw;--drag-left-max: calc(100vw - 4rem);--drag-top: auto;--drag-top-min: 0vh;--drag-top-max: calc(100vh - 4rem);--drag-top-max: calc(100vh - var(--drag-height));--drag-left-max: calc(100vw - var(--drag-width))}:host([drag-able]),::slotted([drag-able]),:is([drag-able]){position:fixed;cursor:grab;top:clamp(var(--drag-top-min, 0vh),var(--drag-top, 0),var(--drag-top-max, calc(100vh - var(--drag-height, 50px))));left:clamp(var(--drag-left-min, 0vw),var(--drag-left, 0),var(--drag-left-max, calc(100vw - var(--drag-width, 20px))));z-index:var(--drag-able-z, auto)}:host(:is([drag-able][active])),::slotted(:is([drag-able][active])),:is([drag-able][active]){z-index:var(--drag-z, 39)}:host,omni-style,.omni section,.omni .box,.scroll,#body-scroller{display:flex;flex-direction:column}omni-style,.omni section,.omni .box,.scroll,#body-scroller,#body{flex-grow:1}omni-style,.omni section,.omni .box{min-height:100%}.has-heading .box{min-height:calc(100% - 37px)}h2.title{flex-shrink:0;letter-spacing:0.0571428571rem !important}:host([maximized]) h2.title{display:none}:host([maximized]){position:fixed;top:var(--omni-tile-maximized-top, 0);left:0;right:0;height:calc(100vh - var(--omni-tile-maximized-top, 0px)) !important;z-index:39}:host([scroll]) #body-scroller,:host([maximized]) #body-scroller{overflow:auto}.omni .box{padding:0;background-color:var(--omni-tile-background-color, #fcfdff);position:relative}slot{display:block}[name=header]{border-bottom:0.1428571429rem solid #f1f5fa;border-radius:0.7142857143rem 0.7142857143rem 0 0}#body{padding:var(--omni-tile-body-gutter, 1.7142857143rem);min-height:var(--omni-tile-body-min-height, auto);max-height:var(--omni-tile-body-max-height, auto)}section:not(.has-header) [name=header]{display:none}.has-subheader #body{padding-top:0}.has-footer #body{padding-bottom:0}.scroll,[name=footer]{border-radius:0 0 0.7142857143rem 0.7142857143rem}`;
import { property, query, state } from "lit/decorators.js";
import { DraggableController } from "../../controllers/draggable-controller.js";
class OmniTileElement extends DocumentElementClipMixin(OmniElement) {
  constructor() {
    super(...arguments);
    this.maximized = false;
    this.drag = false;
    this.noDragSlots = [];
    this._hasHeader = false;
    this._hasSubheader = false;
    this._hasFooter = false;
  }
  static get styles() {
    return [...super.styles, styles];
  }
  connectedCallback() {
    super.connectedCallback();
    if (this.drag) {
      new DraggableController(
        this,
        this.noDragSlots.map((slot) => slot === "body" ? "#body" : `[slot=${slot}]`),
        true
      );
    }
  }
  _onSlotChange(e) {
    ["header", "subheader", "footer"].forEach((name) => {
      if (e.target.matches(`[name=${name}]`)) {
        this[`_has${capitalizeFirstWord(name)}`] = e.target.assignedElements().length > 0;
      }
    });
  }
  updated(changedProps) {
    if (changedProps.has("maximized")) {
      this[this.maximized ? "_clipDocumentElement" : "_unclipDocumentElement"]();
    }
  }
  render() {
    return html`
      <omni-style>
        <section
          @slotchange=${this._onSlotChange}
          class=${classMap({
      "has-heading": this.heading?.length,
      "has-header": this._hasHeader,
      "has-subheader": this._hasSubheader,
      "has-footer": this._hasFooter
    })}>
          ${!this.heading ? "" : html` <h2 class="title is-size-6 is-clamped has-text-grey-dark is-uppercase">${this.heading}</h2> `}
          <div class="box" part="box">
            <slot name="header" part="header-slot"></slot>
            <!--div class=scroll part=scroll-->
            <slot name="subheader" part="subheader-slot"></slot>
            <div id="body-scroller" part="body-scroller">
              <slot id="body" part="body-slot"></slot>
            </div>
            <slot name="footer" part="footer-slot"></slot>
            <!--/div-->
          </div>
        </section>
      </omni-style>
    `;
  }
}
__decorateClass([
  property({ type: String })
], OmniTileElement.prototype, "heading", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniTileElement.prototype, "maximized", 2);
__decorateClass([
  property({ type: Boolean, attribute: "drag-able", reflect: true })
], OmniTileElement.prototype, "drag", 2);
__decorateClass([
  property({ type: Array })
], OmniTileElement.prototype, "noDragSlots", 2);
__decorateClass([
  state()
], OmniTileElement.prototype, "_hasHeader", 2);
__decorateClass([
  state()
], OmniTileElement.prototype, "_hasSubheader", 2);
__decorateClass([
  state()
], OmniTileElement.prototype, "_hasFooter", 2);
__decorateClass([
  query("#body-scroller")
], OmniTileElement.prototype, "bodyScrollerDiv", 2);
OmniElement.register("omni-tile", OmniTileElement);
export {
  OmniTileElement
};
//# sourceMappingURL=omni-tile.js.map
