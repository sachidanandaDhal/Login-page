{
  "version": 3,
  "sources": ["../../../lib/component/omni-range-slider/omni-range-slider.ts"],
  "sourcesContent": ["import { html } from 'lit';\nimport { property, query, state } from 'lit/decorators.js';\nimport { OmniElement } from '../../omni-element.js';\nimport { ElementInternalsBase } from '../../element-internals-base.js';\n\nimport {css} from 'lit';\nconst styles = css`:host{--range-slider-background: var(--gradient-primary);--range-slider-thumb-border: var(--color-secondary);display:flex;flex-direction:column}:host(:focus-visible){outline:var(--color-secondary) solid 1px}:host([disabled]){--cursor-state: not-allowed;--pointer-state: none;opacity:.45;cursor:not-allowed}[slider]{position:relative;border-radius:0.7142857143rem;text-align:left;padding:0 0.5714285714rem}[slider] #sign-container{display:flex;justify-content:space-between;align-items:center;padding:0;margin:0 -0.5714285714rem}[slider] #sign-container div{display:flex}[slider] #sign-container div[sign]{color:var(--color-almost-black);width:1.4285714286rem;border-radius:0.2857142857rem;align-items:center;justify-content:center;text-align:center;background-color:var(--color-white);margin-bottom:0.7142857143rem}[slider] #sign-container div[sign] span{font-size:0.8571428571rem}[slider] .slider-container{pointer-events:var(--pointer-state, all);position:relative;display:flex;justify-content:flex-start;align-items:center;padding:0 0 0.2857142857rem 0}[slider] .slider-container [left-track],[slider] .slider-container [right-track]{height:0.5714285714rem;border-radius:0.2857142857rem;border:1px solid var(--color-pale-grey-three);background:var(--color-white)}[slider] .slider-container [middle-track]{height:0.5714285714rem;background:var(--range-slider-background)}[slider] .slider-container [thumb]{position:absolute;top:-0.25rem;height:1.1428571429rem;width:1.1428571429rem;text-align:left;background:var(--range-slider-background);border-radius:50%;border:var(--range-slider-thumb-border) solid 1px}[slider] .slider-container [thumb]:active:not([disabled]){cursor:var(--cursor-state, grabbing)}[slider] .slider-container [thumb]:hover:not(:active,[disabled]){cursor:var(--cursor-state, grab)}[slider] .slider-container [thumb]:focus{outline:var(--range-slider-thumb-border) solid 1px}[slider] .slider-container [thumb][disabled]{cursor:not-allowed}`\n\ntype Thumb = 'min' | 'max';\n\ninterface RangeSliderElement {\n  /** move up one step */\n  stepUp: (thumb: Thumb) => void;\n  /** move down one step */\n  stepDown: (thumb: Thumb) => void;\n  value: RangeSliderValues;\n  min: number;\n  max: number;\n}\n\nexport interface RangeSliderValues {\n  min: number;\n  max: number;\n}\n\n/**\n * Two value range slider with language-sensitive number formatting\n *\n * This custom input element returns a min and max numeric value to set a range or define an interval. It\n * uses the [`Intl.NumberFormat` Web API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) to support international currencies and a large number of numeric formats. The component accepts any valid locale and  [`Intl.NumberFormat` options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#option)\n * via its `.numberFormatOptions` property.\n *\n * To include within your project `import { OmniRangeSlider } from 'omni-ui';`\n *\n * ```html\n * <!-- defaults to range of 0 to 100 with a step of 1 -->\n * <omni-range-slider></omni-range-slider>\n * ```\n *\n * @tagname omni-range-slider\n * @attr {boolean} disabled - disable the range slider from user interaction\n * @attr {string} name - name attribute for form association\n * @event {RangeSliderValues} change - fires when a change to min or max values occurs in the slider\n * @cssprop [--range-slider-background=var(--gradient-primary)]\n * @cssprop [--range-slider-thumb-border=var(--color-secondary)]\n */\nexport class OmniRangeSlider extends ElementInternalsBase<RangeSliderValues> implements RangeSliderElement {\n  static get styles() {\n    return [...super.styles, styles];\n  }\n\n  #resizeObserver = new ResizeObserver((entries: ResizeObserverEntry[]) =>\n    this.#positionElements(entries[0].contentRect)\n  );\n\n  #originalBodyStyle = '';\n  #whichActiveThumb: Thumb;\n  #formatter: Intl.NumberFormat;\n  @state() private _left: string;\n  @state() private _leftThumb: string;\n  @state() private _right: string;\n  @state() private _rightThumb: string;\n  @property({ type: Number }) min = 0;\n  @property({ type: Number }) max = 100;\n  /** changes the increment per slide movement (ensure your initialized values are multiples of the step) */\n  @property({ type: Number }) step = 1;\n  /** name attribute for form association */\n  @property({ type: String }) name: string;\n  @property({ type: String }) valueMissingMessage: string = 'Please select a range';\n  /* language-sensitive formatting options for numbers */\n  @property({ type: Object }) numberFormatOptions: { locale: string; options: Intl.NumberFormatOptions } = {\n    locale: 'en-US',\n    options: {}\n  };\n\n  /** the current value of the min and max */\n  @property({ type: Object, reflect: true }) value: RangeSliderValues = {\n    min: 0,\n    max: 100\n  };\n\n  @query('.slider-container') private containerEl: HTMLElement;\n  @query('[thumb][left]') private leftThumbEl: HTMLSpanElement;\n  @query('[thumb][right]') private rightThumbEl: HTMLSpanElement;\n\n  connectedCallback(): void {\n    super.connectedCallback();\n    this.#resizeObserver.observe(this);\n    this.#formatter = new Intl.NumberFormat(this.numberFormatOptions.locale, this.numberFormatOptions.options);\n  }\n\n  async firstUpdated() {\n    await this.updateComplete;\n    if (this.required) {\n      this._internals.setFormValue(JSON.stringify(this.value));\n      if (!this.value) {\n        this._internals.setValidity({ valueMissing: true }, this.valueMissingMessage, this.containerEl);\n      }\n    }\n    this.#positionElements(this.getBoundingClientRect());\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.#resizeObserver.unobserve(this);\n  }\n\n  #isValidChange(value: number) {\n    if (this.#whichActiveThumb === 'min') {\n      if (value >= this.value.max) return false; // is value greater than value.max\n      // multiply by 1000 to avoid floating point errors\n      if ((value * 1000) % (this.step * 1000) !== 0) return false; // is value a multiple of step\n      if (value - this.value.max * -1 < this.step) return false; // is value at least 1 step less than value.max\n      if (value < this.min) return false; // is value greater than allowed min\n    } else {\n      if (value <= this.value.min) return false; // is value is below value.min\n      // multiply by 1000 to avoid floating point errors\n      if ((value * 1000) % (this.step * 1000) !== 0) return false; // is value a multiple of step\n      if (value - this.value.min < this.step) return false; // is value at least 1 step greater than value.min\n      if (value > this.max) return false; // is value less than allowed max\n    }\n    return true;\n  }\n\n  #emitChange() {\n    if (typeof this.value.min !== 'undefined' && typeof this.value.max !== 'undefined') {\n      this._internals.setValidity({});\n    }\n    this._internals.setFormValue(JSON.stringify(this.value));\n    this.dispatchNewEvent('change', {\n      detail: this.value\n    });\n  }\n\n  /** returns the fromLeft and fromRight as percentages */\n  #calcPositions(value: RangeSliderValues = this.value): {\n    fromLeft: number;\n    fromRight: number;\n  } {\n    const totalRange = this.max - this.min;\n    const leftBarLength = value.min;\n    const middleBarLength = value.max - value.min;\n    const rightBarLength = totalRange - leftBarLength - middleBarLength;\n    const fromLeft = (leftBarLength / totalRange - this.min / totalRange) * 100;\n    const fromRight = (rightBarLength / totalRange + this.min / totalRange) * 100;\n    return {\n      fromLeft,\n      fromRight\n    };\n  }\n\n  /**  calculates and updates the properties to position the bars and thumbs */\n  #positionElements(hostRect: DOMRect) {\n    const { fromLeft, fromRight } = this.#calcPositions();\n    this._left = `${fromLeft}%`;\n    this._right = `${fromRight}%`;\n    // shift bar thumb to middle of intersection between tracks\n    this._leftThumb = `${fromLeft - (this.leftThumbEl.clientWidth / hostRect.width / 2) * 100}%`;\n    this._rightThumb = `${fromRight - (this.rightThumbEl.clientWidth / hostRect.width / 2) * 100}%`;\n  }\n\n  /** if a thumb is DOM focused, this increments the focused thumb up or down based on the left or right arrow keys  */\n  #handleKeydown(e: KeyboardEvent): void {\n    const target = e.target as HTMLSpanElement;\n    const key = e.key;\n    if (key === 'ArrowLeft' || key === 'ArrowRight') {\n      e.preventDefault();\n      e.stopPropagation();\n      const hostRect = this.getBoundingClientRect();\n      this.#whichActiveThumb = target.hasAttribute('left') ? 'min' : 'max';\n      if (this.#whichActiveThumb === 'min') {\n        if (key === 'ArrowLeft') {\n          this.#stepDownMin();\n        } else {\n          this.#stepUpMin();\n        }\n      } else {\n        if (key === 'ArrowLeft') {\n          this.#stepDownMax();\n        } else {\n          this.#stepUpMax();\n        }\n      }\n      this.#positionElements(hostRect);\n      this.#emitChange();\n    }\n    if (e.key === 'Escape') {\n      this.#blur();\n    }\n  }\n\n  #blur = () => {\n    this.blur();\n    this.leftThumbEl.blur();\n    this.rightThumbEl.blur();\n  };\n\n  /** if mousedown, and target is a thumb, this method will shift the thumb up or down one step at a time  */\n  #handleMousemove = (e: MouseEvent) => {\n    const hostRect = this.getBoundingClientRect();\n    if (this.#whichActiveThumb === 'min') {\n      const moveDiff = e.clientX - hostRect.left;\n      const decimal = moveDiff / this.clientWidth;\n      const value = decimal * (this.max - this.min) + this.min;\n      const roundedValue = Number((Math.round(value / this.step) * this.step).toFixed(2));\n      if (!this.#isValidChange(roundedValue)) return;\n      this.value.min = roundedValue;\n    } else {\n      const moveDiff = hostRect.right - e.clientX;\n      const decimal = moveDiff / this.clientWidth;\n      const value = this.max - decimal * (this.max - this.min);\n      const roundedValue = Number((Math.round(value / this.step) * this.step).toFixed(2));\n      if (!this.#isValidChange(roundedValue)) return;\n      this.value.max = roundedValue;\n    }\n    this.#positionElements(hostRect);\n  };\n\n  /** sets the active thumb, adds event listeners, and modifies body css for accurate cursor */\n  #handleMousedown = (e: Event & { target: HTMLSpanElement }) => {\n    this.#whichActiveThumb = e.target.hasAttribute('left') ? 'min' : 'max';\n    this.#originalBodyStyle = document.body.style.cssText;\n    document.body.style.cursor = 'grabbing';\n    document.body.style.userSelect = 'none';\n    document.body.style['-webkit-user-select'] = 'none'; // for safari\n    document.addEventListener('mousemove', this.#handleMousemove);\n    document.addEventListener('mouseup', this.#handleMouseup);\n  };\n\n  /** sets body css to original, removes event listeners, and emits change event*/\n  #handleMouseup = () => {\n    document.removeEventListener('mousemove', this.#handleMousemove);\n    document.removeEventListener('mouseup', this.#handleMouseup);\n    document.body.style.cssText = this.#originalBodyStyle;\n    this.#emitChange();\n  };\n\n  #stepDownMin() {\n    const value = this.value.min - this.step;\n    if (!this.#isValidChange(value)) return;\n    this.value.min = value;\n  }\n\n  #stepUpMin() {\n    const value = this.value.min + this.step;\n    if (!this.#isValidChange(value)) return;\n    this.value.min = value;\n  }\n\n  #stepUpMax() {\n    const value = this.value.max + this.step;\n    if (!this.#isValidChange(value)) return;\n    this.value.max = value;\n  }\n\n  #stepDownMax() {\n    const value = this.value.max - this.step;\n    if (!this.#isValidChange(value)) return;\n    this.value.max = value;\n  }\n\n  /** programmatically step up one step */\n  public stepUp(thumb: Thumb): void {\n    this.#whichActiveThumb = thumb;\n    if (this.#whichActiveThumb === 'min') {\n      this.#stepUpMin();\n    } else {\n      this.#stepUpMax();\n    }\n    this.#positionElements(this.getBoundingClientRect());\n    this.#emitChange();\n  }\n\n  /** programmatically step down one step */\n  public stepDown(thumb: Thumb): void {\n    this.#whichActiveThumb = thumb;\n    if (this.#whichActiveThumb === 'min') {\n      this.#stepDownMin();\n    } else {\n      this.#stepDownMax();\n    }\n    this.#positionElements(this.getBoundingClientRect());\n    this.#emitChange();\n  }\n\n  render() {\n    return html`\n      <div slider id=\"slider-distance\" @blur=${this.#blur}>\n        <div id=\"sign-container\">\n          <div sign>\n            <span>${this.#formatter.format(this.value.min)}</span>\n          </div>\n          <div sign>\n            <span>${this.#formatter.format(this.value.max)}</span>\n          </div>\n        </div>\n        <div class=\"slider-container\">\n          <div left-track style=\"flex: 0 0 ${this._left}\"></div>\n          <div middle-track style=\"flex-grow: 1\"></div>\n          <div right-track style=\"flex: 0 0 ${this._right}\"></div>\n          <span\n            thumb\n            left\n            style=\"left:${this._leftThumb}\"\n            tabindex=${this.disabled ? '-1' : '0'}\n            @mousedown=${this.#handleMousedown}\n            @keydown=${this.#handleKeydown}>\n          </span>\n          <span\n            thumb\n            right\n            style=\"right:${this._rightThumb}\"\n            tabindex=${this.disabled ? '-1' : '0'}\n            @mousedown=${this.#handleMousedown}\n            @keydown=${this.#handleKeydown}>\n          </span>\n        </div>\n      </div>\n    `;\n  }\n}\n\nOmniElement.register('omni-range-slider', OmniRangeSlider);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'omni-range-slider': OmniRangeSlider;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
