import { ElementInternalsBase } from '../../element-internals-base.js';
type Thumb = 'min' | 'max';
interface RangeSliderElement {
    /** move up one step */
    stepUp: (thumb: Thumb) => void;
    /** move down one step */
    stepDown: (thumb: Thumb) => void;
    value: RangeSliderValues;
    min: number;
    max: number;
}
export interface RangeSliderValues {
    min: number;
    max: number;
}
/**
 * Two value range slider with language-sensitive number formatting
 *
 * This custom input element returns a min and max numeric value to set a range or define an interval. It
 * uses the [`Intl.NumberFormat` Web API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) to support international currencies and a large number of numeric formats. The component accepts any valid locale and  [`Intl.NumberFormat` options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#option)
 * via its `.numberFormatOptions` property.
 *
 * To include within your project `import { OmniRangeSlider } from 'omni-ui';`
 *
 * ```html
 * <!-- defaults to range of 0 to 100 with a step of 1 -->
 * <omni-range-slider></omni-range-slider>
 * ```
 *
 * @tagname omni-range-slider
 * @attr {boolean} disabled - disable the range slider from user interaction
 * @attr {string} name - name attribute for form association
 * @event {RangeSliderValues} change - fires when a change to min or max values occurs in the slider
 * @cssprop [--range-slider-background=var(--gradient-primary)]
 * @cssprop [--range-slider-thumb-border=var(--color-secondary)]
 */
export declare class OmniRangeSlider extends ElementInternalsBase<RangeSliderValues> implements RangeSliderElement {
    #private;
    static get styles(): import("lit").CSSResult[];
    private _left;
    private _leftThumb;
    private _right;
    private _rightThumb;
    min: number;
    max: number;
    /** changes the increment per slide movement (ensure your initialized values are multiples of the step) */
    step: number;
    /** name attribute for form association */
    name: string;
    valueMissingMessage: string;
    numberFormatOptions: {
        locale: string;
        options: Intl.NumberFormatOptions;
    };
    /** the current value of the min and max */
    value: RangeSliderValues;
    private containerEl;
    private leftThumbEl;
    private rightThumbEl;
    connectedCallback(): void;
    firstUpdated(): Promise<void>;
    disconnectedCallback(): void;
    /** programmatically step up one step */
    stepUp(thumb: Thumb): void;
    /** programmatically step down one step */
    stepDown(thumb: Thumb): void;
    render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'omni-range-slider': OmniRangeSlider;
    }
}
export {};
//# sourceMappingURL=omni-range-slider.d.ts.map