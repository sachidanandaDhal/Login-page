import { html, css } from "lit";
import { OmniFormControl } from "../omni-form-control.js";
class OmniOption extends OmniFormControl {
  constructor() {
    super();
    this._index = 0;
    this.selected = false;
    this.indeterminate = false;
    this.setAttribute("role", "option");
    this.tabIndex = -1;
  }
  updated(changedProperties) {
    if (changedProperties.has("selected")) {
      if (Boolean(changedProperties.get("selected")) !== this.selected) {
        this.dispatchNewEvent("option");
      }
    }
  }
  get index() {
    return this._index;
  }
  get value() {
    const { label, textContent } = this;
    return this.getAttribute("value") ?? (label ? label + (textContent.length ? " " : "") : "") + textContent;
  }
  set value(value) {
    this.setAttribute("value", value);
  }
  get label() {
    const label = this.getAttribute("label") ?? "";
    return label;
  }
  set label(value) {
    this.requestUpdate("label", this.getAttribute("label"));
    if (value) {
      this.setAttribute("label", value);
    } else {
      this.removeAttribute("label");
    }
  }
  get text() {
    const { label, textContent } = this;
    return `${label ? label + " " : ""}${textContent}`;
  }
  static get properties() {
    return {
      indeterminate: { type: Boolean, reflect: true },
      selected: { type: Boolean, reflect: true },
      defaultSelected: { type: Boolean, reflect: true },
      _index: { type: Number }
    };
  }
  static get styles() {
    return [
      css`
        :host {
          content-visibility: auto;
          contain: strict style;
          display: flex;
          flex-wrap: nowrap;
          border: 0;
          margin: 0.1rem;
          padding: var(--padding);
          margin: 0px;
          font-family: var(--family-sans-serif);
          color: var(--color);
          box-sizing: border-box;
          outline: none;
          user-select: none;
        }
        :host([hidden]) {
          display: none;
        }
        :host([optgroup]) {
          color: var(--color-disabled);
        }
        :host(:not([optgroup])) {
          padding-left: var(--padding-adjust, 0);
        }
        :host([optgroup]) omni-icon {
          display: var(--optgroup-first-icon);
        }
        :host(:not([disabled]):hover) {
          background-color: var(--option-hover, #ddd);
        }
        :host([disabled]) {
          pointer-events: none;
        }
        :host(:-internal-direct-focus),
        :host(:focus-visible),
        :host(:focus-within),
        :host(:focus) {
          outline: none;
        }
        omni-icon {
          contain: strict style;
          border: 1px solid #333;
          border-color: var(--icon-border, #333);
          border-radius: var(--radius-small);
          background-image: var(--icon-bg, #fff);
          --color-almost-black: #fff;
          padding: 0;
          margin: var(--icon-margin, 0.3em 0.3em 0.1em 0);
          width: var(--icon-size, 1em);
          height: var(--icon-size, 1em);
          min-width: 10px;
          min-height: 10px;
          max-width: 1rem;
          max-height: 1rem;
        }
        :host(:not([multiple])) omni-icon {
          --color-almost-black: var(--icon-color, #111);
        }
        :host([indeterminate]) omni-icon {
          --color-almost-black: #111;
        }
        :host([selected]) omni-icon {
          border-color: var(--icon-border-selected, #333);
          background-image: var(--icon-bg-selected, #fff);
        }
        :host(:not([optgroup]):not([selected])) omni-icon::part(icon) {
          visibility: hidden;
        }
        [part='text'] {
          max-width: var(--text-max-width, 20em);
          white-space: var(--text-white-space, inherit);
        }
      `
    ];
  }
  render() {
    const { label } = this;
    return html`<omni-icon icon-id="omni:informative:check"></omni-icon>
      <div part="text">${label || ""} <slot></slot></div>`;
  }
}
OmniOption.register("omni-option", OmniOption);
export {
  OmniOption
};
//# sourceMappingURL=omni-option.js.map
