var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { html, nothing } from "lit";
import { unsafeHTML } from "lit-html/directives/unsafe-html.js";
import { property, state } from "lit/decorators.js";
import DOMPurify from "dompurify";
import { OmniElement } from "../../omni-element.js";
import { css } from "lit";
const styles = css`:host{--aspect-ratio: 16/9}iframe,.skeleton{aspect-ratio:var(--aspect-ratio);max-height:100%}.skeleton{width:100%}`;
class OmniMediaEmbed extends OmniElement {
  constructor() {
    super(...arguments);
    this._loading = true;
    this._noContent = false;
  }
  static get styles() {
    return [...super.styles, styles];
  }
  willUpdate(changed) {
    if (changed.has("src")) {
      if (this.src.includes("youtube") || this.src.includes("youtu.be")) {
        this._loading = true;
        this.#fetchEmbed("https://www.youtube.com/oembed", "_youtube");
        return;
      }
      if (this.src.includes("vimeo")) {
        this._loading = true;
        this.#fetchEmbed("https://vimeo.com/api/oembed.json", "_vimeo");
        return;
      }
      if (this.src.includes("spotify")) {
        this._loading = true;
        this.#fetchEmbed("https://open.spotify.com/oembed", "_spotify", false);
        return;
      }
      if (this.src.includes("soundcloud")) {
        this._loading = true;
        this.#fetchEmbed("https://soundcloud.com/oembed", "_soundcloud");
        return;
      }
      this._noContent = true;
    }
  }
  #fetchEmbed(oembedUrl, mediaType, replaceHeight = true) {
    fetch(`${oembedUrl}?url=${encodeURIComponent(this.src)}`).then((resp) => resp.json()).then((resp) => {
      let snippet = resp.html.replace(/width="\d+"/, 'width="100%"');
      if (replaceHeight) {
        snippet = snippet.replace(/height="\d+"/, "");
      }
      const cleanSnippet = DOMPurify.sanitize(snippet, {
        ADD_TAGS: ["iframe"],
        ADD_ATTR: ["allow", "allowfullscreen", "frameborder", "scrolling"]
      });
      this[mediaType] = html`${unsafeHTML(cleanSnippet)}`;
      this._mediaType = mediaType;
      this._loading = false;
    }).catch(() => {
      this[mediaType] = nothing;
      this._mediaType = mediaType;
      this._loading = false;
    });
  }
  render() {
    if (this._noContent)
      return nothing;
    return !this._loading ? this[this._mediaType] ?? nothing : html`<omni-style><div class="skeleton"></div></omni-style>`;
  }
}
__decorateClass([
  state()
], OmniMediaEmbed.prototype, "_mediaType", 2);
__decorateClass([
  state()
], OmniMediaEmbed.prototype, "_loading", 2);
__decorateClass([
  state()
], OmniMediaEmbed.prototype, "_noContent", 2);
__decorateClass([
  property({ type: String })
], OmniMediaEmbed.prototype, "src", 2);
OmniElement.register("omni-media-embed", OmniMediaEmbed);
export {
  OmniMediaEmbed
};
//# sourceMappingURL=omni-media-embed.js.map
