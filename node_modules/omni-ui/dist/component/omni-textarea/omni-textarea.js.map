{
  "version": 3,
  "sources": ["../../../lib/component/omni-textarea/omni-textarea.ts"],
  "sourcesContent": ["import { html, nothing } from 'lit';\nimport { property, query, state } from 'lit/decorators.js';\nimport { ElementInternalsBase } from '../../element-internals-base.js';\nimport { OmniElement } from '../../omni-element.js';\n\nimport {css} from 'lit';\nconst styles = css`.omni textarea.textarea{resize:none}.omni textarea.textarea.is-error{border-color:var(--color-error)}.omni textarea.textarea[disabled]{resize:none}:host([transparent]) .omni textarea.textarea,:host([transparent]) .omni textarea.textarea:hover,:host([transparent]) .omni textarea.textarea:active,:host([transparent]) .omni textarea.textarea:focus{background-color:rgba(0,0,0,0);border:1px solid rgba(0,0,0,0);box-shadow:none}.label-container{display:flex;justify-content:flex-start;align-items:center;height:.9285714286rem;margin-bottom:.6428571429rem}.label-container label{line-height:.9285714286rem;white-space:nowrap;color:var(--color-core-dark);font-size:.7857142857rem;opacity:.6}.text-right{color:#df5678;justify-content:right;align-items:center}.footer-spacer{height:1.8571428571rem;min-height:1.8571428571rem;max-height:1.8571428571rem;flex:0 0 100%}.footer-container{display:flex;justify-content:flex-end;align-items:center;flex:0 0 100%;padding:.2857142857rem 0 .2857142857rem .2857142857rem}.footer-container.error-text{justify-content:flex-start;align-items:center}.footer-container omni-icon{margin-right:.5714285714rem;--color-icon-lines: var(--color-error)}.footer-container span{font-size:.8571428571rem;font-weight:400;color:var(--color-almost-black)}.footer-container span.too-many{color:var(--color-error)}`\n\n\n/**\n * To include within your project `import { OmniTextarea } from 'omni-ui';`\n *\n * @tagname omni-textarea\n * @attr {boolean} transparent - transparent background of the textarea\n * @event {string} change - fires when the user starts making change in textarea\n */\n\nexport class OmniTextarea extends ElementInternalsBase<string> {\n  /**@internal */\n  static get shadowRootOptions() {\n    return { ...super.shadowRootOptions, delegatesFocus: true };\n  }\n\n  static get styles() {\n    return [...super.styles, styles];\n  }\n\n  /** Placeholder for ommni-textarea */\n  @property({ type: String, reflect: true }) placeholder: string = '';\n  /** Value of omni-textarea */\n  @property({ type: String }) value: string = '';\n  /** Name of omni-textarea */\n  @property({ type: String }) name: string;\n  /** Label of omni-textarea */\n  @property({ type: String }) label: string = '';\n  /** Error message of omni-textarea */\n  @property({ type: String, reflect: true }) error: string;\n  /** Error message of omni-textarea when value is missing */\n  @property({ type: String }) valueMissingMessage: string = 'This field is required';\n  /** Boolean property show/hide footer */\n  @property({ type: Boolean, reflect: true }) hidefooter: boolean = false;\n  /** Boolean property to resize the textarea */\n  @property({ type: Boolean, reflect: true }) resize: boolean = false;\n  /** Number of rows in omni-textarea */\n  @property({ type: Number }) rows: number = 1;\n  /** Max number of rows in omni-textarea */\n  @property({ type: Number }) maxRows: number;\n  /** Character count for omni-textarea */\n  @property({ type: Number }) characterCount: number;\n  /** Boolean property to show/hide character count */\n  @property({ type: Boolean, reflect: true }) showCharacterCountdown: boolean = false;\n  @state() private _charactersRemaining: number;\n\n  @query('textarea') private textarea: HTMLTextAreaElement;\n\n  async firstUpdated() {\n    await this.updateComplete;\n    this.#handleResize();\n    this._internals.setFormValue(this.value);\n    this._internals.setValidity({});\n    if (!this.value && this.required) {\n      this._internals.setValidity({ valueMissing: true }, this.valueMissingMessage, this.textarea);\n    }\n    this.#calculateRemainingCharacters();\n  }\n\n  #calculateRemainingCharacters() {\n    if (this.characterCount) {\n      this._charactersRemaining = this.characterCount - this.value.length;\n    }\n  }\n\n  async #handleInput(e: Event) {\n    this._internals.setValidity({});\n    this.value = (e.target as HTMLTextAreaElement).value;\n    this.#calculateRemainingCharacters();\n    this._internals.setFormValue(this.value);\n    if (!this.value && this.required) {\n      this._internals.setValidity({ valueMissing: true }, this.valueMissingMessage, this.textarea);\n    }\n    if (this.value.length > this.characterCount) {\n      this._internals.setValidity(\n        { tooLong: true },\n        `Too many characters (${this._charactersRemaining})`,\n        this.textarea\n      );\n    }\n    this.dispatchNewEvent('change', { detail: this.value });\n    this.#handleResize();\n  }\n\n  #handleResize() {\n    const textAreaStyle = getComputedStyle(this.textarea);\n    const paddingAndBorderHeight =\n      parseFloat(textAreaStyle.paddingTop) +\n      parseFloat(textAreaStyle.paddingBottom) +\n      parseFloat(textAreaStyle.borderTopWidth) +\n      parseFloat(textAreaStyle.borderBottomWidth);\n    const maxheight = this.maxRows\n      ? parseFloat(textAreaStyle.lineHeight) * this.maxRows + paddingAndBorderHeight\n      : Infinity;\n    const minHeight = paddingAndBorderHeight + parseFloat(textAreaStyle.lineHeight) * this.rows;\n    this.textarea.style.height = 'auto';\n    if (this.resize) {\n      this.textarea.style.resize = 'vertical';\n    }\n    // + 2 to avoid scroll bar\n    const adjustToHeight = this.textarea.scrollHeight + 2;\n    // stop resize when max-height from maxRows is hit\n    if (adjustToHeight > maxheight) {\n      this.textarea.style.overflow = 'auto';\n      this.textarea.style.height = `${maxheight}px`;\n      return;\n    }\n    this.textarea.style.height = `${adjustToHeight}px`;\n    this.textarea.style.maxHeight = `${maxheight}px`;\n    this.textarea.style.minHeight = `${minHeight}px`;\n    this.textarea.style.overflow = 'hidden';\n  }\n\n  /** clear the textarea and resize to the default rows */\n  async clear() {\n    this.value = '';\n    this.dispatchNewEvent('change', { detail: this.value });\n    await this.updateComplete;\n    this.#handleResize();\n  }\n\n  get #labelTemplate() {\n    if (!this.label) return nothing;\n    return html`\n      <div class=\"label-container\">\n        <label part=\"label\">${this.label}</label>\n      </div>\n    `;\n  }\n\n  get #characterCountTemplate() {\n    if (!this.showCharacterCountdown || this.error) return nothing;\n    return html`\n      <div>\n        ${this._charactersRemaining < 0\n          ? html`\n              <div class=\"footer-container error-text\">\n                <omni-icon icon-id=\"omni:informative:error\"></omni-icon>\n                <span> Too many characters (<span class=\"too-many\">${this._charactersRemaining}</span>) </span>\n              </div>\n            `\n          : html` <div class=\"footer-container\">\n              <span> ${this._charactersRemaining} characters remaining</span>\n            </div>`}\n      </div>\n    `;\n  }\n\n  get #footerTemplate() {\n    if (this.hidefooter) return nothing;\n    const footerSpacer = html`<div class=\"footer-spacer\">${this.#characterCountTemplate}</div>`;\n    if (!this.error) return footerSpacer;\n    if (this.error) {\n      return html`\n        <div class=\"footer-container error-text\">\n          <omni-icon icon-id=\"omni:informative:error\"></omni-icon>\n          <span>${this.error}</span>\n        </div>\n      `;\n    }\n  }\n\n  render() {\n    return html`\n      <!-- prettier-ignore -->\n      <omni-style>\n        ${this.#labelTemplate}\n        <textarea\n          part=\"textarea\"\n          class=\"textarea ${this.error ? 'is-error' : ''} ${this._charactersRemaining < 0 ? 'is-error' : ''}\"\n          .value=${this.value}\n          ?disabled=${this.disabled}\n          .placeholder=${this.placeholder}\n          rows=${this.rows}\n          @input=${this.#handleInput}>\n        </textarea>\n        ${this.#footerTemplate}\n      </omni-style>\n    `;\n  }\n}\n\nOmniElement.register('omni-textarea', OmniTextarea);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'omni-textarea': OmniTextarea;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
