var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { html, nothing } from "lit";
import { property, query, state } from "lit/decorators.js";
import { ElementInternalsBase } from "../../element-internals-base.js";
import { OmniElement } from "../../omni-element.js";
import { css } from "lit";
const styles = css`.omni textarea.textarea{resize:none}.omni textarea.textarea.is-error{border-color:var(--color-error)}.omni textarea.textarea[disabled]{resize:none}:host([transparent]) .omni textarea.textarea,:host([transparent]) .omni textarea.textarea:hover,:host([transparent]) .omni textarea.textarea:active,:host([transparent]) .omni textarea.textarea:focus{background-color:rgba(0,0,0,0);border:1px solid rgba(0,0,0,0);box-shadow:none}.label-container{display:flex;justify-content:flex-start;align-items:center;height:.9285714286rem;margin-bottom:.6428571429rem}.label-container label{line-height:.9285714286rem;white-space:nowrap;color:var(--color-core-dark);font-size:.7857142857rem;opacity:.6}.text-right{color:#df5678;justify-content:right;align-items:center}.footer-spacer{height:1.8571428571rem;min-height:1.8571428571rem;max-height:1.8571428571rem;flex:0 0 100%}.footer-container{display:flex;justify-content:flex-end;align-items:center;flex:0 0 100%;padding:.2857142857rem 0 .2857142857rem .2857142857rem}.footer-container.error-text{justify-content:flex-start;align-items:center}.footer-container omni-icon{margin-right:.5714285714rem;--color-icon-lines: var(--color-error)}.footer-container span{font-size:.8571428571rem;font-weight:400;color:var(--color-almost-black)}.footer-container span.too-many{color:var(--color-error)}`;
class OmniTextarea extends ElementInternalsBase {
  constructor() {
    super(...arguments);
    this.placeholder = "";
    this.value = "";
    this.label = "";
    this.valueMissingMessage = "This field is required";
    this.hidefooter = false;
    this.resize = false;
    this.rows = 1;
    this.showCharacterCountdown = false;
  }
  /**@internal */
  static get shadowRootOptions() {
    return { ...super.shadowRootOptions, delegatesFocus: true };
  }
  static get styles() {
    return [...super.styles, styles];
  }
  async firstUpdated() {
    await this.updateComplete;
    this.#handleResize();
    this._internals.setFormValue(this.value);
    this._internals.setValidity({});
    if (!this.value && this.required) {
      this._internals.setValidity({ valueMissing: true }, this.valueMissingMessage, this.textarea);
    }
    this.#calculateRemainingCharacters();
  }
  #calculateRemainingCharacters() {
    if (this.characterCount) {
      this._charactersRemaining = this.characterCount - this.value.length;
    }
  }
  async #handleInput(e) {
    this._internals.setValidity({});
    this.value = e.target.value;
    this.#calculateRemainingCharacters();
    this._internals.setFormValue(this.value);
    if (!this.value && this.required) {
      this._internals.setValidity({ valueMissing: true }, this.valueMissingMessage, this.textarea);
    }
    if (this.value.length > this.characterCount) {
      this._internals.setValidity(
        { tooLong: true },
        `Too many characters (${this._charactersRemaining})`,
        this.textarea
      );
    }
    this.dispatchNewEvent("change", { detail: this.value });
    this.#handleResize();
  }
  #handleResize() {
    const textAreaStyle = getComputedStyle(this.textarea);
    const paddingAndBorderHeight = parseFloat(textAreaStyle.paddingTop) + parseFloat(textAreaStyle.paddingBottom) + parseFloat(textAreaStyle.borderTopWidth) + parseFloat(textAreaStyle.borderBottomWidth);
    const maxheight = this.maxRows ? parseFloat(textAreaStyle.lineHeight) * this.maxRows + paddingAndBorderHeight : Infinity;
    const minHeight = paddingAndBorderHeight + parseFloat(textAreaStyle.lineHeight) * this.rows;
    this.textarea.style.height = "auto";
    if (this.resize) {
      this.textarea.style.resize = "vertical";
    }
    const adjustToHeight = this.textarea.scrollHeight + 2;
    if (adjustToHeight > maxheight) {
      this.textarea.style.overflow = "auto";
      this.textarea.style.height = `${maxheight}px`;
      return;
    }
    this.textarea.style.height = `${adjustToHeight}px`;
    this.textarea.style.maxHeight = `${maxheight}px`;
    this.textarea.style.minHeight = `${minHeight}px`;
    this.textarea.style.overflow = "hidden";
  }
  /** clear the textarea and resize to the default rows */
  async clear() {
    this.value = "";
    this.dispatchNewEvent("change", { detail: this.value });
    await this.updateComplete;
    this.#handleResize();
  }
  get #labelTemplate() {
    if (!this.label)
      return nothing;
    return html`
      <div class="label-container">
        <label part="label">${this.label}</label>
      </div>
    `;
  }
  get #characterCountTemplate() {
    if (!this.showCharacterCountdown || this.error)
      return nothing;
    return html`
      <div>
        ${this._charactersRemaining < 0 ? html`
              <div class="footer-container error-text">
                <omni-icon icon-id="omni:informative:error"></omni-icon>
                <span> Too many characters (<span class="too-many">${this._charactersRemaining}</span>) </span>
              </div>
            ` : html` <div class="footer-container">
              <span> ${this._charactersRemaining} characters remaining</span>
            </div>`}
      </div>
    `;
  }
  get #footerTemplate() {
    if (this.hidefooter)
      return nothing;
    const footerSpacer = html`<div class="footer-spacer">${this.#characterCountTemplate}</div>`;
    if (!this.error)
      return footerSpacer;
    if (this.error) {
      return html`
        <div class="footer-container error-text">
          <omni-icon icon-id="omni:informative:error"></omni-icon>
          <span>${this.error}</span>
        </div>
      `;
    }
  }
  render() {
    return html`
      <!-- prettier-ignore -->
      <omni-style>
        ${this.#labelTemplate}
        <textarea
          part="textarea"
          class="textarea ${this.error ? "is-error" : ""} ${this._charactersRemaining < 0 ? "is-error" : ""}"
          .value=${this.value}
          ?disabled=${this.disabled}
          .placeholder=${this.placeholder}
          rows=${this.rows}
          @input=${this.#handleInput}>
        </textarea>
        ${this.#footerTemplate}
      </omni-style>
    `;
  }
}
__decorateClass([
  property({ type: String, reflect: true })
], OmniTextarea.prototype, "placeholder", 2);
__decorateClass([
  property({ type: String })
], OmniTextarea.prototype, "value", 2);
__decorateClass([
  property({ type: String })
], OmniTextarea.prototype, "name", 2);
__decorateClass([
  property({ type: String })
], OmniTextarea.prototype, "label", 2);
__decorateClass([
  property({ type: String, reflect: true })
], OmniTextarea.prototype, "error", 2);
__decorateClass([
  property({ type: String })
], OmniTextarea.prototype, "valueMissingMessage", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniTextarea.prototype, "hidefooter", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniTextarea.prototype, "resize", 2);
__decorateClass([
  property({ type: Number })
], OmniTextarea.prototype, "rows", 2);
__decorateClass([
  property({ type: Number })
], OmniTextarea.prototype, "maxRows", 2);
__decorateClass([
  property({ type: Number })
], OmniTextarea.prototype, "characterCount", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniTextarea.prototype, "showCharacterCountdown", 2);
__decorateClass([
  state()
], OmniTextarea.prototype, "_charactersRemaining", 2);
__decorateClass([
  query("textarea")
], OmniTextarea.prototype, "textarea", 2);
OmniElement.register("omni-textarea", OmniTextarea);
export {
  OmniTextarea
};
//# sourceMappingURL=omni-textarea.js.map
