var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import DOMPurify from "dompurify";
import { html } from "lit";
import { property, state } from "lit/decorators.js";
import { unsafeHTML } from "lit/directives/unsafe-html.js";
import { marked } from "marked";
import { OmniElement } from "../../omni-element.js";
import "../omni-style/omni-style.js";
import "../omni-tooltip/omni-tooltip.js";
import { css } from "lit";
const styles = css`:host{font-size:var(--markdown-font-size, 1rem)}.omni p{padding-bottom:calc(1.65*var(--markdown-font-size, 1rem))}.omni p:last-child{padding-bottom:0}.omni .table td,.omni .table td{white-space:unset}.table-wrapper{max-width:100%;overflow-x:auto}.omni ol,.omni ul,.omni li{margin:revert;padding:revert;list-style:revert}`;
marked.use({
  renderer: {
    table(header, body) {
      if (body)
        body = `<tbody>${body}</tbody>`;
      return `<div class="table-wrapper"><table class="table m-3"><thead>${header}</thead>${body}</table></div>
`;
    },
    heading(text, level) {
      return `<h${level} class="is-size-${level} mb-5">${text}</h${level}>`;
    }
  }
});
class OmniMarkdown extends OmniElement {
  static get styles() {
    return [...super.styles, styles];
  }
  willUpdate(changedProperties) {
    if (changedProperties.has("markdown") && this.markdown?.length > 0) {
      this.rendered = DOMPurify.sanitize(marked.parse(this.markdown));
    }
  }
  render() {
    return html` <omni-style> ${unsafeHTML(this.rendered ?? "")} </omni-style> `;
  }
}
__decorateClass([
  property({ type: String })
], OmniMarkdown.prototype, "markdown", 2);
__decorateClass([
  state()
], OmniMarkdown.prototype, "rendered", 2);
OmniElement.register("omni-markdown", OmniMarkdown);
export {
  OmniMarkdown
};
//# sourceMappingURL=omni-markdown.js.map
