{
  "version": 3,
  "sources": ["../../../lib/component/omni-markdown/omni-markdown.ts"],
  "sourcesContent": ["import DOMPurify from 'dompurify';\nimport { html } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js';\nimport { marked } from 'marked';\nimport { OmniElement } from '../../omni-element.js';\nimport '../omni-style/omni-style.js';\nimport '../omni-tooltip/omni-tooltip.js';\n\nimport {css} from 'lit';\nconst styles = css`:host{font-size:var(--markdown-font-size, 1rem)}.omni p{padding-bottom:calc(1.65*var(--markdown-font-size, 1rem))}.omni p:last-child{padding-bottom:0}.omni .table td,.omni .table td{white-space:unset}.table-wrapper{max-width:100%;overflow-x:auto}.omni ol,.omni ul,.omni li{margin:revert;padding:revert;list-style:revert}`\n\n\n// Add css class to table elements\nmarked.use({\n  renderer: {\n    table(header, body) {\n      // eslint-disable-next-line no-param-reassign\n      if (body) body = `<tbody>${body}</tbody>`;\n      return `<div class=\"table-wrapper\"><table class=\"table m-3\"><thead>${header}</thead>${body}</table></div>\\n`;\n    },\n    heading(text, level) {\n      return `<h${level} class=\"is-size-${level} mb-5\">${text}</h${level}>`;\n    }\n  }\n});\n\n/**\n * Safely render markdown to HTML\n *\n * This component safely renders markdown to HTML for display on the web. Markdown input is parsed by the\n * [`marked`](https://marked.js.org/) library and sanitized using [`DOMPurify`](https://github.com/cure53/DOMPurify).\n *\n * To include within your project `import { OmniMarkdown } from 'omni-ui';`\n *\n * ```html\n * <omni-style>\n *   <omni-markdown markdown=\"Hello _world_!\"></omni-markdown>\n * </omni-style>\n * ```\n *\n * Markdown strings can be passed to the component as an attribute `markdown=\"Hello _world_!\"` or property `.markdown=${sample}`.\n * Only the property will handle escaped characters correctly so if escaped characters are in your markdown, code blocks\n * for example, you will need to use the property variant.\n *\n * @tagname omni-markdown\n */\nexport class OmniMarkdown extends OmniElement {\n  static get styles() {\n    return [...super.styles, styles];\n  }\n\n  /** markdown to render to HTML safely */\n  @property({ type: String }) markdown: string;\n  /** sanitized HTML string */\n  @state() private rendered: string;\n\n  willUpdate(changedProperties: Map<string, unknown>) {\n    if (changedProperties.has('markdown') && this.markdown?.length > 0) {\n      this.rendered = DOMPurify.sanitize(marked.parse(this.markdown));\n    }\n  }\n\n  render() {\n    return html` <omni-style> ${unsafeHTML(this.rendered ?? '')} </omni-style> `;\n  }\n}\n\nOmniElement.register('omni-markdown', OmniMarkdown);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'omni-markdown': OmniMarkdown;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;AAAA,OAAO,eAAe;AACtB,SAAS,YAAY;AACrB,SAAS,UAAU,aAAa;AAChC,SAAS,kBAAkB;AAC3B,SAAS,cAAc;AACvB,SAAS,mBAAmB;AAC5B,OAAO;AACP,OAAO;AAEP,SAAQ,WAAU;AAClB,MAAM,SAAS;AAIf,OAAO,IAAI;AAAA,EACT,UAAU;AAAA,IACR,MAAM,QAAQ,MAAM;AAElB,UAAI;AAAM,eAAO,UAAU,IAAI;AAC/B,aAAO,8DAA8D,MAAM,WAAW,IAAI;AAAA;AAAA,IAC5F;AAAA,IACA,QAAQ,MAAM,OAAO;AACnB,aAAO,KAAK,KAAK,mBAAmB,KAAK,UAAU,IAAI,MAAM,KAAK;AAAA,IACpE;AAAA,EACF;AACF,CAAC;AAsBM,MAAM,qBAAqB,YAAY;AAAA,EAC5C,WAAW,SAAS;AAClB,WAAO,CAAC,GAAG,MAAM,QAAQ,MAAM;AAAA,EACjC;AAAA,EAOA,WAAW,mBAAyC;AAClD,QAAI,kBAAkB,IAAI,UAAU,KAAK,KAAK,UAAU,SAAS,GAAG;AAClE,WAAK,WAAW,UAAU,SAAS,OAAO,MAAM,KAAK,QAAQ,CAAC;AAAA,IAChE;AAAA,EACF;AAAA,EAEA,SAAS;AACP,WAAO,qBAAqB,WAAW,KAAK,YAAY,EAAE,CAAC;AAAA,EAC7D;AACF;AAb8B;AAAA,EAA3B,SAAS,EAAE,MAAM,OAAO,CAAC;AAAA,GANf,aAMiB;AAEX;AAAA,EAAhB,MAAM;AAAA,GARI,aAQM;AAanB,YAAY,SAAS,iBAAiB,YAAY;",
  "names": []
}
