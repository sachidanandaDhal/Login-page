var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { html, nothing } from "lit";
import { property } from "lit/decorators.js";
import { classMap } from "lit/directives/class-map.js";
import { OmniElement } from "../../omni-element.js";
import "../omni-checkbox/omni-checkbox.js";
import { isGroupHeader } from "../omni-dropdown/omni-dropdown.types.js";
import "../omni-icon/omni-icon.js";
import "../omni-tooltip/omni-tooltip.js";
import { css } from "lit";
const styles = css`.item{min-height:2.5714285714rem;padding:.5357142857rem .8571428571rem .5357142857rem .8571428571rem;margin:0 0 .2142857143rem 0;user-select:none;display:flex;flex-grow:1;align-items:flex-start;justify-content:flex-start}.item:last-child{margin-bottom:0}.item:hover{background-color:var(--white);outline:none}.item:focus,.item:active{background:linear-gradient(136.75deg, rgba(var(--rgb-primary), 0.14) 28.19%, rgba(var(--rgb-primary), 0.14) 109.31%);outline:none}.item:not(.disabled):hover omni-checkbox{--checkbox-border-color: var(--color-primary)}.item label{color:#3b3e3f;pointer-events:none;font-size:1rem;font-style:normal;font-weight:400;line-height:1.3571428571rem;letter-spacing:.0030714286rem}.item .item-gutter{display:flex;flex-direction:column;justify-content:center;align-items:center;min-width:1.5714285714rem;max-width:1.5714285714rem;min-height:1.4285714286rem;max-height:1.4285714286rem;padding:0 .7142857143rem 0 0}.item .item-gutter omni-icon{--color-icon-lines: var(--color-primary);height:1.1428571429rem;width:1.1428571429rem;max-height:100%}.item.disabled{cursor:not-allowed}.item.disabled:hover{background:rgba(0,0,0,0)}.item.disabled:focus,.item.disabled:active{outline:none;background:rgba(0,0,0,0)}.item.disabled label{color:#a2a9ad !important}:host([hasgroupheaders]) .item.groupheader span{color:#a2a9ad !important;font-weight:600}:host([hasgroupheaders]) .item.groupheader .item-gutter{display:flex;flex-direction:column;justify-content:flex-end;align-items:center;min-width:.2857142857rem;max-width:.2857142857rem;min-height:1.4285714286rem;max-height:1.4285714286rem;padding:0}:host([hasgroupheaders]) .item.groupheader.disabled{cursor:default}:host([hasgroupheaders]) .item:not(.groupheader) .item-gutter{display:flex;flex-direction:column;justify-content:center;align-items:center;min-width:2.4285714286rem;max-width:2.4285714286rem;min-height:1.4285714286rem;max-height:1.4285714286rem;padding:0}`;
class OmniOptions extends OmniElement {
  constructor() {
    super(...arguments);
    this.multiselect = false;
    this.#optionListItem = (option, index) => {
      const _classes = classMap({
        item: true,
        selected: this.selected?.has(option),
        disabled: this.disabledList?.has(option),
        groupheader: isGroupHeader(option)
      });
      const baseItem = (slot = null) => html`
      <div
        class=${_classes}
        slot="${slot}"
        tabindex=${!this.multiselect && !this.disabledList?.has(option) ? 0 : -1}
        @click=${() => this.#handleSelectChange(option)}
        @keyup=${(e) => this.#handleEnterOnItem(e, option)}>
        <span class="item-gutter">
          ${this.multiselect && !isGroupHeader(option) ? html`<omni-checkbox
                tabindex="0"
                id=${this.#getOptionId(option, index)}
                ?disabled=${this.disabledList?.has(option)}
                ?checked="${this.selected?.has(option)}"
                @change=${(e) => e.stopPropagation()}></omni-checkbox>` : nothing}
          ${!this.multiselect && this.selected?.has(option) ? html`<omni-icon icon-id="icon:informative:check" class="is-size-6"></omni-icon>` : nothing}
        </span>
        <label for="${this.#getOptionId(option, index)}">${this.#toDisplayValue(option)}</label>
      </div>
    `;
      if (this.disabledList?.has(option) && this.disabledMessage) {
        return html`
        <omni-tooltip>
          ${baseItem("invoker")}
          <div slot="content">${this.disabledMessage}</div>
        </omni-tooltip>
      `;
      } else {
        return baseItem();
      }
    };
  }
  static get styles() {
    return [...super.styles, styles];
  }
  #toDisplayValue(option) {
    return option && typeof option === "object" ? option.value : option;
  }
  #getOptionId(option, index) {
    switch (typeof option) {
      case "object":
        return option.id ?? "_" + index;
      case "string":
        return option;
      default:
        return option;
    }
  }
  #handleSelectChange(option) {
    if (this.disabledList?.has(option))
      return;
    this.dispatchNewEvent("selectChange", { detail: option });
  }
  #handleEnterOnItem(event, option) {
    this.dispatchNewEvent("enterOnItem", { detail: { value: option, eventKey: event.key } });
  }
  async firstUpdated() {
    if (!this.options.some((option) => typeof option === "object" && option?.attributes))
      return;
    const eleRef = this.shadowRoot.querySelectorAll(".item");
    this.options.forEach((option, index) => {
      if (typeof option === "object" && option?.attributes) {
        option.attributes.forEach((attr) => {
          switch (typeof attr) {
            case "string":
              eleRef[index].setAttribute(attr, "");
              break;
            case "object":
              eleRef[index].setAttribute(attr.key, attr.value);
              break;
          }
        });
      }
    });
  }
  #optionListItem;
  render() {
    return this.options.map(this.#optionListItem);
  }
}
__decorateClass([
  property({ type: Array })
], OmniOptions.prototype, "options", 2);
__decorateClass([
  property({ type: Boolean })
], OmniOptions.prototype, "multiselect", 2);
__decorateClass([
  property({ type: String })
], OmniOptions.prototype, "disabledMessage", 2);
__decorateClass([
  property({ type: Object })
], OmniOptions.prototype, "disabledList", 2);
__decorateClass([
  property({ type: Object })
], OmniOptions.prototype, "selected", 2);
OmniElement.register("omni-options", OmniOptions);
export {
  OmniOptions
};
//# sourceMappingURL=omni-options.js.map
