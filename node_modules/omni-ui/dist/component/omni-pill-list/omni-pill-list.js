var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { html, nothing } from "lit";
import { property, state } from "@lit/reactive-element/decorators.js";
import { OmniElement } from "../../omni-element.js";
import "../omni-icon/omni-icon.js";
import "../omni-chip/omni-chip.js";
import { css } from "lit";
const styles = css`.container{overflow:hidden;min-width:100%;flex:0 0 100%;display:flex;justify-content:space-between;align-items:center}.pills-container{display:flex;justify-content:space-between;align-items:center}.pills{display:flex}.pills omni-chip{cursor:pointer;display:flex;justify-content:space-between;align-items:center;white-space:nowrap;margin-right:.2857142857rem}.pills omni-chip::part(chip){padding:0;background-color:rgba(0,0,0,0)}.pills omni-chip:hover{--color-icon-override: var(--color-gray-0a)}.pills omni-icon{min-width:1.1428571429rem;min-height:1.1428571429rem;margin-right:.2857142857rem;margin-left:1.0714285714rem;font-size:1rem}.pills omni-icon:hover{--color-icon-override: var(--color-primary)}omni-tooltip{margin-left:.4285714286rem}.hint{color:var(--color-electric-blue);white-space:nowrap}`;
class OmniPillList extends OmniElement {
  constructor() {
    super(...arguments);
    this.pillList = [];
    this.tooltipList = [];
    this.items = [];
    this.sliceAt = 10;
    this.overflowWidth = 300;
  }
  static get styles() {
    return [...super.styles, styles];
  }
  willUpdate(changed) {
    if (changed.has("items")) {
      this.pillList = [];
      this.tooltipList = [];
      const canvas = document.createElement("canvas");
      const context = canvas.getContext("2d");
      let currTotalPillWidth = 0;
      this.items.map((option) => {
        const formattedVal = this.format(typeof option === "object" ? option.value : option);
        const marginRight = 4;
        const canvasErrorBuffer = 10;
        const width = this.#getTextWidth(formattedVal, context) + marginRight + canvasErrorBuffer;
        return {
          option,
          value: formattedVal,
          width
        };
      }).forEach((option) => {
        currTotalPillWidth += option.width + 32;
        if (currTotalPillWidth < this.overflowWidth) {
          this.pillList.push(option);
        } else {
          this.tooltipList.push(option);
        }
      });
      canvas.remove();
    }
  }
  format(words) {
    if (typeof words === "string") {
      return words.slice(0, this.sliceAt) + (words.length > this.sliceAt ? "..." : "");
    } else {
      return words;
    }
  }
  // pills if not overflowing
  get pillsTemplate() {
    if (!this.pillList.length)
      return nothing;
    return html`
      <section class="pills">
        ${this.pillList.map(
      (pill) => html`
            <omni-chip action label=${pill.value}>
              <omni-icon
                icon-id="omni:interactive:remove"
                @click="${(e) => {
        e.stopPropagation();
        this.dispatchNewEvent("remove", { detail: pill.option });
      }}">
              </omni-icon>
            </omni-chip>
          `
    )}
      </section>
    `;
  }
  // items in tooltip not shown in pills
  get tooltipTemplate() {
    if (!this.tooltipList.length)
      return nothing;
    return html`
      <omni-tooltip>
        <span slot="invoker" part="hint" class="hint">+ ${this.tooltipList.length}</span>
        <div slot="content">
          ${this.tooltipList.map((pill) => {
      return html` <p>${this.format(pill.value)}</p> `;
    })}
        </div>
      </omni-tooltip>
    `;
  }
  #getTextWidth(text, context) {
    context.font = getComputedStyle(document.documentElement).font;
    let width = context.measureText(String(text)).width;
    if (String(text).includes("...")) {
      width = width + context.measureText("...").width;
    }
    return Math.floor(width);
  }
  // prettier-ignore
  render() {
    return html` 
    <div class="container">
      <div class="pills-container">
        ${this.pillsTemplate} 
        ${this.tooltipTemplate}
      </div>
    </div>
    `;
  }
}
__decorateClass([
  state()
], OmniPillList.prototype, "pillList", 2);
__decorateClass([
  state()
], OmniPillList.prototype, "tooltipList", 2);
__decorateClass([
  property({ type: Array, attribute: false })
], OmniPillList.prototype, "items", 2);
__decorateClass([
  property({ type: Number })
], OmniPillList.prototype, "sliceAt", 2);
__decorateClass([
  property({ type: Number })
], OmniPillList.prototype, "overflowWidth", 2);
OmniElement.register("omni-pill-list", OmniPillList);
export {
  OmniPillList
};
//# sourceMappingURL=omni-pill-list.js.map
