{
  "version": 3,
  "sources": ["../../../lib/component/omni-pill-list/omni-pill-list.ts"],
  "sourcesContent": ["import { html, nothing } from 'lit';\nimport { property, state } from '@lit/reactive-element/decorators.js';\n\nimport type { Option } from '../omni-dropdown/omni-dropdown.types.js';\nimport { OmniElement } from '../../omni-element.js';\nimport '../omni-icon/omni-icon.js';\nimport '../omni-chip/omni-chip.js';\n\nimport {css} from 'lit';\nconst styles = css`.container{overflow:hidden;min-width:100%;flex:0 0 100%;display:flex;justify-content:space-between;align-items:center}.pills-container{display:flex;justify-content:space-between;align-items:center}.pills{display:flex}.pills omni-chip{cursor:pointer;display:flex;justify-content:space-between;align-items:center;white-space:nowrap;margin-right:.2857142857rem}.pills omni-chip::part(chip){padding:0;background-color:rgba(0,0,0,0)}.pills omni-chip:hover{--color-icon-override: var(--color-gray-0a)}.pills omni-icon{min-width:1.1428571429rem;min-height:1.1428571429rem;margin-right:.2857142857rem;margin-left:1.0714285714rem;font-size:1rem}.pills omni-icon:hover{--color-icon-override: var(--color-primary)}omni-tooltip{margin-left:.4285714286rem}.hint{color:var(--color-electric-blue);white-space:nowrap}`\n\n\ninterface Pill {\n  width: number;\n  option: Option;\n  value: string | number;\n}\n\nexport class OmniPillList extends OmniElement {\n  static get styles() {\n    return [...super.styles, styles];\n  }\n\n  @state() pillList: Pill[] = [];\n  @state() tooltipList: Pill[] = [];\n  @property({ type: Array, attribute: false }) items: Option[] = [];\n  @property({ type: Number }) sliceAt: number = 10;\n  @property({ type: Number }) overflowWidth: number = 300;\n\n  willUpdate(changed: Map<string, unknown>) {\n    if (changed.has('items')) {\n      this.pillList = [];\n      this.tooltipList = [];\n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d');\n      let currTotalPillWidth = 0;\n      this.items\n        .map(option => {\n          const formattedVal = this.format(typeof option === 'object' ? option.value : option);\n          const marginRight = 4;\n          const canvasErrorBuffer = 10;\n          const width = this.#getTextWidth(formattedVal, context) + marginRight + canvasErrorBuffer;\n          return {\n            option: option,\n            value: formattedVal,\n            width: width\n          };\n        })\n        .forEach(option => {\n          currTotalPillWidth += option.width + 32; // 32 is x icon width\n          if (currTotalPillWidth < this.overflowWidth) {\n            this.pillList.push(option);\n          } else {\n            this.tooltipList.push(option);\n          }\n        });\n      canvas.remove();\n    }\n  }\n\n  private format(words: string | number): string | number {\n    if (typeof words === 'string') {\n      return words.slice(0, this.sliceAt) + (words.length > this.sliceAt ? '...' : '');\n    } else {\n      return words;\n    }\n  }\n\n  // pills if not overflowing\n  private get pillsTemplate() {\n    if (!this.pillList.length) return nothing;\n    return html`\n      <section class=\"pills\">\n        ${this.pillList.map(\n          pill => html`\n            <omni-chip action label=${pill.value}>\n              <omni-icon\n                icon-id=\"omni:interactive:remove\"\n                @click=\"${e => {\n                  e.stopPropagation();\n                  this.dispatchNewEvent('remove', { detail: pill.option });\n                }}\">\n              </omni-icon>\n            </omni-chip>\n          `\n        )}\n      </section>\n    `;\n  }\n\n  // items in tooltip not shown in pills\n  private get tooltipTemplate() {\n    if (!this.tooltipList.length) return nothing;\n    return html`\n      <omni-tooltip>\n        <span slot=\"invoker\" part=\"hint\" class=\"hint\">+ ${this.tooltipList.length}</span>\n        <div slot=\"content\">\n          ${this.tooltipList.map(pill => {\n            return html` <p>${this.format(pill.value)}</p> `;\n          })}\n        </div>\n      </omni-tooltip>\n    `;\n  }\n\n  #getTextWidth(text: string | number, context: CanvasRenderingContext2D) {\n    context.font = getComputedStyle(document.documentElement).font;\n    let width = context.measureText(String(text)).width;\n    if (String(text).includes('...')) {\n      // fix for measure text not including ellipses width when at the end\n      width = width + context.measureText('...').width;\n    }\n    return Math.floor(width);\n  }\n\n  // prettier-ignore\n  render() {\n    return html` \n    <div class=\"container\">\n      <div class=\"pills-container\">\n        ${this.pillsTemplate} \n        ${this.tooltipTemplate}\n      </div>\n    </div>\n    `;\n  }\n}\n\nOmniElement.register('omni-pill-list', OmniPillList);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'omni-pill-list': OmniPillList;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
