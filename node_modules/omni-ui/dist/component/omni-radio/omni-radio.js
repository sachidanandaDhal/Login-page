var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { html, nothing } from "lit";
import { property, query, queryAssignedElements } from "lit/decorators.js";
import { classMap } from "lit/directives/class-map.js";
import { ElementInternalsBase } from "../../element-internals-base.js";
import { OmniElement } from "../../omni-element.js";
import { css } from "lit";
const styles = css`:host{--radio-height-width: 1.2857142857rem;--radio-border-width: calc(var(--radio-height-width) / 9);--radio-background: var(--color-almost-black);--radio-background-hover: var(--color-primary);--radio-background-error: var(--color-error);--radio-font-color: var(--color-almost-black);display:flex;flex-direction:column;color:var(--radio-font-color)}:host([haslabel]){--radio-height-width: 0.8571428571rem}:host([dark]){--radio-background: var(--color-white);--radio-background-hover: var(--color-white)}:host([haslabel][dark]) ::slotted(*){color:var(--color-white) !important;opacity:.78}:host(:not([disabled]):hover),:host(:not([disabled]):active),:host(:not([disabled])[hover]){outline:none;cursor:pointer;opacity:.75}:host(:not([disabled]):hover) .radio,:host(:not([disabled]):active) .radio,:host(:not([disabled])[hover]) .radio{border:var(--radio-border-width) solid var(--radio-background-hover)}:host(:not([disabled]):hover) .radio.error,:host(:not([disabled]):active) .radio.error,:host(:not([disabled])[hover]) .radio.error{border:var(--radio-border-width) solid var(--color-error)}:host(:not([disabled]):hover) ::slotted(*){opacity:.75;cursor:pointer}::slotted(*){margin-left:.5714285714rem !important;line-height:1.4285714286rem !important}:host([disabled]:hover),:host([disabled]){cursor:not-allowed;opacity:.5}.container{display:flex;justify-content:flex-start;align-items:center}.radio{box-sizing:border-box;width:var(--radio-height-width);height:var(--radio-height-width);border:var(--radio-border-width) solid var(--radio-background);border-radius:50%;display:flex;justify-content:center;align-items:center}.radio .radio-inner-circle{background:var(--radio-background);border-radius:50%;width:calc(var(--radio-height-width)/2);height:calc(var(--radio-height-width)/2)}.radio.checked{border:var(--radio-border-width) solid var(--radio-background-hover)}.radio.checked .radio-inner-circle{background:var(--radio-background-hover)}.radio.error{border:var(--radio-border-width) solid var(--color-error)}.radio.checked.error{border:var(--radio-border-width) solid var(--color-error)}.radio.checked.error .radio-inner-circle{background:var(--radio-background-error)}.radio.disabled{border:var(--radio-border-width) solid var(--color-shark)}.radio.checked.disabled{border:var(--radio-border-width) solid var(--color-shark)}.radio.checked.disabled .radio-inner-circle{background:var(--color-shark)}.footer-spacer{height:1.8571428571rem;min-height:1.8571428571rem;max-height:1.8571428571rem;flex:0 0 100%}.footer-container{display:flex;flex:0 0 100%;padding:.2857142857rem 0 .2857142857rem .2857142857rem}.footer-container.help-text{justify-content:flex-end;align-items:center}.footer-container.error-text{justify-content:flex-start;align-items:center}.footer-container omni-icon{margin-right:.5714285714rem;--color-icon-lines: var(--color-error)}.footer-container span{font-size:.8571428571rem;font-weight:400;color:var(--color-almost-black)}`;
class OmniRadio extends ElementInternalsBase {
  constructor() {
    super(...arguments);
    this.valueMissingMessage = "Please check this radio button if you want to proceed.";
    this.checked = false;
    this.showfooter = false;
    /**
     * @internal
     */
    this._handleKeyup = (e) => {
      if (e.key === "Enter") {
        this.#toggle();
      }
      if (e.key === "Escape") {
        this.blur();
      }
    };
    this.#toggle = (e = null, toggleTo = !this.checked) => {
      if (this.disabled)
        return;
      this.checked = toggleTo;
      this.#determineValidityAndValue();
      this.dispatchNewEvent("change", { detail: this.checked });
    };
  }
  static get styles() {
    return [...super.styles, styles];
  }
  connectedCallback() {
    super.connectedCallback();
    this.addEventListener("click", this.#toggle);
    this.addEventListener("keyup", this._handleKeyup);
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener("click", this.#toggle);
    this.removeEventListener("keyup", this._handleKeyup);
  }
  async firstUpdated() {
    await this.updateComplete;
    this.#determineValidityAndValue();
  }
  #determineValidityAndValue() {
    this._internals.setValidity({});
    switch (this.checked) {
      case true:
        if (!this.value) {
          this.value = "on";
        }
        if (this.required) {
          this._internals.setValidity({});
          this._internals.setFormValue(this.value);
        } else {
          this._internals.setFormValue(this.value);
        }
        break;
      case false:
      default:
        if (this.required) {
          this._internals.setValidity({ valueMissing: true }, this.valueMissingMessage, this.radioEl);
          this._internals.setFormValue("");
        } else {
          this._internals.setFormValue(null);
        }
        break;
    }
  }
  updated() {
    if (this.slottedElements.length || this._internals.labels.length) {
      this.setAttribute("haslabel", "");
    } else {
      this.removeAttribute("haslabel");
    }
  }
  #toggle;
  get #footerTemplate() {
    if (!this.showfooter)
      return nothing;
    const footerSpacer = html`<div class="footer-spacer"></div>`;
    if (!this.error)
      return footerSpacer;
    if (this.error) {
      return html` <div class="footer-container error-text">
        <omni-icon icon-id="omni:informative:error"></omni-icon>
        <span>${this.error}</span>
      </div>`;
    }
  }
  toggle() {
    this.#toggle();
  }
  check() {
    this.#toggle(null, true);
  }
  uncheck() {
    this.#toggle(null, false);
  }
  render() {
    const innerRadioButtonError = typeof this.error !== "undefined" && this.error !== null;
    const classes = classMap({
      checked: this.checked,
      error: innerRadioButtonError,
      radio: true,
      disabled: this.disabled
    });
    return html`
      <div class="container" part="container">
        <div class=${classes} part="radio">
          ${this.checked ? html`<div class="radio-inner-circle"></div>` : nothing}
        </div>
        <slot></slot>
      </div>
      ${this.#footerTemplate}
    `;
  }
}
__decorateClass([
  property({ type: String })
], OmniRadio.prototype, "valueMissingMessage", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniRadio.prototype, "checked", 2);
__decorateClass([
  property({ type: String, reflect: true })
], OmniRadio.prototype, "error", 2);
__decorateClass([
  property({ type: String, reflect: true })
], OmniRadio.prototype, "name", 2);
__decorateClass([
  property({ type: String, reflect: true })
], OmniRadio.prototype, "value", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniRadio.prototype, "showfooter", 2);
__decorateClass([
  query(".radio")
], OmniRadio.prototype, "radioEl", 2);
__decorateClass([
  queryAssignedElements()
], OmniRadio.prototype, "slottedElements", 2);
OmniElement.register("omni-radio", OmniRadio);
export {
  OmniRadio
};
//# sourceMappingURL=omni-radio.js.map
