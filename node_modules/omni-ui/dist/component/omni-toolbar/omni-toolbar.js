var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { html } from "lit";
import { classMap } from "lit/directives/class-map.js";
import { property, state } from "lit/decorators.js";
import { MoreBar } from "more-bar/index.js";
import { OmniElement } from "../../omni-element.js";
import "../omni-style/omni-style.js";
import "../omni-icon/omni-icon.js";
import "../omni-tooltip/omni-tooltip.js";
import { merge } from "../../omni-util.js";
import { css } from "lit";
const styles = css`:host([nested]) .positioned-wrapper{position:unset}.positioned-wrapper{position:relative;height:100%}.bar{height:100%;display:flex;align-items:center}#toolbar{padding:6px 12px;overflow:hidden;min-height:2.1428571429rem}#center{flex-shrink:50;flex-basis:60%}#center-end{flex-shrink:500;margin-left:auto}#center-end,#end{justify-content:flex-end}.more{position:absolute !important}.more[hidden]{display:none !important}.more .dropdown-menu{left:unset;right:0}.more-menu-slot::slotted([hidden]){display:none !important}.more,.bar>slot::slotted(*){white-space:nowrap;margin:0 calc(var(--omni-toolbar-gap, 12px)/2) !important}[name=start]::slotted(:first-child){margin-left:0 !important}[name=end]::slotted(:last-child){margin-right:0 !important}[name=start]::slotted(.title){margin-right:var(--omni-toolbar-gap, 12px) !important}`;
class OmniToolbarElement extends OmniElement {
  constructor() {
    super();
    this.centerMoreBtnClassMapOverride = {};
    this.__moreBars = /* @__PURE__ */ new Map();
    this.closeMoreItemDropMenus = this.closeMoreItemDropMenus.bind(this);
    this.closeMoreItemDropMenus();
  }
  static get styles() {
    return [...super.styles, styles];
  }
  connectedCallback() {
    super.connectedCallback();
    window.addEventListener("click", this.closeMoreItemDropMenus);
  }
  disconnectedCallback() {
    this.__moreBars.forEach((moreBar) => moreBar.destroy());
    this.__moreBars = /* @__PURE__ */ new Map();
    window.removeEventListener("click", this.closeMoreItemDropMenus);
    super.disconnectedCallback();
  }
  renderMoreItemTmpl(barSectionType) {
    const openPropName = `is${pascalize(barSectionType)}MoreMenuOpen`;
    return html`
      <div
        class=${classMap({
      dropdown: true,
      more: true,
      "is-active": this[openPropName]
    })}
        part="${barSectionType}-more"
        hidden>
        <div class="dropdown-trigger">
          <omni-tooltip relateby="label" place="${this.placement || "top"}">
            <button
              slot="invoker"
              class=${classMap(
      merge(
        {
          button: true,
          "is-text": true,
          "more-item-btn": true,
          "is-active": this[openPropName]
        },
        this[`${barSectionType}MoreBtnClassMapOverride`]
      )
    )}
              part="${barSectionType}-more-btn"
              aria-haspopup="true"
              aria-controls="${barSectionType}-dropdown-menu"
              value=${openPropName}>
              <omni-icon icon-id="omni:interactive:${barSectionType === "center-end" ? "actions" : "more"}"></omni-icon>
            </button>
            <div slot="content">More</div>
          </omni-tooltip>
        </div>
        <div class="dropdown-menu" id="${barSectionType}-dropdown-menu" role="menu">
          <div class="dropdown-content" part="${barSectionType}-more-dropdown-content">
            <slot class="more-menu-slot" name="${barSectionType}-more-menu"></slot>
          </div>
        </div>
      </div>
    `;
  }
  render() {
    return html`
      <omni-style class="positioned-wrapper" part="positioned-wrapper">
        <div
          id="toolbar"
          part="toolbar"
          class="bar"
          @slotchange=${this.__onSlotChange}
          @morebar-item-update=${this.__onMoreBarItemUpdate}
          @click=${this.__onClick}>
          <div id="start" part="start" class="bar">
            <slot name="start" part="start-slot"></slot>
            ${this.renderMoreItemTmpl("start")}
          </div>
          <div id="center" part="center" class="bar">
            <slot part="slot"></slot>
            ${this.renderMoreItemTmpl("center")}
          </div>
          <div id="center-end" part="center-end" class="bar">
            ${this.renderMoreItemTmpl("center-end")}
            <slot name="center-end" part="center-end-slot"></slot>
          </div>
          <div id="end" part="end" class="bar">
            ${this.renderMoreItemTmpl("end")}
            <slot name="end" part="end-slot"></slot>
          </div>
        </div>
      </omni-style>
    `;
  }
  closeMoreItemDropMenus() {
    this.isStartMoreMenuOpen = false;
    this.isCenterMoreMenuOpen = false;
    this.isCenterEndMoreMenuOpen = false;
    this.isEndMoreMenuOpen = false;
  }
  __onSlotChange(e) {
    const slot = e.target;
    const barSection = slot.closest(".bar");
    const isMoreEnabled = isMoreEnabledForBar(barSection);
    const isJustifyEnd = barSection.matches("#end, #center-end");
    let moreBar = this.__moreBars.get(barSection);
    const more = barSection.querySelector(".more");
    if (more)
      more.hidden = !isMoreEnabled;
    if (moreBar && isMoreEnabled) {
      moreBar.init();
    } else if (moreBar && !isMoreEnabled) {
      moreBar.destroy();
      this.__moreBars.delete(barSection);
    } else if (!moreBar && isMoreEnabled) {
      moreBar = new MoreBar(barSection, more, isJustifyEnd);
      setTimeout(() => moreBar.init());
      this.__moreBars.set(barSection, moreBar);
    }
  }
  __onMoreBarItemUpdate({ detail }) {
    this.closeMoreItemDropMenus();
    const moreItems = getMoreItems(detail.moreBar.barEl);
    if (!moreItems?.length)
      return;
    const relatedMoreItem = moreItems[detail.index];
    if (!relatedMoreItem)
      return;
    relatedMoreItem.hidden = detail.type === "show";
    this.dispatchNewEvent("omni-toolbar-change", {
      detail: {
        part: detail.moreBar.barEl.getAttribute("part"),
        item: detail.item,
        index: detail.index,
        type: detail.type
      }
    });
  }
  __onClick(e) {
    const moreItemBtn = eventPathFindTargetMatch(e, ".more-item-btn");
    if (moreItemBtn) {
      const isOpen = this[moreItemBtn.value];
      setTimeout(() => {
        this[moreItemBtn.value] = !isOpen;
      });
    }
    if (eventPathFindTargetMatch(e, ".dropdown-item"))
      return;
    if (eventPathFindTargetMatch(e, ".more .dropdown-menu"))
      e.stopPropagation();
  }
}
__decorateClass([
  state()
], OmniToolbarElement.prototype, "__moreBars", 2);
__decorateClass([
  property({ type: Boolean })
], OmniToolbarElement.prototype, "isStartMoreMenuOpen", 2);
__decorateClass([
  property({ type: Boolean })
], OmniToolbarElement.prototype, "isCenterMoreMenuOpen", 2);
__decorateClass([
  property({ type: Boolean })
], OmniToolbarElement.prototype, "isCenterEndMoreMenuOpen", 2);
__decorateClass([
  property({ type: Boolean })
], OmniToolbarElement.prototype, "isEndMoreMenuOpen", 2);
__decorateClass([
  property({ type: Object, attribute: false })
], OmniToolbarElement.prototype, "centerMoreBtnClassMapOverride", 2);
__decorateClass([
  property()
], OmniToolbarElement.prototype, "placement", 2);
function getMoreItems(bar) {
  return bar?.querySelector(".more-menu-slot")?.assignedElements().filter(
    (el) => !el.matches("[menu-only]")
    // use 'menu-only' attr to skip menu items when indexing
  );
}
function isMoreEnabledForBar(bar) {
  return getMoreItems(bar)?.length > 0;
}
function eventPathFindTargetMatch(event, selector) {
  return event.composedPath().find((target) => target.matches?.(selector));
}
function pascalize(str) {
  return ` ${str}`.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (m, chr) => chr.toUpperCase());
}
OmniElement.register("omni-toolbar", OmniToolbarElement);
export {
  OmniToolbarElement
};
//# sourceMappingURL=omni-toolbar.js.map
