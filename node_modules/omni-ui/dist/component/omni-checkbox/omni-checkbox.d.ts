import { ElementInternalsBase } from '../../element-internals-base.js';
interface CheckboxElement {
    /**
     * in a regular checkbox, the checked attribute does not override the checked property
     * here, we can have both work
     * checked overrides indeterminate
     */
    checked: boolean;
    /**
     * in a regular checkbox, this is not accessible as an attribute.
     * here, we can have both work
     */
    indeterminate: boolean;
    /** check the box */
    check: () => void;
    /** uncheck the box */
    uncheck: () => void;
    /** toggle the check  */
    toggle: () => void;
}
/**
 * To include within your project `import { OmniCheckbox } from 'omni-ui';`
 *
 * @tagname omni-checkbox
 * @attr {boolean} hover - force hover state
 * @attr {boolean} disabled - if the checkbox is disabled or not
 * @attr {boolean} dark - if the checkbox is in dark theme or not
 * @cssprop [--checkbox-height-width=1.2857rem] - set the height and width of the checkbox
 * @cssprop [--checkbox-background=linear-gradient(332deg, var(--color-primary) 0%, var(--color-secondary) 100%)] - background color when checked
 * @cssprop [--checkbox-background-error=linear-gradient(139deg, var(--color-error) 0%, var(--color-error-two) 100%)] - background color when checked and has an error
 * @cssprop [--checkbox-border-width=calc(var(--checkbox-height-width) / 9)] - the width of the checkbox border
 * @cssprop [--checkbox-border-color=var(--color-almost-black)] - the color of the checkbox border
 * @cssprop [--checkbox-border-color-hover=var(--color-primary)] - the border color on hover
 * @cssprop [--checkbox-font-color=var(--color-white)] - the font color of the icon and indetermine bar
 * @slot - label slot for checkbox
 * @event {string} change - fires when the checkbox is checked or unchecked
 */
export declare class OmniCheckbox extends ElementInternalsBase<string> implements CheckboxElement {
    #private;
    static get styles(): import("lit").CSSResult[];
    /**  HTML5 form tooltip custom message */
    valueMissingMessage: string;
    /** if the checkbox is checked or not  */
    checked: boolean;
    /** show the checkbox as indeterminate */
    indeterminate: boolean;
    /** styles the checkbox with an error state when set. must enable showfooter to see error as a message */
    error: string;
    /** name of the checkbox */
    name: string;
    /** can only be set as a string. If other data types are desired, stringify your data and set it to value, then parse on read */
    value: string;
    /** show the footer of the checkbox */
    showfooter: boolean;
    private checkboxEl;
    private slottedElements;
    connectedCallback(): void;
    disconnectedCallback(): void;
    firstUpdated(): Promise<void>;
    updated(): void;
    /** @internal */
    _handleKeyup: (e: KeyboardEvent) => void;
    /** toggle the checkbox programmatically */
    toggle(): void;
    /** check the checkbox programmatically */
    check(): void;
    /** uncheck the checkbox programmatically */
    uncheck(): void;
    render(): import("lit-html").TemplateResult<1>;
}
export {};
//# sourceMappingURL=omni-checkbox.d.ts.map