var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { html, nothing } from "lit";
import { property, query, queryAssignedElements } from "lit/decorators.js";
import { classMap } from "lit/directives/class-map.js";
import { ElementInternalsBase } from "../../element-internals-base.js";
import { OmniElement } from "../../omni-element.js";
import { css } from "lit";
const styles = css`:host{--checkbox-height-width: 1.2857142857rem;--checkbox-background: linear-gradient(332deg, var(--color-primary) 0%, var(--color-secondary) 100%);--checkbox-background-error: linear-gradient(139deg, var(--color-error) 0%, var(--color-error-two) 100%);--checkbox-border-width: calc(var(--checkbox-height-width) / 9);--checkbox-border-color: var(--color-almost-black);--checkbox-border-color-hover: var(--color-primary);--checkbox-font-color: var(--color-white);display:flex;flex-direction:column;color:var(--checkbox-font-color)}:host([haslabel]){--checkbox-height-width: 0.8571428571rem}:host([dark]){--checkbox-background: linear-gradient(135deg, var(--color-white) 0%, #cad2db 100%);--checkbox-border-color: var(--color-white);--checkbox-border-color-hover: var(--color-white);--checkbox-font-color: var(--color-primary)}:host([haslabel][dark]) ::slotted(*){color:var(--color-white) !important;opacity:.78}:host(:not([disabled]):hover),:host(:not([disabled]):active),:host(:not([disabled])[hover]){outline:none;cursor:pointer;opacity:.75}:host(:not([disabled]):hover) .checkbox,:host(:not([disabled]):active) .checkbox,:host(:not([disabled])[hover]) .checkbox{border:var(--checkbox-border-width) solid var(--checkbox-border-color-hover)}:host(:not([disabled]):hover) .checkbox.error,:host(:not([disabled]):active) .checkbox.error,:host(:not([disabled])[hover]) .checkbox.error{border:var(--checkbox-border-width) solid var(--color-error)}:host(:not([disabled]):hover) .checkbox.checked,:host(:not([disabled]):hover) .checkbox.indeterminate,:host(:not([disabled]):active) .checkbox.checked,:host(:not([disabled]):active) .checkbox.indeterminate,:host(:not([disabled])[hover]) .checkbox.checked,:host(:not([disabled])[hover]) .checkbox.indeterminate{border:none}:host(:not([disabled]):hover) ::slotted(*){opacity:.75;cursor:pointer}::slotted(*){margin-left:.5714285714rem !important;line-height:1.4285714286rem !important}:host([disabled]:hover),:host([disabled]){cursor:not-allowed;opacity:.5}:host([disabled]) ::slotted(*){cursor:not-allowed}.container{display:flex;justify-content:flex-start;align-items:center}.checkbox{box-sizing:border-box;width:var(--checkbox-height-width);height:var(--checkbox-height-width);border:var(--checkbox-border-width) solid var(--checkbox-border-color);border-radius:calc(var(--checkbox-height-width)/3);display:flex;justify-content:center;align-items:center}.checkbox.checked,.checkbox.indeterminate{border-width:0;background:var(--checkbox-background)}.checkbox svg{height:calc(var(--checkbox-height-width)*2/3);width:calc(var(--checkbox-height-width)*2.1/3)}.checkbox span{flex-grow:1;background-color:var(--checkbox-font-color);flex:0 0 calc(var(--checkbox-height-width)*2/3);height:var(--checkbox-border-width)}.checkbox.checked.error,.checkbox.indeterminate.error{border:none;background:var(--checkbox-background-error)}.checkbox.error{border:var(--checkbox-border-width) solid var(--color-error)}.checkbox.disabled{border:var(--checkbox-border-width) solid var(--color-shark)}.checkbox.indeterminate.disabled,.checkbox.checked.disabled{border:none}.footer-spacer{height:1.8571428571rem;min-height:1.8571428571rem;max-height:1.8571428571rem;flex:0 0 100%}.footer-container{display:flex;flex:0 0 100%;padding:.2857142857rem 0 .2857142857rem .2857142857rem}.footer-container.help-text{justify-content:flex-end;align-items:center}.footer-container.error-text{justify-content:flex-start;align-items:center}.footer-container omni-icon{margin-right:.5714285714rem;--color-icon-lines: var(--color-error)}.footer-container span{font-size:.8571428571rem;font-weight:400;color:var(--color-almost-black)}`;
class OmniCheckbox extends ElementInternalsBase {
  constructor() {
    super(...arguments);
    this.valueMissingMessage = "Please check this box if you want to proceed.";
    this.checked = false;
    this.indeterminate = false;
    this.showfooter = false;
    this.#checkboxSvg = html`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12 12" fill="none">
    <path
      fill-rule="evenodd"
      clip-rule="evenodd"
      d="M11.7311 1.39861C11.7554 1.4186 11.7776 1.44088 11.7976 1.46512L11.8628 1.54411C12.0457 
      1.7658 12.0457 2.08605 11.8628 2.30774L8.75605 6.07322L7.99565 6.99484L5.55909 9.9479L5.56845 
      9.94168L5.1036 10.5232C5.09356 10.5394 5.08268 10.5552 5.07093 10.5707L4.9986 10.6658C4.82292 10.8969 
      4.49317 10.9418 4.26209 10.7661C4.23711 10.7471 4.21388 10.7259 4.19268 10.7028L2.46007 8.81196L1.98057 
      8.28869L0.157622 6.29928C-0.0366983 6.08722 -0.0531719 5.76708 0.118354 5.53619L0.182641 5.44966C0.346753 
      5.22875 0.658876 5.1827 0.879785 5.34681C0.90515 5.36566 0.928665 5.38687 0.950012 5.41017L2.70014 
      7.3201L3.17963 7.84337L4.56678 9.30656L7.23525 6.07322L7.99565 5.1516L11.0372 1.46512C11.2105 1.25514 11.5212 1.22536 11.7311 1.39861Z"
      fill="currentColor" />
  </svg>`;
    /** @internal */
    this._handleKeyup = (e) => {
      if (e.key === "Enter") {
        this.#toggle();
      }
      if (e.key === "Escape") {
        this.blur();
      }
    };
    this.#toggle = (e = null, toggleTo = !this.checked) => {
      if (this.disabled)
        return;
      this.checked = toggleTo;
      this.#determineValidityAndValue();
      this.dispatchNewEvent("change", { detail: this.checked });
    };
  }
  static get styles() {
    return [...super.styles, styles];
  }
  #checkboxSvg;
  connectedCallback() {
    super.connectedCallback();
    this.addEventListener("click", this.#toggle);
    this.addEventListener("keyup", this._handleKeyup);
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener("click", this.#toggle);
    this.removeEventListener("keyup", this._handleKeyup);
  }
  async firstUpdated() {
    await this.updateComplete;
    this.#determineValidityAndValue();
  }
  #determineValidityAndValue() {
    this._internals.setValidity({});
    switch (this.checked) {
      case true:
        if (!this.value) {
          this.value = "on";
        }
        if (this.indeterminate) {
          this.indeterminate = false;
        }
        if (this.required) {
          this._internals.setValidity({});
          this._internals.setFormValue(this.value);
        } else {
          this._internals.setFormValue(this.value);
        }
        break;
      case false:
      default:
        if (this.required) {
          this._internals.setValidity({ valueMissing: true }, this.valueMissingMessage, this.checkboxEl);
          this._internals.setFormValue("");
        } else {
          this._internals.setFormValue(null);
        }
        break;
    }
  }
  updated() {
    if (this.slottedElements.length || this._internals.labels.length) {
      this.setAttribute("haslabel", "");
    } else {
      this.removeAttribute("haslabel");
    }
  }
  #toggle;
  get #footerTemplate() {
    if (!this.showfooter)
      return nothing;
    const footerSpacer = html`<div class="footer-spacer"></div>`;
    if (!this.error)
      return footerSpacer;
    if (this.error) {
      return html` <div class="footer-container error-text">
        <omni-icon icon-id="omni:informative:error"></omni-icon>
        <span>${this.error}</span>
      </div>`;
    }
  }
  /** toggle the checkbox programmatically */
  toggle() {
    this.#toggle();
  }
  /** check the checkbox programmatically */
  check() {
    this.#toggle(null, true);
  }
  /** uncheck the checkbox programmatically */
  uncheck() {
    this.#toggle(null, false);
  }
  // prettier-ignore
  render() {
    const classes = classMap({
      checked: this.checked && !this.indeterminate,
      indeterminate: this.indeterminate,
      error: typeof this.error !== "undefined" && this.error !== null,
      checkbox: true,
      disabled: this.disabled
    });
    return html`
      <div class="container" part="container">
        <div class=${classes} part="checkbox">
          ${this.checked && !this.indeterminate ? this.#checkboxSvg : nothing}
          ${this.indeterminate ? html`<span></span>` : nothing}
        </div> 
        <slot></slot>
      </div>
      ${this.#footerTemplate}
    `;
  }
}
__decorateClass([
  property({ type: String })
], OmniCheckbox.prototype, "valueMissingMessage", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniCheckbox.prototype, "checked", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniCheckbox.prototype, "indeterminate", 2);
__decorateClass([
  property({ type: String, reflect: true })
], OmniCheckbox.prototype, "error", 2);
__decorateClass([
  property({ type: String, reflect: true })
], OmniCheckbox.prototype, "name", 2);
__decorateClass([
  property({ type: String, reflect: true })
], OmniCheckbox.prototype, "value", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniCheckbox.prototype, "showfooter", 2);
__decorateClass([
  query(".checkbox")
], OmniCheckbox.prototype, "checkboxEl", 2);
__decorateClass([
  queryAssignedElements()
], OmniCheckbox.prototype, "slottedElements", 2);
OmniElement.register("omni-checkbox", OmniCheckbox);
export {
  OmniCheckbox
};
//# sourceMappingURL=omni-checkbox.js.map
