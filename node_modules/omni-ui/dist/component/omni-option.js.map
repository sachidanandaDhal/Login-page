{
  "version": 3,
  "sources": ["../../lib/component/omni-option.js"],
  "sourcesContent": ["/*\n * DO NOT USE this functionality of this file is superceded by\n * omni-options and will be removed in a future release\n */\nimport { html, css } from 'lit';\nimport { OmniFormControl } from '../omni-form-control.js';\n/**\n\t\t* OmniOption emulates a regular <option> HTMLOptionElement\n    @element omni-option\n\t\t* exceptions/differences:\n\t\t- optional label attribute is prepended to slotted content so both are shown\n\t\t- when no value attribute exists .value returns both label and this.textContent\n */\n\nexport class OmniOption extends OmniFormControl {\n  constructor() {\n    super();\n    this._index = 0;\n    this.selected = false;\n    this.indeterminate = false;\n    this.setAttribute('role', 'option');\n    this.tabIndex = -1;\n  }\n\n  updated(changedProperties) {\n    if (changedProperties.has('selected')) {\n      if (Boolean(changedProperties.get('selected')) !== this.selected) {\n        this.dispatchNewEvent('option');\n      }\n    }\n  }\n\n  get index() {\n    return this._index;\n  }\n\n  get value() {\n    const { label, textContent } = this;\n    return this.getAttribute('value') ?? (label ? label + (textContent.length ? ' ' : '') : '') + textContent;\n  }\n\n  set value(value) {\n    this.setAttribute('value', value);\n  }\n\n  get label() {\n    const label = this.getAttribute('label') ?? '';\n    return label;\n  }\n\n  set label(value) {\n    this.requestUpdate('label', this.getAttribute('label'));\n    if (value) {\n      this.setAttribute('label', value);\n    } else {\n      this.removeAttribute('label');\n    }\n  }\n\n  get text() {\n    const { label, textContent } = this;\n    return `${label ? label + ' ' : ''}${textContent}`;\n  }\n\n  static get properties() {\n    return {\n      indeterminate: { type: Boolean, reflect: true },\n      selected: { type: Boolean, reflect: true },\n      defaultSelected: { type: Boolean, reflect: true },\n      _index: { type: Number }\n    };\n  }\n\n  static get styles() {\n    return [\n      css`\n        :host {\n          content-visibility: auto;\n          contain: strict style;\n          display: flex;\n          flex-wrap: nowrap;\n          border: 0;\n          margin: 0.1rem;\n          padding: var(--padding);\n          margin: 0px;\n          font-family: var(--family-sans-serif);\n          color: var(--color);\n          box-sizing: border-box;\n          outline: none;\n          user-select: none;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        :host([optgroup]) {\n          color: var(--color-disabled);\n        }\n        :host(:not([optgroup])) {\n          padding-left: var(--padding-adjust, 0);\n        }\n        :host([optgroup]) omni-icon {\n          display: var(--optgroup-first-icon);\n        }\n        :host(:not([disabled]):hover) {\n          background-color: var(--option-hover, #ddd);\n        }\n        :host([disabled]) {\n          pointer-events: none;\n        }\n        :host(:-internal-direct-focus),\n        :host(:focus-visible),\n        :host(:focus-within),\n        :host(:focus) {\n          outline: none;\n        }\n        omni-icon {\n          contain: strict style;\n          border: 1px solid #333;\n          border-color: var(--icon-border, #333);\n          border-radius: var(--radius-small);\n          background-image: var(--icon-bg, #fff);\n          --color-almost-black: #fff;\n          padding: 0;\n          margin: var(--icon-margin, 0.3em 0.3em 0.1em 0);\n          width: var(--icon-size, 1em);\n          height: var(--icon-size, 1em);\n          min-width: 10px;\n          min-height: 10px;\n          max-width: 1rem;\n          max-height: 1rem;\n        }\n        :host(:not([multiple])) omni-icon {\n          --color-almost-black: var(--icon-color, #111);\n        }\n        :host([indeterminate]) omni-icon {\n          --color-almost-black: #111;\n        }\n        :host([selected]) omni-icon {\n          border-color: var(--icon-border-selected, #333);\n          background-image: var(--icon-bg-selected, #fff);\n        }\n        :host(:not([optgroup]):not([selected])) omni-icon::part(icon) {\n          visibility: hidden;\n        }\n        [part='text'] {\n          max-width: var(--text-max-width, 20em);\n          white-space: var(--text-white-space, inherit);\n        }\n      `\n    ];\n  }\n\n  render() {\n    const { label } = this;\n    return html`<omni-icon icon-id=\"omni:informative:check\"></omni-icon>\n      <div part=\"text\">${label || ''} <slot></slot></div>`;\n  }\n}\n\nOmniOption.register('omni-option', OmniOption);\n"],
  "mappings": "AAIA,SAAS,MAAM,WAAW;AAC1B,SAAS,uBAAuB;AASzB,MAAM,mBAAmB,gBAAgB;AAAA,EAC9C,cAAc;AACZ,UAAM;AACN,SAAK,SAAS;AACd,SAAK,WAAW;AAChB,SAAK,gBAAgB;AACrB,SAAK,aAAa,QAAQ,QAAQ;AAClC,SAAK,WAAW;AAAA,EAClB;AAAA,EAEA,QAAQ,mBAAmB;AACzB,QAAI,kBAAkB,IAAI,UAAU,GAAG;AACrC,UAAI,QAAQ,kBAAkB,IAAI,UAAU,CAAC,MAAM,KAAK,UAAU;AAChE,aAAK,iBAAiB,QAAQ;AAAA,MAChC;AAAA,IACF;AAAA,EACF;AAAA,EAEA,IAAI,QAAQ;AACV,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,QAAQ;AACV,UAAM,EAAE,OAAO,YAAY,IAAI;AAC/B,WAAO,KAAK,aAAa,OAAO,MAAM,QAAQ,SAAS,YAAY,SAAS,MAAM,MAAM,MAAM;AAAA,EAChG;AAAA,EAEA,IAAI,MAAM,OAAO;AACf,SAAK,aAAa,SAAS,KAAK;AAAA,EAClC;AAAA,EAEA,IAAI,QAAQ;AACV,UAAM,QAAQ,KAAK,aAAa,OAAO,KAAK;AAC5C,WAAO;AAAA,EACT;AAAA,EAEA,IAAI,MAAM,OAAO;AACf,SAAK,cAAc,SAAS,KAAK,aAAa,OAAO,CAAC;AACtD,QAAI,OAAO;AACT,WAAK,aAAa,SAAS,KAAK;AAAA,IAClC,OAAO;AACL,WAAK,gBAAgB,OAAO;AAAA,IAC9B;AAAA,EACF;AAAA,EAEA,IAAI,OAAO;AACT,UAAM,EAAE,OAAO,YAAY,IAAI;AAC/B,WAAO,GAAG,QAAQ,QAAQ,MAAM,EAAE,GAAG,WAAW;AAAA,EAClD;AAAA,EAEA,WAAW,aAAa;AACtB,WAAO;AAAA,MACL,eAAe,EAAE,MAAM,SAAS,SAAS,KAAK;AAAA,MAC9C,UAAU,EAAE,MAAM,SAAS,SAAS,KAAK;AAAA,MACzC,iBAAiB,EAAE,MAAM,SAAS,SAAS,KAAK;AAAA,MAChD,QAAQ,EAAE,MAAM,OAAO;AAAA,IACzB;AAAA,EACF;AAAA,EAEA,WAAW,SAAS;AAClB,WAAO;AAAA,MACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA0EF;AAAA,EACF;AAAA,EAEA,SAAS;AACP,UAAM,EAAE,MAAM,IAAI;AAClB,WAAO;AAAA,yBACc,SAAS,EAAE;AAAA,EAClC;AACF;AAEA,WAAW,SAAS,eAAe,UAAU;",
  "names": []
}
