{
  "version": 3,
  "sources": ["../../../lib/component/omni-assist/omni-assist-chat-fullscreen.ts"],
  "sourcesContent": ["import { html, nothing } from 'lit';\nimport { property, query, state } from 'lit/decorators.js';\nimport { OmniElement } from '../../omni-element.js';\nimport type { ChatHistoryItem, ChatSuggestion } from './omni-assist.types.js';\nimport type { OmniTextarea } from '../omni-textarea/omni-textarea.js';\nimport { OMNI_ASSIST_DISCLAIMER } from './omni-assist.shared.js';\nimport '../omni-dot-loader/omni-dot-loader.js';\nimport '../omni-markdown/omni-markdown.js';\nimport '../omni-tooltip/omni-tooltip.js';\nimport './omni-assist-feedback-controls.js';\nimport './omni-assist-truncate-multiline-text.js';\nimport '../omni-icon/omni-icon.js';\n\n\nimport {css} from 'lit';\nconst styles = css`.main-content{height:calc(100vh - 50px - var(--omni-app-layout-header-height, 50px));display:flex;flex-direction:column}.main-content .warning-message{display:flex;justify-content:space-between;align-items:center;padding:1rem;border-bottom:1px solid var(--color-blue-light);text-wrap:pretty}.main-content .warning-message button{margin-left:10px}.welcome-message{display:flex;justify-content:center;align-items:center;text-align:center;height:100%}.history-container{display:flex;flex-direction:column;margin:3rem 11rem}.history-container .user-text{font-size:17px;white-space:pre-wrap;margin-bottom:2rem}.main-content-history{overflow-y:auto;flex-grow:1 !important;scroll-behavior:smooth}.omni hr{background-color:var(--color-gray-e8);margin:1.5rem 0}omni-markdown{--markdown-font-size: 17px}.user-input-clear{font-size:2rem;line-height:2rem;pointer-events:all}.suggestions{padding:0 1rem 1rem;position:relative}.suggestions .suggestions-title{display:flex;justify-content:flex-start;align-items:center;margin-bottom:1rem}.suggestions omni-icon{font-size:1.7142857143rem;--color-icon-lines: #00a1d2;margin-right:1rem}.suggestions p{font-weight:600;font-size:var(--size-2)}.suggestions .suggestions-list-wrapper{display:flex;justify-content:space-between;align-items:center;flex-wrap:wrap}.suggestions .suggestions-list{display:flex;justify-content:flex-start;align-items:center}.suggestions .suggested-prompt{padding:20px;font-size:15px;width:fit-content;margin-right:20px;--radius: 20px;color:var(--blue) !important;background-color:#dceef6 !important}.suggestions .overflow-suggestions-menu{position:absolute;bottom:1rem;left:50%;transform:translateX(-50%);background-color:#fff;display:flex;flex-direction:column;justify-content:flex-start;align-items:stretch;box-shadow:0 1px 10px -3px rgba(1,33,78,.15),0 15px 12px -9px rgba(1,33,78,.18);border-radius:4px}.suggestions .overflow-suggestions-title{display:flex;justify-content:space-between;align-items:center;padding:.25rem}.suggestions .overflow-suggestions-title p{padding-left:1rem;font-size:18px;font-weight:600}.suggestions .overflow-suggestions{display:flex;flex-direction:column;justify-content:flex-start;align-items:flex-start;width:400px;max-height:200px;overflow-y:auto;overflow-x:hidden;padding:.25rem 0}.suggestions .suggested-prompt-in-menu{width:100%;cursor:pointer;padding:.5rem 1rem;border-radius:4px}.suggestions .suggested-prompt-in-menu:hover{background-color:var(--white)}.suggestions .suggested-prompt-in-menu p{font-weight:bold;color:#00a1d2;font-size:1rem}.omni .back-button{position:absolute;top:46px;left:85px}.omni .back-button omni-icon{font-size:32px}.omni-icon-image{color:#00a1d2}.user-interaction-container{display:flex;justify-content:center;align-items:center;padding:.5rem 0}.user-interaction-container .textarea-container{min-width:500px;position:relative;display:flex;background-color:var(--color-white);padding:.5rem;border-radius:4px}.user-interaction-container .textarea-container .assist-avatar-in-textarea{position:absolute;height:18px;width:18px;left:.8571428571rem;top:calc(18px + .5rem - 9px);z-index:1;user-select:none}.user-interaction-container .textarea-container .assist-avatar-in-textarea omni-icon{--color-icon-lines: #00a1d2}.user-interaction-container .textarea-container omni-textarea{flex-grow:1}.user-interaction-container .textarea-container omni-textarea::part(textarea){padding-left:2.1428571429rem;padding-right:2.285rem}.user-interaction-container .textarea-container .clear-button{position:absolute;height:1.4992857143rem;right:6.8571428571rem;top:calc(18px + .5rem - .7496428571rem);user-select:none;pointer-events:all !important;cursor:pointer !important;z-index:auto !important;display:flex;flex-direction:column;justify-content:center;align-items:center}.user-interaction-container .textarea-container .clear-button omni-icon{font-size:1.5rem}.user-interaction-container .textarea-container .clear-button omni-icon::part(icon){max-height:100%}.user-interaction-container .textarea-container .send-button{align-self:flex-end;margin-bottom:calc(1.5rem - 18px);margin-left:.2857142857rem}.user-interaction-container .textarea-container omni-textarea:placeholder-shown~.send-button{display:none}.disclaimer-container{display:flex;justify-content:center;align-items:center}.disclaimer-container p{font-size:.8571428571rem;text-align:center;color:var(--color-almost-black)}`\n\n/**\n * To include within your project `import { OmniAssistChatFullscreen } from 'omni-ui/omni-assist-chat-fullscreen.js';`\n *\n * @tagname omni-assist-chat-fullscreen\n * @csspart main-content - The main content container\n * @csspart history-container - The container for the chat history\n * @csspart suggestions - The container for the suggestions\n * @csspart user-interaction-container - The container for the user interaction\n * @event {ChatSuggestion} submit-chat - fired when user submits chat through click or Enter\n * @event {Feedback} feedback - fired when user upvotes or downvotes chat response\n */\nexport class OmniAssistChatFullscreen extends OmniElement {\n  static get styles() {\n    return [...super.styles, styles];\n  }\n\n  /** use this to check existence of typed text, not for the value of the text. rather, query the element.value for state */\n  @state() private _typedText: string = '';\n  @state() private _isShowingOverflowSuggestions: boolean = false;\n  /** array of prompt suggestions */\n  @property({ type: Array }) suggestions: ChatSuggestion[] = [];\n  /** show the three dot loader and disable the input field */\n  @property({ type: Boolean }) isLoading: boolean = false;\n  /** indicate that streaming is occurring and disable the input field */\n  @property({ type: Boolean }) isStreaming: boolean = false;\n  /** array of chat history items to display */\n  @property({ type: Array }) history: ChatHistoryItem[] = [];\n  /** display available prompt suggestions */\n  @property({ type: Boolean }) showSuggestions: boolean = false;\n  /** display the feedback response controls */\n  @property({ type: Boolean, reflect: true }) unhide: boolean = false;\n  @property({ type: String }) welcomeMessage: string = 'Welcome to Omni Assist, your collaborative AI partner.';\n  /** display the user's name above the user's prompt */\n  @property({ type: String }) username: string;\n  /** @internal */\n  @query('omni-textarea') textarea: OmniTextarea;\n  @query('.main-content-history') private _mainContentScrollableDiv: HTMLDivElement;\n  #assistAvatarTemplate(size: number, cssClasses: string) {\n    return html`\n      <span class=\"omni-icon-image ${cssClasses}\">\n        <omni-icon icon-id=\"omni:brand:omni\" style=\"height: ${size}px; width: ${size}px\"></omni-icon>\n      </span>\n    `;\n  }\n\n  constructor() {\n    super();\n    this.username = window.AN?.sso?.user?.firstName ?? '';\n  }\n\n  updated(changed: Map<string, unknown>) {\n    // scroll down when history changes\n    if (changed.has('history') && this.history.length > 0) {\n      this.#scrollDown();\n    }\n    // scroll down when streaming stops to show suggestions\n    if (changed.has('isStreaming') && !this.isStreaming && this.history.length > 0) {\n      this.#scrollDown();\n    }\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    document.removeEventListener('click', this.#handleClickOutsideSuggestions);\n  }\n\n  #scrollDown() {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    new Promise(res => {\n      setTimeout(res, 20);\n    }).then(() => {\n      this._mainContentScrollableDiv.scrollTop = this._mainContentScrollableDiv.scrollHeight;\n    });\n  }\n\n  get #historyTemplate() {\n    if (this.history?.length === 0) {\n      return html` <div class=\"is-size-2 has-text-shark welcome-message\">${this.welcomeMessage}</div>`;\n    }\n    return html`\n      <div class=\"history-container\" part=\"history-container\">\n        ${this.history.map((item, i) => {\n          switch (item.role) {\n            case 'user':\n              return html`${i > 0 ? html`<hr />` : ''}\n                <h3 class=\"is-size-2 has-text-weight-bold has-text-shark\">\n                  ${this.username ? this.username + ':' : nothing}\n                </h3>\n                <p class=\"user-text\">${item.content}</p>`;\n            case 'assistant':\n              return html`\n                <div>\n                  <h3 class=\"is-size-2 has-text-weight-bold has-text-shark\">Assist:</h3>\n                  <omni-markdown class=\"response-text\" .markdown=${item.content as string}></omni-markdown>\n                  <slot name=\"response-footer\">\n                    <omni-assist-feedback-controls\n                      .response=${item}\n                      .request=${this.history[i - 1]}\n                      ?unhide=${this.unhide}>\n                    </omni-assist-feedback-controls>\n                  </slot>\n                </div>\n              `;\n\n            default:\n              return nothing;\n          }\n        })}\n        ${this.isLoading && !this.isStreaming\n          ? html`\n              <h3 class=\"is-size-2 has-text-weight-bold has-text-shark mb-5\">Assist:</h3>\n              <omni-dot-loader class=\"scroll-target\"></omni-dot-loader>\n            `\n          : ''}\n      </div>\n    `;\n  }\n\n  #handleChat(prompt?: string) {\n    const content = typeof prompt === 'string' ? prompt : this.textarea.value;\n    const trimmedContent = content.trim();\n    if (!trimmedContent) {\n      return;\n    }\n    this.dispatchNewEvent('submit-chat', { detail: content });\n    this.textarea.clear();\n  }\n\n  clearChat() {\n    this.textarea.clear();\n  }\n\n  /** @internal */\n  get showSuggestionsButton() {\n    return this.suggestions?.length && !this.isStreaming && !this.isLoading;\n  }\n\n  #truncatePromptSuggestion(text: string, length: number = 30, ellipses = true) {\n    let [part1, part2] = ['', ''];\n    if (text.length <= length) {\n      part1 = text;\n      part2 = '';\n    }\n    if (ellipses && text.length > length) {\n      part1 = text.slice(0, length) + '\u2026';\n      part2 = text.slice(length);\n    } else {\n      part1 = text.slice(0, length);\n      part2 = text.slice(length);\n    }\n    return [part1, part2];\n  }\n\n  #handleClickOutsideSuggestions = (e: MouseEvent) => {\n    if (!e.composedPath().includes(this.shadowRoot.querySelector('.overflow-suggestions-menu'))) {\n      this.#handleCloseSuggestions();\n    }\n  };\n\n  #handleShowMoreSuggestions(e: MouseEvent) {\n    this._isShowingOverflowSuggestions = true;\n    e.stopPropagation();\n    document.addEventListener('click', this.#handleClickOutsideSuggestions);\n  }\n\n  #handleCloseSuggestions() {\n    this._isShowingOverflowSuggestions = false;\n    document.removeEventListener('click', this.#handleClickOutsideSuggestions);\n  }\n\n  get #suggestionsTemplate() {\n    const firstSuggestions = this.suggestions.length > 2 ? [...this.suggestions].slice(0, 2) : this.suggestions;\n    const secondSuggestions =\n      this.suggestions.length > 2 ? [...this.suggestions].slice(2, this.suggestions.length) : [];\n    return html`\n      <div class=\"suggestions\" part=\"suggestions\">\n        <div class=\"suggestions-title\">\n          <omni-icon icon-id=\"omni:informative:helpPrompt\"></omni-icon>\n          <p>Here are some follow-up questions you may be interested in\u2026</p>\n        </div>\n        <div class=\"suggestions-list-wrapper\">\n          <div class=\"suggestions-list\">\n            ${firstSuggestions.map(suggestion => {\n              const [part1, part2] = this.#truncatePromptSuggestion(suggestion.prompt);\n              return html`\n                  <omni-tooltip ?disabled=${!part2}>\n                        <button\n                        slot=\"invoker\"\n                        class=\"button is-text suggested-prompt\"\n                        @click=${() => {\n                          this.#handleChat(suggestion.prompt);\n                          this.showSuggestions = false;\n                        }}>\n                        ${part1}\n                      </button>\n                      </button>\n                      <div slot=\"content\">${suggestion.prompt}</div>\n                    </omni-tooltip>\n              `;\n            })}\n          </div>\n          ${secondSuggestions.length\n            ? html`\n                <button class=\"button is-outlined is-small\" @click=${this.#handleShowMoreSuggestions}>More</button>\n              `\n            : nothing}\n        </div>\n        ${this._isShowingOverflowSuggestions && secondSuggestions.length\n          ? html`\n              <div class=\"overflow-suggestions-menu\">\n                <div class=\"overflow-suggestions-title\">\n                  <p>Prompt suggestions</p>\n                  <button class=\"button is-text\" @click=${this.#handleCloseSuggestions}>\n                    <omni-icon icon-id=\"omni:interactive:close\"></omni-icon>\n                  </button>\n                </div>\n                <div class=\"overflow-suggestions\">\n                  ${secondSuggestions.map(\n                    sugg =>\n                      html` <div\n                        class=\"suggested-prompt-in-menu\"\n                        @click=${() => {\n                          this.#handleChat(sugg.prompt);\n                          this.showSuggestions = false;\n                          this.#handleCloseSuggestions();\n                        }}>\n                        <p>${sugg.prompt}</p>\n                      </div>`\n                  )}\n                </div>\n              </div>\n            `\n          : nothing}\n      </div>\n    `;\n  }\n\n  /** @internal */\n  get xIconTemplate() {\n    if (!this._typedText?.length) return nothing;\n    return html`\n      <span class=\"clear-button\" @click=${this.clearChat}>\n        <omni-icon icon-id=\"omni:interactive:close\"> </omni-icon>\n      </span>\n    `;\n  }\n\n  // prettier-ignore\n  render() {\n    return html`\n      <omni-style>\n        <div class=\"main-content\" part=\"main-content\">\n          <div class=\"main-content-history is-relative\">\n            ${this.#historyTemplate} \n            ${this.showSuggestions && !this.isStreaming && !this.isLoading\n              ? this.#suggestionsTemplate \n              : nothing}\n          </div>\n\n          <div class=\"user-interaction-container\" part=\"user-interaction-container\">\n            <omni-tooltip class=\"show-suggestions-button ${this.showSuggestionsButton ? '' : 'is-hidden'}\">\n              <button\n                slot=\"invoker\"\n                class=\"button is-text\"\n                @click=${() => {\n                  this.showSuggestions = !this.showSuggestions;\n                  this.#scrollDown();\n                }}>\n                <omni-icon class=\"is-size-1\" icon-id=\"omni:informative:helpPrompt\"></omni-icon>\n              </button>\n              <div slot=\"content\">Prompt suggestions</div>\n            </omni-tooltip>\n            <div class=\"textarea-container\">\n              ${this.#assistAvatarTemplate(18, 'assist-avatar-in-textarea')}\n              <omni-textarea\n                ?disabled=${this.isLoading || this.isStreaming}\n                hidefooter\n                placeholder=\"Do you have any questions? Thoughts?\"\n                rows=\"1\"\n                maxRows=\"6\"\n                @change=${e => (this._typedText = e.target.value)}\n                @keydown=${(e: KeyboardEvent) => {\n                  if (e.key === 'Enter' && !e.shiftKey) {\n                    e.preventDefault();\n                    this.#handleChat();\n                  }\n                }}></omni-textarea>\n              ${this.xIconTemplate}\n\n              <button ?disabled=${this.isLoading || this.isStreaming} class=\"button is-text send-button\" @click=${this.#handleChat}>\n                Send\n              </button>\n            </div>\n          </div>\n          <div class=\"disclaimer-container\" part=\"disclaimer-container\">\n            ${OMNI_ASSIST_DISCLAIMER}\n          </div>\n        </div>\n      </omni-style>\n    `;\n  }\n}\n\nOmniElement.register('omni-assist-chat-fullscreen', OmniAssistChatFullscreen);\n\ndeclare global {\n  interface Window {\n    AN: {\n      sso: {\n        user: {\n          userImage: string;\n          fullName: string;\n          firstName: string;\n        };\n      };\n    };\n  }\n  interface HTMLElementTagNameMap {\n    'omni-assist-chat-fullscreen': OmniAssistChatFullscreen;\n  }\n}\nexport type { ChatHistoryItem, ChatSuggestion };\n"],
  "mappings": "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",
  "names": []
}
