var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { html, nothing } from "lit";
import { property, query, state } from "lit/decorators.js";
import { OmniElement } from "../../omni-element.js";
import { OMNI_ASSIST_DISCLAIMER } from "./omni-assist.shared.js";
import "../omni-dot-loader/omni-dot-loader.js";
import "../omni-markdown/omni-markdown.js";
import "../omni-tooltip/omni-tooltip.js";
import "./omni-assist-feedback-controls.js";
import "./omni-assist-truncate-multiline-text.js";
import "../omni-icon/omni-icon.js";
import { css } from "lit";
const styles = css`.main-content{height:calc(100vh - 50px - var(--omni-app-layout-header-height, 50px));display:flex;flex-direction:column}.main-content .warning-message{display:flex;justify-content:space-between;align-items:center;padding:1rem;border-bottom:1px solid var(--color-blue-light);text-wrap:pretty}.main-content .warning-message button{margin-left:10px}.welcome-message{display:flex;justify-content:center;align-items:center;text-align:center;height:100%}.history-container{display:flex;flex-direction:column;margin:3rem 11rem}.history-container .user-text{font-size:17px;white-space:pre-wrap;margin-bottom:2rem}.main-content-history{overflow-y:auto;flex-grow:1 !important;scroll-behavior:smooth}.omni hr{background-color:var(--color-gray-e8);margin:1.5rem 0}omni-markdown{--markdown-font-size: 17px}.user-input-clear{font-size:2rem;line-height:2rem;pointer-events:all}.suggestions{padding:0 1rem 1rem;position:relative}.suggestions .suggestions-title{display:flex;justify-content:flex-start;align-items:center;margin-bottom:1rem}.suggestions omni-icon{font-size:1.7142857143rem;--color-icon-lines: #00a1d2;margin-right:1rem}.suggestions p{font-weight:600;font-size:var(--size-2)}.suggestions .suggestions-list-wrapper{display:flex;justify-content:space-between;align-items:center;flex-wrap:wrap}.suggestions .suggestions-list{display:flex;justify-content:flex-start;align-items:center}.suggestions .suggested-prompt{padding:20px;font-size:15px;width:fit-content;margin-right:20px;--radius: 20px;color:var(--blue) !important;background-color:#dceef6 !important}.suggestions .overflow-suggestions-menu{position:absolute;bottom:1rem;left:50%;transform:translateX(-50%);background-color:#fff;display:flex;flex-direction:column;justify-content:flex-start;align-items:stretch;box-shadow:0 1px 10px -3px rgba(1,33,78,.15),0 15px 12px -9px rgba(1,33,78,.18);border-radius:4px}.suggestions .overflow-suggestions-title{display:flex;justify-content:space-between;align-items:center;padding:.25rem}.suggestions .overflow-suggestions-title p{padding-left:1rem;font-size:18px;font-weight:600}.suggestions .overflow-suggestions{display:flex;flex-direction:column;justify-content:flex-start;align-items:flex-start;width:400px;max-height:200px;overflow-y:auto;overflow-x:hidden;padding:.25rem 0}.suggestions .suggested-prompt-in-menu{width:100%;cursor:pointer;padding:.5rem 1rem;border-radius:4px}.suggestions .suggested-prompt-in-menu:hover{background-color:var(--white)}.suggestions .suggested-prompt-in-menu p{font-weight:bold;color:#00a1d2;font-size:1rem}.omni .back-button{position:absolute;top:46px;left:85px}.omni .back-button omni-icon{font-size:32px}.omni-icon-image{color:#00a1d2}.user-interaction-container{display:flex;justify-content:center;align-items:center;padding:.5rem 0}.user-interaction-container .textarea-container{min-width:500px;position:relative;display:flex;background-color:var(--color-white);padding:.5rem;border-radius:4px}.user-interaction-container .textarea-container .assist-avatar-in-textarea{position:absolute;height:18px;width:18px;left:.8571428571rem;top:calc(18px + .5rem - 9px);z-index:1;user-select:none}.user-interaction-container .textarea-container .assist-avatar-in-textarea omni-icon{--color-icon-lines: #00a1d2}.user-interaction-container .textarea-container omni-textarea{flex-grow:1}.user-interaction-container .textarea-container omni-textarea::part(textarea){padding-left:2.1428571429rem;padding-right:2.285rem}.user-interaction-container .textarea-container .clear-button{position:absolute;height:1.4992857143rem;right:6.8571428571rem;top:calc(18px + .5rem - .7496428571rem);user-select:none;pointer-events:all !important;cursor:pointer !important;z-index:auto !important;display:flex;flex-direction:column;justify-content:center;align-items:center}.user-interaction-container .textarea-container .clear-button omni-icon{font-size:1.5rem}.user-interaction-container .textarea-container .clear-button omni-icon::part(icon){max-height:100%}.user-interaction-container .textarea-container .send-button{align-self:flex-end;margin-bottom:calc(1.5rem - 18px);margin-left:.2857142857rem}.user-interaction-container .textarea-container omni-textarea:placeholder-shown~.send-button{display:none}.disclaimer-container{display:flex;justify-content:center;align-items:center}.disclaimer-container p{font-size:.8571428571rem;text-align:center;color:var(--color-almost-black)}`;
class OmniAssistChatFullscreen extends OmniElement {
  constructor() {
    super();
    this._typedText = "";
    this._isShowingOverflowSuggestions = false;
    this.suggestions = [];
    this.isLoading = false;
    this.isStreaming = false;
    this.history = [];
    this.showSuggestions = false;
    this.unhide = false;
    this.welcomeMessage = "Welcome to Omni Assist, your collaborative AI partner.";
    this.#handleClickOutsideSuggestions = (e) => {
      if (!e.composedPath().includes(this.shadowRoot.querySelector(".overflow-suggestions-menu"))) {
        this.#handleCloseSuggestions();
      }
    };
    this.username = window.AN?.sso?.user?.firstName ?? "";
  }
  static get styles() {
    return [...super.styles, styles];
  }
  #assistAvatarTemplate(size, cssClasses) {
    return html`
      <span class="omni-icon-image ${cssClasses}">
        <omni-icon icon-id="omni:brand:omni" style="height: ${size}px; width: ${size}px"></omni-icon>
      </span>
    `;
  }
  updated(changed) {
    if (changed.has("history") && this.history.length > 0) {
      this.#scrollDown();
    }
    if (changed.has("isStreaming") && !this.isStreaming && this.history.length > 0) {
      this.#scrollDown();
    }
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    document.removeEventListener("click", this.#handleClickOutsideSuggestions);
  }
  #scrollDown() {
    new Promise((res) => {
      setTimeout(res, 20);
    }).then(() => {
      this._mainContentScrollableDiv.scrollTop = this._mainContentScrollableDiv.scrollHeight;
    });
  }
  get #historyTemplate() {
    if (this.history?.length === 0) {
      return html` <div class="is-size-2 has-text-shark welcome-message">${this.welcomeMessage}</div>`;
    }
    return html`
      <div class="history-container" part="history-container">
        ${this.history.map((item, i) => {
      switch (item.role) {
        case "user":
          return html`${i > 0 ? html`<hr />` : ""}
                <h3 class="is-size-2 has-text-weight-bold has-text-shark">
                  ${this.username ? this.username + ":" : nothing}
                </h3>
                <p class="user-text">${item.content}</p>`;
        case "assistant":
          return html`
                <div>
                  <h3 class="is-size-2 has-text-weight-bold has-text-shark">Assist:</h3>
                  <omni-markdown class="response-text" .markdown=${item.content}></omni-markdown>
                  <slot name="response-footer">
                    <omni-assist-feedback-controls
                      .response=${item}
                      .request=${this.history[i - 1]}
                      ?unhide=${this.unhide}>
                    </omni-assist-feedback-controls>
                  </slot>
                </div>
              `;
        default:
          return nothing;
      }
    })}
        ${this.isLoading && !this.isStreaming ? html`
              <h3 class="is-size-2 has-text-weight-bold has-text-shark mb-5">Assist:</h3>
              <omni-dot-loader class="scroll-target"></omni-dot-loader>
            ` : ""}
      </div>
    `;
  }
  #handleChat(prompt) {
    const content = typeof prompt === "string" ? prompt : this.textarea.value;
    const trimmedContent = content.trim();
    if (!trimmedContent) {
      return;
    }
    this.dispatchNewEvent("submit-chat", { detail: content });
    this.textarea.clear();
  }
  clearChat() {
    this.textarea.clear();
  }
  /** @internal */
  get showSuggestionsButton() {
    return this.suggestions?.length && !this.isStreaming && !this.isLoading;
  }
  #truncatePromptSuggestion(text, length = 30, ellipses = true) {
    let [part1, part2] = ["", ""];
    if (text.length <= length) {
      part1 = text;
      part2 = "";
    }
    if (ellipses && text.length > length) {
      part1 = text.slice(0, length) + "\u2026";
      part2 = text.slice(length);
    } else {
      part1 = text.slice(0, length);
      part2 = text.slice(length);
    }
    return [part1, part2];
  }
  #handleClickOutsideSuggestions;
  #handleShowMoreSuggestions(e) {
    this._isShowingOverflowSuggestions = true;
    e.stopPropagation();
    document.addEventListener("click", this.#handleClickOutsideSuggestions);
  }
  #handleCloseSuggestions() {
    this._isShowingOverflowSuggestions = false;
    document.removeEventListener("click", this.#handleClickOutsideSuggestions);
  }
  get #suggestionsTemplate() {
    const firstSuggestions = this.suggestions.length > 2 ? [...this.suggestions].slice(0, 2) : this.suggestions;
    const secondSuggestions = this.suggestions.length > 2 ? [...this.suggestions].slice(2, this.suggestions.length) : [];
    return html`
      <div class="suggestions" part="suggestions">
        <div class="suggestions-title">
          <omni-icon icon-id="omni:informative:helpPrompt"></omni-icon>
          <p>Here are some follow-up questions you may be interested in…</p>
        </div>
        <div class="suggestions-list-wrapper">
          <div class="suggestions-list">
            ${firstSuggestions.map((suggestion) => {
      const [part1, part2] = this.#truncatePromptSuggestion(suggestion.prompt);
      return html`
                  <omni-tooltip ?disabled=${!part2}>
                        <button
                        slot="invoker"
                        class="button is-text suggested-prompt"
                        @click=${() => {
        this.#handleChat(suggestion.prompt);
        this.showSuggestions = false;
      }}>
                        ${part1}
                      </button>
                      </button>
                      <div slot="content">${suggestion.prompt}</div>
                    </omni-tooltip>
              `;
    })}
          </div>
          ${secondSuggestions.length ? html`
                <button class="button is-outlined is-small" @click=${this.#handleShowMoreSuggestions}>More</button>
              ` : nothing}
        </div>
        ${this._isShowingOverflowSuggestions && secondSuggestions.length ? html`
              <div class="overflow-suggestions-menu">
                <div class="overflow-suggestions-title">
                  <p>Prompt suggestions</p>
                  <button class="button is-text" @click=${this.#handleCloseSuggestions}>
                    <omni-icon icon-id="omni:interactive:close"></omni-icon>
                  </button>
                </div>
                <div class="overflow-suggestions">
                  ${secondSuggestions.map(
      (sugg) => html` <div
                        class="suggested-prompt-in-menu"
                        @click=${() => {
        this.#handleChat(sugg.prompt);
        this.showSuggestions = false;
        this.#handleCloseSuggestions();
      }}>
                        <p>${sugg.prompt}</p>
                      </div>`
    )}
                </div>
              </div>
            ` : nothing}
      </div>
    `;
  }
  /** @internal */
  get xIconTemplate() {
    if (!this._typedText?.length)
      return nothing;
    return html`
      <span class="clear-button" @click=${this.clearChat}>
        <omni-icon icon-id="omni:interactive:close"> </omni-icon>
      </span>
    `;
  }
  // prettier-ignore
  render() {
    return html`
      <omni-style>
        <div class="main-content" part="main-content">
          <div class="main-content-history is-relative">
            ${this.#historyTemplate} 
            ${this.showSuggestions && !this.isStreaming && !this.isLoading ? this.#suggestionsTemplate : nothing}
          </div>

          <div class="user-interaction-container" part="user-interaction-container">
            <omni-tooltip class="show-suggestions-button ${this.showSuggestionsButton ? "" : "is-hidden"}">
              <button
                slot="invoker"
                class="button is-text"
                @click=${() => {
      this.showSuggestions = !this.showSuggestions;
      this.#scrollDown();
    }}>
                <omni-icon class="is-size-1" icon-id="omni:informative:helpPrompt"></omni-icon>
              </button>
              <div slot="content">Prompt suggestions</div>
            </omni-tooltip>
            <div class="textarea-container">
              ${this.#assistAvatarTemplate(18, "assist-avatar-in-textarea")}
              <omni-textarea
                ?disabled=${this.isLoading || this.isStreaming}
                hidefooter
                placeholder="Do you have any questions? Thoughts?"
                rows="1"
                maxRows="6"
                @change=${(e) => this._typedText = e.target.value}
                @keydown=${(e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        this.#handleChat();
      }
    }}></omni-textarea>
              ${this.xIconTemplate}

              <button ?disabled=${this.isLoading || this.isStreaming} class="button is-text send-button" @click=${this.#handleChat}>
                Send
              </button>
            </div>
          </div>
          <div class="disclaimer-container" part="disclaimer-container">
            ${OMNI_ASSIST_DISCLAIMER}
          </div>
        </div>
      </omni-style>
    `;
  }
}
__decorateClass([
  state()
], OmniAssistChatFullscreen.prototype, "_typedText", 2);
__decorateClass([
  state()
], OmniAssistChatFullscreen.prototype, "_isShowingOverflowSuggestions", 2);
__decorateClass([
  property({ type: Array })
], OmniAssistChatFullscreen.prototype, "suggestions", 2);
__decorateClass([
  property({ type: Boolean })
], OmniAssistChatFullscreen.prototype, "isLoading", 2);
__decorateClass([
  property({ type: Boolean })
], OmniAssistChatFullscreen.prototype, "isStreaming", 2);
__decorateClass([
  property({ type: Array })
], OmniAssistChatFullscreen.prototype, "history", 2);
__decorateClass([
  property({ type: Boolean })
], OmniAssistChatFullscreen.prototype, "showSuggestions", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniAssistChatFullscreen.prototype, "unhide", 2);
__decorateClass([
  property({ type: String })
], OmniAssistChatFullscreen.prototype, "welcomeMessage", 2);
__decorateClass([
  property({ type: String })
], OmniAssistChatFullscreen.prototype, "username", 2);
__decorateClass([
  query("omni-textarea")
], OmniAssistChatFullscreen.prototype, "textarea", 2);
__decorateClass([
  query(".main-content-history")
], OmniAssistChatFullscreen.prototype, "_mainContentScrollableDiv", 2);
OmniElement.register("omni-assist-chat-fullscreen", OmniAssistChatFullscreen);
export {
  OmniAssistChatFullscreen
};
//# sourceMappingURL=omni-assist-chat-fullscreen.js.map
