var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { html, nothing } from "lit";
import { property, query, state } from "lit/decorators.js";
import { repeat } from "lit/directives/repeat.js";
import { OmniElement } from "../../omni-element.js";
import { OmniAssistDragController } from "./omni-assist-drag-controller.js";
import "../omni-dot-loader/omni-dot-loader.js";
import "../omni-markdown/omni-markdown.js";
import "./omni-assist-feedback-controls.js";
import "../omni-tooltip/omni-tooltip.js";
import "../omni-icon/omni-icon.js";
import { css } from "lit";
const styles = css`:host{position:fixed;z-index:1000;--offset-left: 40px;--chat-window-min-height: max(60vh, 400px);--chat-window-max-height: calc(100vh - var(--omni-app-layout-header-height) - 2rem);--chat-window-max-width: calc(100vw - calc(80px * 2) - var(--offset-left))}.drag-underlay{position:relative;width:0;height:0;z-index:999}:host([dragging]){cursor:grabbing !important}:host([dragging]) .drag-underlay{position:fixed;height:100%;width:100%;inset:0;background-color:rgba(0,0,0,0)}omni-tile{width:500px;min-height:var(--chat-window-min-height);max-height:var(--chat-window-max-height);box-shadow:rgba(0,0,50,.3) 1px 7px 13px;border-radius:10px;position:absolute}omni-tile.expanded{width:var(--chat-window-max-width);height:var(--chat-window-max-height)}omni-tile::part(body-slot){display:flex;flex-direction:column;justify-content:flex-end;align-items:stretch;padding-bottom:1rem}omni-tile::part(header-slot){border:0 !important}omni-tile.BL{bottom:0;margin-left:70px}omni-tile.TL{top:0;margin-left:70px}omni-tile.BR{bottom:0;right:0;margin-right:70px}omni-tile.TR{top:0;right:0;margin-right:70px}.loading-container{display:flex;justify-content:flex-start;align-items:center}.loading-container .omni-icon-image{margin-right:.75rem;color:#00a1d2}.one-chat-history{margin:1rem 0}.one-chat-history .chat-text-box{padding:10px;box-shadow:rgba(1,33,78,.1) 0 10px 60px -5px;border-radius:10px;background-color:var(--color-white);color:var(--color-almost-black);margin:0 1.0714285714rem}.one-chat-history .chat-text-box omni-markdown{max-width:100%;--markdown-font-size: var(--size-4)}.one-chat-history.assistant{display:flex;flex-wrap:wrap;justify-content:flex-start;align-items:flex-start}.one-chat-history.assistant .chat-text-box{max-width:calc(100% - (25px + 2.1428571429rem))}.one-chat-history.assistant .omni-icon-image{color:#00a1d2}.one-chat-history.user{display:flex;flex-direction:row-reverse;flex-wrap:wrap;justify-content:flex-start;align-items:flex-start}.one-chat-history.user .chat-text-box{max-width:calc(100% - (25px + 2.1428571429rem));display:flex;white-space:pre-wrap}.one-chat-history .chat-timestamp{flex:0 0 100%;color:var(--color-shark);font-size:var(--size-7);padding:.3571428571rem 1.0714285714rem}.one-chat-history.user .chat-timestamp{text-align:right}.small-round-image{background:var(--color-white);width:25px;height:25px;border-radius:13px;box-shadow:rgba(0,0,0,.2) 1px 1px 9px 0;padding:2px}.small-round-image omni-icon{--color-icon-lines: #00a1d2}.small-round-image img{border-radius:21px;height:21px;width:21px}.trigger-icon{position:relative;display:inline-flex;padding:14px;border-radius:28px;background-color:#01a6d8;cursor:pointer;z-index:1001;transition:all 100ms ease-in-out}.trigger-icon omni-icon{--color-icon-lines: white}:host([dragging]) .trigger-icon{cursor:grabbing}:host([isopen]) .trigger-icon{background-color:rgba(207,233,245,.8)}:host([isopen]) .trigger-icon omni-icon{--color-icon-lines: #00a1d2}:host([isopen]) .trigger-icon:hover,.trigger-icon:hover{background-color:var(--color-blue-light);box-shadow:rgba(0,0,0,.2) 1px 1px 9px 0}:host([isopen]) .trigger-icon:hover omni-icon,.trigger-icon:hover omni-icon{--color-icon-lines: #00a1d2}.warning-message{display:flex;justify-content:space-between;align-items:center;padding:1rem;border-top:1px solid var(--color-blue-light);border-bottom:1px solid var(--color-blue-light);text-wrap:balance}.warning-message button{margin-left:10px}omni-tile.expanded>.warning-message{text-wrap:pretty}.chat-box-footer{background-color:rgb(var(--rgb-core-medium-two));border-bottom-left-radius:10px;border-bottom-right-radius:10px;display:flex}.chat-box-footer omni-textarea{flex-grow:1}.chat-box-footer .submit-button{align-self:flex-end;margin:0 0 4px 4px}.disclaimer-container{display:flex;justify-content:center;align-items:center;padding:.25rem 0}.disclaimer-container p{font-size:.7142857143rem;text-align:center;color:var(--color-almost-black)}`;
import { OMNI_ASSIST_DISCLAIMER } from "./omni-assist.shared.js";
class OmniAssistChatCircle extends OmniElement {
  constructor() {
    super(...arguments);
    this.isLoading = false;
    this.isStreaming = false;
    this.history = [];
    this.cornerGravity = true;
    this.expanded = false;
    this.unhide = false;
    this.dragging = false;
    this.offsetLeft = 40;
    this._isWarningMessageDismissed = false;
    this.#dateFormatter = new Intl.DateTimeFormat("en-US", {
      hour: "numeric",
      minute: "numeric",
      hour12: true
    });
    /** handles click events from drag controller, in order to distinguish between clicks and drags  */
    this.#handleDragend = (e) => {
      if (e.detail.isClick) {
        this.isOpen = !this.isOpen;
      }
    };
  }
  static get styles() {
    return [...super.styles, styles];
  }
  #dateFormatter;
  #dragController;
  async connectedCallback() {
    super.connectedCallback();
    this.#dragController = new OmniAssistDragController(this, this.cornerGravity, this.offsetLeft);
    this.style.setProperty("--offset-left", `${this.offsetLeft}px`);
    this.addEventListener("omni-dragend", this.#handleDragend);
  }
  #handleDragend;
  willUpdate(changed) {
    if (changed.has("cornerGravity") && typeof this.cornerGravity !== "undefined") {
      this.#dragController.cornerGravity = this.cornerGravity;
    }
    if (changed.has("offsetLeft")) {
      this.#dragController.offsetLeft = this.offsetLeft;
      this.#dragController.setPosition(null, true);
      this.style.setProperty("--offset-left", `${this.offsetLeft}px`);
    }
  }
  updated(changed) {
    if (changed.has("history") && this.history.length > 0) {
      this.scrollDown();
    }
  }
  async scrollDown() {
    await new Promise((res) => {
      setTimeout(res, 20);
    });
    const elems = this.shadowRoot.querySelectorAll(".scroll-target");
    elems[elems.length - 1]?.scrollIntoView({ behavior: "smooth" });
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener("omni-dragend", this.#handleDragend);
  }
  get #userAvatarTemplate() {
    const userImage = this.userImage ?? window.AN?.sso?.user?.userImage;
    if (!userImage || userImage === "/static/img/shadow.png") {
      return html`
        <div class="small-round-image">
          <svg width="21" height="21" viewbox="0 0 28 28" xmlns="http://www.w3.org/2000/svg">
            <path
              d="M14 28a14 14 0 110-28 14 14 0 010 28zm5.2-10.6c-.3-.7-.6-1.1-1-1.6-.5-.5-1.7-1.1-2.5-.9-.7.2-.7.6-1.7.6s-1-.4-1.7-.6c-.8-.2-2 .4-2.4.9-.5.5-.8.9-1.1 1.6-.2.4-.6 1.5-.3 2s1 .8 2.9 1c1.2.2 2.6.2 2.6.2s1.4 0 2.6-.2c2-.2 2.6-.5 3-1 .2-.5-.2-1.6-.4-2zM14 14.2c1.5 0 3.1-1.8 3.1-3.7A3 3 0 0014 7.3a3 3 0 00-3.1 3.2c0 1.9 1.6 3.7 3.1 3.7z"
              fill="#BCBCCB"
              fill-rule="evenodd"></path>
          </svg>
        </div>
      `;
    }
    return html`<div class="small-round-image">
      <img src="${userImage}" alt="user" height="21" width="21" />
    </div>`;
  }
  #assistAvatarTemplate(size, cssClasses) {
    return html`
      <span class="omni-icon-image ${cssClasses}">
        <omni-icon icon-id="omni:brand:omni" style="height: ${size}px; width: ${size}px"></omni-icon>
      </span>
    `;
  }
  async handleChat() {
    const content = this.textarea.value.trimEnd();
    if (!content)
      return;
    this.dispatchNewEvent("submit-chat", { detail: content });
    this.textarea.clear();
  }
  render() {
    return html`
      <omni-style>
        <div @keyUp=${(e) => e.key === "Enter" && e.target.click()}>
          ${this.#assistAvatarTemplate(28, "trigger-icon")}
        </div>

        <omni-tile
          scroll
          class="${this.isOpen ? "" : "is-hidden"} ${this.#dragController.corner} ${this.expanded ? "expanded" : ""}"
          @pointerdown=${(e) => e.stopPropagation()}>
          <omni-toolbar slot="header" class="p-3">
            <h3 slot="start" class="title is-3"><p>Assist</p></h3>
            <omni-tooltip slot="end">
              <button
                class="button is-text"
                slot="invoker"
                @click=${(e) => {
      this.expanded = !this.expanded;
      e.target.blur();
    }}>
                <omni-icon
                  class="is-size-2"
                  icon-id="omni:interactive:${!this.expanded ? "expand" : "minimize"}"></omni-icon>
              </button>
              <div slot="content">${!this.expanded ? "Expand Chat" : "Minimize Chat"}</div>
            </omni-tooltip>
            <button
              class="button is-text"
              slot="end"
              @click=${() => {
      this.isOpen = false;
    }}>
              <omni-icon class="is-size-1" icon-id="omni:interactive:close"></omni-icon>
            </button>
          </omni-toolbar>
          ${repeat(
      this.history,
      (item, idx) => idx,
      (item, idx) => html`
              <div class="one-chat-history ${item.role} scroll-target">
                ${item.role === "user" ? this.#userAvatarTemplate : this.#assistAvatarTemplate(21, "small-round-image")}
                <div class="chat-text-box is-size-4 ${item.role}">
                  ${item.role === "assistant" ? html`
                        <omni-markdown .markdown=${item.content}></omni-markdown>
                        <slot name="response-footer">
                          <omni-assist-feedback-controls
                            class="is-size-6 pt-5 scroll-target"
                            .response=${item}
                            .request=${this.history[idx - 1]}
                            ?unhide=${this.unhide}>
                          </omni-assist-feedback-controls>
                        </slot>
                      ` : html`<p>${item.content}</p>`}
                </div>
                ${item.timestamp ? html` <div class="chat-timestamp">${this.#dateFormatter.format(new Date(item.timestamp))}</div> ` : nothing}
              </div>
            `
    )}
          ${this.isLoading ? html`
                <div class="loading-container">
                  ${this.#assistAvatarTemplate(21, "small-round-image")}
                  <omni-dot-loader class="is-size-7 scroll-target"></omni-dot-loader>
                </div>
              ` : nothing}
          <div slot="footer" class="p-3 chat-box-footer">
            <omni-textarea
              transparent
              hidefooter
              rows="1"
              maxRows="3"
              ?disabled=${this.isLoading || this.isStreaming}
              placeholder="How can I help you?"
              @keydown=${(e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        this.handleChat();
      }
    }}></omni-textarea>
            <button
              ?disabled=${this.isLoading || this.isStreaming}
              class="button is-text submit-button"
              @click="${() => !this.isLoading && this.handleChat()}">
              <omni-icon class="is-size-2" icon-id="omni:interactive:forward"></omni-icon>
            </button>
          </div>
          <div class="disclaimer-container" slot="footer">${OMNI_ASSIST_DISCLAIMER}</div>
        </omni-tile>
      </omni-style>
      ${this.dragging ? html`<div class="drag-underlay"></div>` : nothing}
    `;
  }
}
__decorateClass([
  property({ type: Boolean })
], OmniAssistChatCircle.prototype, "isLoading", 2);
__decorateClass([
  property({ type: Boolean })
], OmniAssistChatCircle.prototype, "isStreaming", 2);
__decorateClass([
  property({ type: Array })
], OmniAssistChatCircle.prototype, "history", 2);
__decorateClass([
  property({ type: String })
], OmniAssistChatCircle.prototype, "userImage", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniAssistChatCircle.prototype, "isOpen", 2);
__decorateClass([
  property({ type: Boolean })
], OmniAssistChatCircle.prototype, "cornerGravity", 2);
__decorateClass([
  property({ type: Boolean })
], OmniAssistChatCircle.prototype, "expanded", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniAssistChatCircle.prototype, "unhide", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniAssistChatCircle.prototype, "dragging", 2);
__decorateClass([
  property({ type: Number, reflect: true })
], OmniAssistChatCircle.prototype, "offsetLeft", 2);
__decorateClass([
  state()
], OmniAssistChatCircle.prototype, "_isWarningMessageDismissed", 2);
__decorateClass([
  query("omni-textarea")
], OmniAssistChatCircle.prototype, "textarea", 2);
OmniElement.register("omni-assist-chat-circle", OmniAssistChatCircle);
export {
  OmniAssistChatCircle
};
//# sourceMappingURL=omni-assist-chat-circle.js.map
