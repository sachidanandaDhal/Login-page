import { nothing } from 'lit';
import { OmniElement } from '../../omni-element.js';
import type { ChatHistoryItem, ChatSuggestion } from './omni-assist.types.js';
import type { OmniTextarea } from '../omni-textarea/omni-textarea.js';
import '../omni-dot-loader/omni-dot-loader.js';
import '../omni-markdown/omni-markdown.js';
import '../omni-tooltip/omni-tooltip.js';
import './omni-assist-feedback-controls.js';
import './omni-assist-truncate-multiline-text.js';
import '../omni-icon/omni-icon.js';
/**
 * To include within your project `import { OmniAssistChatFullscreen } from 'omni-ui/omni-assist-chat-fullscreen.js';`
 *
 * @tagname omni-assist-chat-fullscreen
 * @csspart main-content - The main content container
 * @csspart history-container - The container for the chat history
 * @csspart suggestions - The container for the suggestions
 * @csspart user-interaction-container - The container for the user interaction
 * @event {ChatSuggestion} submit-chat - fired when user submits chat through click or Enter
 * @event {Feedback} feedback - fired when user upvotes or downvotes chat response
 */
export declare class OmniAssistChatFullscreen extends OmniElement {
    #private;
    static get styles(): import("lit").CSSResult[];
    /** use this to check existence of typed text, not for the value of the text. rather, query the element.value for state */
    private _typedText;
    private _isShowingOverflowSuggestions;
    /** array of prompt suggestions */
    suggestions: ChatSuggestion[];
    /** show the three dot loader and disable the input field */
    isLoading: boolean;
    /** indicate that streaming is occurring and disable the input field */
    isStreaming: boolean;
    /** array of chat history items to display */
    history: ChatHistoryItem[];
    /** display available prompt suggestions */
    showSuggestions: boolean;
    /** display the feedback response controls */
    unhide: boolean;
    welcomeMessage: string;
    /** display the user's name above the user's prompt */
    username: string;
    /** @internal */
    textarea: OmniTextarea;
    private _mainContentScrollableDiv;
    constructor();
    updated(changed: Map<string, unknown>): void;
    disconnectedCallback(): void;
    clearChat(): void;
    /** @internal */
    get showSuggestionsButton(): boolean;
    /** @internal */
    get xIconTemplate(): import("lit-html").TemplateResult<1> | typeof nothing;
    render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface Window {
        AN: {
            sso: {
                user: {
                    userImage: string;
                    fullName: string;
                    firstName: string;
                };
            };
        };
    }
    interface HTMLElementTagNameMap {
        'omni-assist-chat-fullscreen': OmniAssistChatFullscreen;
    }
}
export type { ChatHistoryItem, ChatSuggestion };
//# sourceMappingURL=omni-assist-chat-fullscreen.d.ts.map