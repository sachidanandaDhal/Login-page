{
  "version": 3,
  "sources": ["../../../lib/component/omni-assist/omni-assist-feedback-controls.ts"],
  "sourcesContent": ["import { html, nothing, type TemplateResult } from 'lit';\nimport { property, query, state } from 'lit/decorators.js';\nimport { choose } from 'lit/directives/choose.js';\nimport { when } from 'lit/directives/when.js';\nimport { OmniElement } from '../../omni-element.js';\nimport { OmniIconActions } from '../omni-icon-action/omni-icon-action.js';\nimport '../omni-tooltip/omni-tooltip.js';\nimport '../omni-dialog-element/omni-dialog-element.js';\nimport type { OmniDialogElement } from '../omni-dialog-element/omni-dialog-element.js';\nimport '../omni-style/omni-style.js';\nimport type { ChatHistoryItem, Feedback, Vote } from './omni-assist.types.js';\nimport './omni-assist-feedback-form.js';\nimport type { OmniAssistFeedbackForm } from './omni-assist-feedback-form.js';\n\n\nimport {css} from 'lit';\nconst styles = css`.container{display:flex;justify-content:flex-end;align-items:center;padding-top:1.0714285714rem}.container p{margin-right:1.2857142857rem}.container omni-icon.submitted{--color-icon-lines: var(--color-primary);margin-right:1.2857142857rem;font-size:1rem}`\n\n\nOmniIconActions.register();\n\n/** @element omni-assist-feedback-controls */\nexport class OmniAssistFeedbackControls extends OmniElement {\n  static get styles() {\n    return [...super.styles, styles];\n  }\n\n  @property({ type: Object }) response: ChatHistoryItem;\n  @property({ type: Object }) request: ChatHistoryItem;\n  @property({ type: String }) msg: string = '';\n  @property({ type: Boolean, reflect: true }) opened: boolean = false;\n  // feature flag for feedback controls\n  @property({ type: Boolean, reflect: true }) unhide: boolean = false;\n  @state() submitted: Vote;\n  @query('omni-dialog') dialogEl: OmniDialogElement;\n  @query('omni-assist-feedback-form') feedbackFormEl: OmniAssistFeedbackForm;\n\n  async #handleCopy(): Promise<void> {\n    await navigator.clipboard.writeText(this.response.content as string);\n    this.msg = 'Your content has been copied to your clipboard';\n    this.dialogEl.openModal();\n  }\n\n  /* eslint-disable camelcase -- submitted Feedback data has keys that are camelcased */\n  #emitUpVote(): void {\n    this.submitted = 'upvote';\n    this.dispatchNewEvent('feedback', {\n      detail: {\n        fsl_type: 'upvote',\n        prompt: this.request?.content ?? 'Response not prompted by a user request',\n        correct_completion: this.response.content\n      }\n    });\n    this.msg = 'Your feedback has been submitted. Thank you.';\n    this.dialogEl.openModal();\n    return;\n  }\n\n  #handleDownVote() {\n    this.feedbackFormEl.showModal();\n    this.opened = true;\n  }\n\n  #handleFormFeedback(e: CustomEvent<Partial<Feedback>>): void {\n    this.submitted = 'downvote';\n    const { detail } = e;\n    this.dispatchNewEvent('feedback', {\n      detail: {\n        fsl_type: 'downvote',\n        prompt: this.request?.content ?? 'Response not prompted by a user request',\n        incorrect_completion: this.response.content,\n        user_comment: detail.user_comment,\n        reason: detail.reason\n      }\n    });\n    this.msg = 'Your feedback has been submitted. Thank you.';\n    this.dialogEl.openModal();\n    return;\n  }\n  /* eslint-enable camelcase */\n\n  #handleClose(): void {\n    this.opened = false;\n  }\n\n  get #templateResponses(): TemplateResult {\n    return html`\n      <p class=\"has-text-bold has-text-shark\">Was this helpful?</p>\n      <omni-icon-action icon-id=\"omni:interactive:thumbsUp\" message=\"Helpful response\" @click=${this.#emitUpVote}>\n      </omni-icon-action>\n      <omni-icon-action\n        icon-id=\"omni:interactive:thumbsDown\"\n        message=\"Unhelpful response\"\n        @click=${this.#handleDownVote}\n        ?active=${this.opened}>\n      </omni-icon-action>\n    `;\n  }\n\n  get #templateCopy(): TemplateResult {\n    return html`\n      <omni-icon-action icon-id=\"omni:interactive:copy\" message=\"Copy response\" @click=${this.#handleCopy}>\n      </omni-icon-action>\n    `;\n  }\n\n  render() {\n    return html`\n      <omni-style>\n        <div class=\"container\">\n          ${this.unhide\n            ? when(\n                !this.submitted,\n                () => this.#templateResponses,\n                () =>\n                  choose(this.submitted, [\n                    [\n                      'upvote',\n                      () => html`<omni-icon class=\"submitted\" icon-id=\"omni:interactive:thumbsUp\"></omni-icon>`\n                    ],\n                    [\n                      'downvote',\n                      () => html`<omni-icon class=\"submitted\" icon-id=\"omni:interactive:thumbsDown\"></omni-icon>`\n                    ]\n                  ])\n              )\n            : nothing}\n          ${this.#templateCopy}\n        </div>\n        <omni-assist-feedback-form\n          @feedback=${this.#handleFormFeedback}\n          @close=${this.#handleClose}></omni-assist-feedback-form>\n        <omni-dialog modalType=\"toast\" modalStyle=\"success\">\n          <p slot=\"content\">${this.msg}</p>\n        </omni-dialog>\n      </omni-style>\n    `;\n  }\n}\n\nOmniElement.register('omni-assist-feedback-controls', OmniAssistFeedbackControls);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'omni-assist-feedback-controls': OmniAssistFeedbackControls;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
