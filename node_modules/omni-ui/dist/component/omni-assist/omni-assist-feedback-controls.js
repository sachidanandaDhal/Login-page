var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { html, nothing } from "lit";
import { property, query, state } from "lit/decorators.js";
import { choose } from "lit/directives/choose.js";
import { when } from "lit/directives/when.js";
import { OmniElement } from "../../omni-element.js";
import { OmniIconActions } from "../omni-icon-action/omni-icon-action.js";
import "../omni-tooltip/omni-tooltip.js";
import "../omni-dialog-element/omni-dialog-element.js";
import "../omni-style/omni-style.js";
import "./omni-assist-feedback-form.js";
import { css } from "lit";
const styles = css`.container{display:flex;justify-content:flex-end;align-items:center;padding-top:1.0714285714rem}.container p{margin-right:1.2857142857rem}.container omni-icon.submitted{--color-icon-lines: var(--color-primary);margin-right:1.2857142857rem;font-size:1rem}`;
OmniIconActions.register();
class OmniAssistFeedbackControls extends OmniElement {
  constructor() {
    super(...arguments);
    this.msg = "";
    this.opened = false;
    this.unhide = false;
  }
  static get styles() {
    return [...super.styles, styles];
  }
  async #handleCopy() {
    await navigator.clipboard.writeText(this.response.content);
    this.msg = "Your content has been copied to your clipboard";
    this.dialogEl.openModal();
  }
  /* eslint-disable camelcase -- submitted Feedback data has keys that are camelcased */
  #emitUpVote() {
    this.submitted = "upvote";
    this.dispatchNewEvent("feedback", {
      detail: {
        fsl_type: "upvote",
        prompt: this.request?.content ?? "Response not prompted by a user request",
        correct_completion: this.response.content
      }
    });
    this.msg = "Your feedback has been submitted. Thank you.";
    this.dialogEl.openModal();
    return;
  }
  #handleDownVote() {
    this.feedbackFormEl.showModal();
    this.opened = true;
  }
  #handleFormFeedback(e) {
    this.submitted = "downvote";
    const { detail } = e;
    this.dispatchNewEvent("feedback", {
      detail: {
        fsl_type: "downvote",
        prompt: this.request?.content ?? "Response not prompted by a user request",
        incorrect_completion: this.response.content,
        user_comment: detail.user_comment,
        reason: detail.reason
      }
    });
    this.msg = "Your feedback has been submitted. Thank you.";
    this.dialogEl.openModal();
    return;
  }
  /* eslint-enable camelcase */
  #handleClose() {
    this.opened = false;
  }
  get #templateResponses() {
    return html`
      <p class="has-text-bold has-text-shark">Was this helpful?</p>
      <omni-icon-action icon-id="omni:interactive:thumbsUp" message="Helpful response" @click=${this.#emitUpVote}>
      </omni-icon-action>
      <omni-icon-action
        icon-id="omni:interactive:thumbsDown"
        message="Unhelpful response"
        @click=${this.#handleDownVote}
        ?active=${this.opened}>
      </omni-icon-action>
    `;
  }
  get #templateCopy() {
    return html`
      <omni-icon-action icon-id="omni:interactive:copy" message="Copy response" @click=${this.#handleCopy}>
      </omni-icon-action>
    `;
  }
  render() {
    return html`
      <omni-style>
        <div class="container">
          ${this.unhide ? when(
      !this.submitted,
      () => this.#templateResponses,
      () => choose(this.submitted, [
        [
          "upvote",
          () => html`<omni-icon class="submitted" icon-id="omni:interactive:thumbsUp"></omni-icon>`
        ],
        [
          "downvote",
          () => html`<omni-icon class="submitted" icon-id="omni:interactive:thumbsDown"></omni-icon>`
        ]
      ])
    ) : nothing}
          ${this.#templateCopy}
        </div>
        <omni-assist-feedback-form
          @feedback=${this.#handleFormFeedback}
          @close=${this.#handleClose}></omni-assist-feedback-form>
        <omni-dialog modalType="toast" modalStyle="success">
          <p slot="content">${this.msg}</p>
        </omni-dialog>
      </omni-style>
    `;
  }
}
__decorateClass([
  property({ type: Object })
], OmniAssistFeedbackControls.prototype, "response", 2);
__decorateClass([
  property({ type: Object })
], OmniAssistFeedbackControls.prototype, "request", 2);
__decorateClass([
  property({ type: String })
], OmniAssistFeedbackControls.prototype, "msg", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniAssistFeedbackControls.prototype, "opened", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniAssistFeedbackControls.prototype, "unhide", 2);
__decorateClass([
  state()
], OmniAssistFeedbackControls.prototype, "submitted", 2);
__decorateClass([
  query("omni-dialog")
], OmniAssistFeedbackControls.prototype, "dialogEl", 2);
__decorateClass([
  query("omni-assist-feedback-form")
], OmniAssistFeedbackControls.prototype, "feedbackFormEl", 2);
OmniElement.register("omni-assist-feedback-controls", OmniAssistFeedbackControls);
export {
  OmniAssistFeedbackControls
};
//# sourceMappingURL=omni-assist-feedback-controls.js.map
