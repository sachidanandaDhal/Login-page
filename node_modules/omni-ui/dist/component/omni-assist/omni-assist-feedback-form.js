var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { html } from "lit";
import { query } from "lit/decorators.js";
import { OmniElement } from "../../omni-element.js";
import "../omni-dialog-box/omni-dialog-box.js";
import "../omni-dropdown/omni-dropdown.js";
import "../omni-style/omni-style.js";
import "../omni-textarea/omni-textarea.js";
import "../omni-tile/omni-tile.js";
import "../omni-toolbar/omni-toolbar.js";
import { css } from "lit";
const styles = css`omni-dialog-box{--dialog-background-color: #fcfdff}omni-dialog-box::part(dialog){box-shadow:var(--dialog-box-shadow)}omni-tile{height:auto;min-height:400px;overflow:auto;width:500px}omni-tile::part(header-slot){border-bottom:none}omni-tile::part(footer-slot){margin-bottom:1.0714285714rem}omni-dropdown{width:100%}`;
const reasons = [
  { id: "incorrect", value: "Factually incorrect" },
  { id: "missing", value: "Missing information" },
  { id: "misleading", value: "Misleading" },
  { id: "inappropriate", value: "Inappropriate" },
  { id: "long", value: "Too long" },
  { id: "short", value: "Too short" }
];
class OmniAssistFeedbackForm extends OmniElement {
  static get styles() {
    return [...super.styles, styles];
  }
  showModal() {
    this.dialogEl.showModal();
    this.dropdownEl.reset();
    this.textareaEl.value = "";
  }
  close() {
    this.dialogEl.close();
  }
  #handleFormSubmit() {
    if (!this.dropdownEl.valid) {
      this.dropdownEl.error = "Please select at least one reason";
    }
    if (!this.textareaEl.valid) {
      this.textareaEl.error = "Please provide some feedback";
    }
    if (this.dropdownEl.valid && this.textareaEl.valid) {
      const data = {
        // eslint-disable-next-line camelcase -- submitted Feedback data has keys that are camelcased
        user_comment: this.textareaEl.value,
        reason: this.dropdownEl.value
      };
      this.dispatchNewEvent("feedback", { detail: data });
      this.close();
    }
  }
  render() {
    return html`
      <omni-style>
        <omni-dialog-box>
          <omni-tile slot="content">
            <omni-toolbar slot="header">
              <omni-tooltip slot="end">
                <button slot="invoker" class="button is-text is-shadowless" @click=${this.close}>
                  <omni-icon icon-id="omni:interactive:close"></omni-icon>
                </button>
              </omni-tooltip>
            </omni-toolbar>
            <div>
              <omni-dropdown
                multiselect
                .options=${reasons}
                label="What was not helpful?"
                placeholder="Select all that apply"
                required>
              </omni-dropdown>
              <omni-textarea
                rows="5"
                maxRows="10"
                label="Please add some details for context"
                placeholder="Enter feedback"
                resize></omni-textarea>
            </div>
            <omni-toolbar slot="footer">
              <button slot="end" class="button is-primary" tabindex="0" @click=${this.#handleFormSubmit}>Submit</button>
            </omni-toolbar>
          </omni-tile>
        </omni-dialog-box>
      </omni-style>
    `;
  }
}
__decorateClass([
  query("omni-dialog-box")
], OmniAssistFeedbackForm.prototype, "dialogEl", 2);
__decorateClass([
  query("omni-dropdown")
], OmniAssistFeedbackForm.prototype, "dropdownEl", 2);
__decorateClass([
  query("omni-textarea")
], OmniAssistFeedbackForm.prototype, "textareaEl", 2);
OmniElement.register("omni-assist-feedback-form", OmniAssistFeedbackForm);
export {
  OmniAssistFeedbackForm
};
//# sourceMappingURL=omni-assist-feedback-form.js.map
