{
  "version": 3,
  "sources": ["../../../lib/component/omni-assist/omni-assist-with-plugins.ts"],
  "sourcesContent": ["import { html, nothing } from 'lit';\nimport { property, query, state } from 'lit/decorators.js';\nimport { OmniElement } from '../../omni-element.js';\nimport { OmniAssistDragController } from './omni-assist-drag-controller.js';\nimport {\n  AI_CHAT_MESSAGE_ICON_SVG,\n  AI_CHAT_PLUGIN_L_AND_D_SVG,\n  AI_CHAT_PLUGIN_BOXES_SVG,\n  OMNI_ASSIST_DISCLAIMER,\n  userAvatarTemplate\n} from './omni-assist.shared.js';\nimport { choose } from 'lit/directives/choose.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { when } from 'lit/directives/when.js';\nimport { repeat } from 'lit/directives/repeat.js';\n\nimport '../omni-dot-loader/omni-dot-loader.js';\nimport '../omni-markdown/omni-markdown.js';\nimport './omni-assist-feedback-controls.js';\nimport '../omni-tooltip/omni-tooltip.js';\n\nimport type { ChatHistoryItem, ChatPlugin, ChatSuggestion } from './omni-assist.types.js';\nimport type { OmniTileElement } from '../omni-tile/omni-tile.js';\nimport type { OmniTextarea } from '../omni-textarea/omni-textarea.js';\n\nimport {css} from 'lit';\nconst styles = css`:host{position:fixed;z-index:1000;--offset-left: 40px;--chat-window-min-height: max(60vh, 400px);--chat-window-max-height: calc(100vh - var(--omni-app-layout-header-height) - 2rem);--chat-window-max-width: calc(100vw - calc(80px * 2) - var(--offset-left));--chat-icon-color: var(--color-almost-black)}.drag-underlay{position:relative;width:0;height:0;z-index:999}.chat-circle{display:flex;flex-direction:column;justify-content:center;align-items:center;height:4rem;width:4rem;border-radius:2rem;color:#fff;background-color:#00a1d2;cursor:pointer;z-index:1001;transition:all 100ms ease-in-out}.chat-circle omni-icon{width:1.8571428571rem;height:1.8571428571rem;aspect-ratio:1/1;--color-icon-lines: white}:host([dragging]){cursor:grabbing !important}:host([dragging]) .drag-underlay{position:fixed;height:100%;width:100%;inset:0;background-color:rgba(0,0,0,0)}:host([dragging]) .chat-circle{cursor:grabbing}:host([opened]) .chat-circle{background-color:rgba(207,233,245,.8)}:host([opened]) .chat-circle omni-icon{--color-icon-lines: #00a1d2}.chat-circle:hover,:host([opened]) .chat-circle:hover{background-color:#d1f4ff;box-shadow:0 24px 31px -6px rgba(59,62,63,.35)}.chat-circle:hover omni-icon,:host([opened]) .chat-circle:hover omni-icon{--color-icon-lines: #00a1d2}@keyframes scale-in{0%{transform:scale(0);opacity:0}100%{transform:scale(1);opacity:1}}omni-tile{position:absolute;min-height:var(--chat-window-min-height);max-height:var(--chat-window-max-height);box-shadow:rgba(0,0,50,.3) 1px 7px 13px;border-radius:.5714285714rem}omni-tile.closed{display:none}omni-tile.opened{height:80vh;width:800px;opacity:1}omni-tile.expanded{width:var(--chat-window-max-width);height:var(--chat-window-max-height)}omni-tile.BL{bottom:0;margin-left:70px;transform-origin:bottom left}omni-tile.TL{top:0;margin-left:70px;transform-origin:top left}omni-tile.BR{bottom:0;right:0;margin-right:70px;transform-origin:bottom right}omni-tile.TR{top:0;right:0;margin-right:70px;transform-origin:top right}omni-tile::part(body-slot){background-color:#fff;padding:0;display:flex}omni-tile::part(body-scroller){flex:0 0 1;max-height:100%;border-bottom-left-radius:.7142857143rem;border-bottom-right-radius:.7142857143rem}.header{padding:1rem 1rem .2857142857rem;display:flex;justify-content:space-between;align-items:center}.header .assist-title{display:flex;flex-direction:column}.header .assist-title span{color:var(--color-almost-black);font-size:1.1428571429rem;font-style:normal;font-weight:600;line-height:1.1428571429rem;letter-spacing:.0026428571rem}.header .active-plugin{display:flex;justify-content:flex-start;align-items:center;height:2.2857142857rem}.header .active-plugin svg{height:1rem;width:1rem;--chat-icon-color: var(--color-almost-black)}.header .active-plugin span{margin-left:.5rem;color:var(--color-almost-black);font-size:.7857142857rem;font-style:normal;font-weight:600;line-height:.8571428571rem;letter-spacing:.0024285714rem}.header .active-plugin .icon-buttons{display:flex;justify-content:flex-end;align-items:center;--chat-icon-color: var(--color-almost-black)}.history-container,.plugin-container{padding:0 4.2857142857rem}.history-container{position:relative;display:flex;flex-direction:column;justify-content:flex-end;align-items:stretch;padding-bottom:1rem;width:100%;max-width:100%;background-color:#fff}.history-container.has-content{background-color:#f6f8fc}.one-chat-history{display:flex;flex-direction:column;justify-content:flex-start;align-items:stretch;margin:.7142857143rem 0}.one-chat-history .avatar-and-chat-text.assistant{display:flex;justify-content:flex-start;align-items:flex-start}.one-chat-history .avatar-and-chat-text.user{display:flex;flex-direction:row-reverse;justify-content:flex-start;align-items:flex-start}.one-chat-history .avatar-and-chat-text omni-icon{width:1.7142857143rem;height:1.7142857143rem;aspect-ratio:1/1;--color-icon-lines: #00a1d2}.one-chat-history .avatar-and-chat-text .chat-text-container{padding:.7142857143rem;max-width:calc(100% - 3.1428571429rem);box-shadow:rgba(1,33,78,.1) 0 10px 60px -5px;border-radius:10px;background-color:var(--color-white);color:var(--color-almost-black);margin:0 1.0714285714rem}.one-chat-history .avatar-and-chat-text .chat-text-container omni-markdown{max-width:100%;--markdown-font-size: var(--size-4)}.one-chat-history .avatar-and-chat-text .chat-text-container.user p{white-space:pre-wrap;margin:0;padding:0}.one-chat-history .chat-timestamp{color:#686a6c;padding:.2857142857rem 0 0 0;font-size:.8571428571rem;font-style:normal;font-weight:400;line-height:1.1428571429rem;letter-spacing:.0022857143rem}.one-chat-history .chat-timestamp.user{align-self:flex-end;margin-right:3.1428571429rem}.one-chat-history .chat-timestamp.assistant{align-self:flex-start;margin-left:3.1428571429rem}.one-chat-history:last-child{margin-bottom:0}.loading-container{display:flex;justify-content:flex-start;align-items:center;padding:0 0 1rem 0}.loading-container omni-icon{width:1.7142857143rem;height:1.7142857143rem;aspect-ratio:1/1;--color-icon-lines: #00a1d2;margin-right:.5rem}.loading-container omni-dot-loader{font-size:10px}.more-button-container{position:sticky;bottom:1.4285714286rem;align-self:center}.more-button-container .white-background{background-color:#fff;border-radius:.5714285714rem}.omni button.button.is-oulined{background-color:#fff}.suggestions{display:flex;flex-wrap:wrap;justify-content:flex-start;align-items:flex-start;padding:1.7142857143rem 1.7142857143rem .7142857143rem 1.7142857143rem;max-width:800px;margin:0 auto}.suggestions .suggestion{display:flex;flex-direction:column;justify-content:flex-start;align-items:flex-start;flex:0 0 calc(50% - 2*0.5714285714rem);height:4.2857142857rem;padding:.5714285714rem 1.1428571429rem;border-radius:.7142857143rem;border:1px solid #edf0f5;background:#fff;margin-bottom:1rem}.suggestions .suggestion:nth-child(odd){margin-right:1.1428571429rem}.suggestions .suggestion:hover{cursor:pointer;border-radius:10px;background:#f5f8fb}.suggestions .suggestion h3{margin:0;padding:0;color:#3b3e3f;font-size:.9285714286rem;font-style:normal;font-weight:600;line-height:1.2857142857rem;letter-spacing:.0027142857rem}.suggestions .suggestion p{margin:0;padding:0;color:rgba(59,62,63,.6);font-size:.8571428571rem;font-style:normal;font-weight:400;line-height:1.1428571429rem;letter-spacing:.0022857143rem;display:-webkit-box;-webkit-line-clamp:1;-webkit-box-orient:vertical;overflow:hidden}.textarea-container{display:flex;justify-content:center;align-items:center;background-color:#f1f5fa;padding:.5714285714rem 1.4285714286rem}.textarea-container omni-textarea{margin:0 1.4285714286rem 0 0;flex-grow:1}.disclaimer-container{display:flex;justify-content:center;align-items:center}.disclaimer-container p{color:#686a6c;text-align:center;font-size:.8571428571rem;font-style:normal;font-weight:400;line-height:1.1428571429rem;letter-spacing:.0022857143rem;margin:.7142857143rem 0}.plugin-view,.confirm-view{flex-grow:1;display:flex;flex-direction:column;justify-content:center;align-items:stretch;background-color:#fff;padding:1.4285714286rem;max-width:800px;margin:0 auto}.plugin-header{flex:0 0 15rem;display:flex;flex-direction:column;justify-content:center;align-items:flex-start}.plugin-header h3{margin:0 0 .2857142857rem 0;padding:0;color:var(--color-almost-black);font-size:1rem;font-style:normal;font-weight:400;line-height:1.5714285714rem;letter-spacing:.0030714286rem}.plugin-header p{margin:0;padding:0;color:#686a6c;font-size:1rem;font-style:normal;font-weight:400;line-height:1.5714285714rem;letter-spacing:.0030714286rem}.plugins{display:flex;justify-content:center;align-items:flex-start;flex-grow:1}.plugin{position:relative;display:flex;justify-content:flex-start;align-items:center;border-radius:.7142857143rem;border:1px solid var(--color-pale-grey-three);padding:1.7142857143rem 1.4285714286rem;margin:0 .7142857143rem}.plugin:hover:not(.active),.plugin:focus:not(.active),.plugin:active:not(.active),.plugin.staged{box-shadow:none;cursor:pointer;background:#fff;outline:2px solid var(--color-electric-blue-between);border:1px solid rgba(0,0,0,0)}.plugin:hover:not(.active){box-shadow:0 .2857142857rem .4285714286rem 0 rgba(17,155,235,.2509803922)}.plugin.active{background:var(--table-background-color)}.plugin .icon{height:4.4285714286rem;aspect-ratio:1/1;border-radius:.7142857143rem;display:flex;justify-content:center;align-items:center;margin-right:1.4285714286rem;border:.2857142857rem solid #fff;background:var(--gradient-primary);box-shadow:0 4px 6px 0 rgba(59,62,63,.1)}.plugin .icon svg{height:2.2857142857rem;width:2.2857142857rem;--chat-icon-color: white}.plugin .info{display:flex;flex-direction:column}.plugin .info h3{margin:0 0 .2857142857rem 0;padding:0;color:var(--color-almost-black);font-size:.9285714286rem;font-style:normal;font-weight:600;line-height:1.2857142857rem;letter-spacing:.0027142857rem}.plugin .info p{margin:0;padding:0;color:rgba(59,62,63,.5);font-size:.8571428571rem;font-style:normal;font-weight:400;line-height:1.1428571429rem;letter-spacing:.0022857143rem}.plugin omni-radio{position:absolute;top:.8571428571rem;right:.8571428571rem;--radio-height-width: 0.8571428571rem;pointer-events:none;min-height:1.4285714286rem;display:flex;justify-content:center;align-items:center}.plugin:hover omni-radio{--radio-background: var(--color-primary)}.plugin omni-radio label{color:var(--color-primary)}.plugin span.active-label{position:absolute;top:.8571428571rem;right:.8571428571rem;color:#adb0b3;font-size:1rem;font-style:normal;font-weight:600;line-height:1.4285714286rem;letter-spacing:.0030714286rem}.buttons{flex:0 0 2.5714285714rem;display:flex;justify-content:flex-end;align-items:center}.buttons button:first-child{margin-right:.7142857143rem}.confirm-header{flex-grow:1;display:flex;justify-content:center;align-items:center;padding:0 2.8571428571rem}.confirm-header p{color:#686a6c;font-size:1rem;font-style:normal;font-weight:600;line-height:1.4285714286rem;letter-spacing:.0030714286rem}.confirm-header omni-icon{width:4.2857142857rem;height:4.2857142857rem;aspect-ratio:1/1;margin-right:1.4285714286rem}`\n\n\n/**\n * To include within your project `import { OmniAssistWithPlugins } from 'omni-ui/omni-assist-with-plugins.js';`\n *\n * @tagname omni-assist-with-plugins\n * @event {ChatPlugin} active-plugin-change - Dispatched when the active plugin is changed\n * @event {ChatSuggestion} submit-chat - Dispatched when the user submits a chat\n * */\nexport class OmniAssistWithPlugins extends OmniElement {\n  static get styles() {\n    return [...super.styles, styles];\n  }\n\n  #dateFormatter = new Intl.DateTimeFormat('en-US', {\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n  });\n\n  #dragController: OmniAssistDragController;\n  @state() private _isOpened: boolean = false;\n  @state() private _isExpanded: boolean = false;\n  @state() private _animationClass: string = 'closed';\n  @state() private _stagedPlugin: ChatPlugin;\n  @state() private _isUserScrolledAway: boolean = false;\n  @state() private _scrollBottom: number = 0;\n  /** address to user profile image */\n  @property({ type: String }) userImage: string;\n  @property({ type: String }) view: 'chat' | 'plugins' | 'confirm' = 'chat';\n  @property({ type: Boolean, reflect: true }) dragging: boolean = false;\n  /** show the three dot loader and disable the input field */\n  @property({ type: Boolean }) isLoading: boolean = false;\n  /** indicate that streaming is occurring and disable the input field */\n  @property({ type: Boolean }) isStreaming: boolean = false;\n  /** array of chat history items to display */\n  @property({ attribute: false }) history: ChatHistoryItem[] = [];\n  @property({ attribute: false }) plugins: ChatPlugin[] = [\n    {\n      name: 'Omni Standard AI',\n      description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque scelerisque nulla a porta',\n      icon: AI_CHAT_MESSAGE_ICON_SVG\n    },\n    {\n      name: 'Learning and Development',\n      description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque scelerisque nulla a porta ',\n      icon: AI_CHAT_PLUGIN_L_AND_D_SVG,\n      iconBackground: 'linear-gradient(90deg, #2CC4AD 0%, #00E3AE 100%)'\n    }\n  ];\n\n  /** array of prompt suggestions */\n  @property({ attribute: false }) suggestions: ChatSuggestion[] = [];\n  @property({ attribute: false }) activePlugin: ChatPlugin;\n  @query('omni-tile') private _chatWindowTileEl: OmniTileElement;\n  @query('omni-textarea') private _textareaEl: OmniTextarea;\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.#dragController = new OmniAssistDragController(this);\n    this.addEventListener('omni-dragend', this.#handleDragend as EventListener);\n    if (this.plugins.length && !this.activePlugin) {\n      this.activePlugin = this.plugins[0];\n      this.#emitActivePluginChange();\n    }\n  }\n\n  updated(changed: Map<string, unknown>) {\n    if (changed.has('history')) {\n      this.#scrollToBottom();\n    }\n  }\n\n  async firstUpdated() {\n    await this.updateComplete;\n    await this._chatWindowTileEl.updateComplete;\n    this._chatWindowTileEl.bodyScrollerDiv.addEventListener('scroll', this.#handleChatTileElScroll);\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.removeEventListener('omni-dragend', this.#handleDragend as EventListener);\n    this._chatWindowTileEl.bodyScrollerDiv.removeEventListener('scroll', this.#handleChatTileElScroll);\n  }\n\n  #handleChatTileElScroll = (e: Event) => {\n    const target = this._chatWindowTileEl.bodyScrollerDiv;\n    const distanceFromBottom = Math.floor(target.scrollHeight - target.scrollTop - target.clientHeight);\n    this._isUserScrolledAway = distanceFromBottom > 20;\n    this._scrollBottom = distanceFromBottom;\n  };\n\n  #handleDragend = (e: CustomEvent<{ isClick: boolean }>) => {\n    if (e.detail.isClick) {\n      this.toggleOpened();\n    }\n  };\n\n  async #open() {\n    this._animationClass = 'opened';\n    await this.updateComplete;\n    this.setAttribute('opened', '');\n    this._isOpened = true;\n    await this._chatWindowTileEl.animate(\n      [\n        { transform: 'scale(0)', opacity: '0' },\n        { transform: 'scale(.5)', opacity: '1' },\n        { transform: 'scale(1)', opacity: '1' }\n      ],\n      { duration: 175, easing: 'cubic-bezier(0, 1, 0.4, 0.93)' }\n    ).finished;\n    await this.updateComplete;\n    this._textareaEl.focus();\n  }\n\n  async #close() {\n    await this._chatWindowTileEl.animate(\n      [\n        { transform: 'scale(1)', opacity: '1' },\n        { transform: 'scale(.5)', opacity: '0' },\n        { transform: 'scale(0)', opacity: '0' }\n      ],\n      {\n        duration: 175,\n        easing: 'cubic-bezier(.88,.25,.75,.98)'\n      }\n    ).finished;\n    this.removeAttribute('opened');\n    this._isOpened = false;\n    this._animationClass = 'closed';\n    this.view = 'chat';\n  }\n\n  async #scrollToBottom(userInitiated = false) {\n    if (!userInitiated) {\n      if (this._isUserScrolledAway) {\n        return;\n      }\n    }\n    await this._chatWindowTileEl.updateComplete;\n    const bodyScroller = this._chatWindowTileEl.bodyScrollerDiv;\n    bodyScroller.style.scrollBehavior = 'smooth';\n    bodyScroller.scrollTop = bodyScroller.scrollHeight;\n  }\n\n  get #chatWindowHeaderTemplate() {\n    return html`\n      <div slot=\"header\" class=\"header\">\n        <div class=\"assist-title\">\n          <span>Omni Assist</span>\n          <div class=\"active-plugin\">\n            ${this.activePlugin.icon}\n            <span>${this.activePlugin.name}</span>\n          </div>\n        </div>\n        <omni-style class=\"icon-buttons\">\n          <omni-tooltip>\n            <button\n              class=\"button is-text ${this.view === 'plugins' || this.view === 'confirm' ? 'is-active' : ''}\"\n              @click=${e => {\n                this.view = this.view === 'plugins' ? 'chat' : 'plugins';\n                this._stagedPlugin = null;\n              }}>\n              ${AI_CHAT_PLUGIN_BOXES_SVG}\n            </button>\n            <div slot=\"content\">${this.view === 'plugins' ? 'View Chat' : 'Select Plugin'}</div>\n          </omni-tooltip>\n          <omni-tooltip>\n            <button class=\"button is-text\" @click=${() => this.toggleExpanded()}>\n              <omni-icon icon-id=\"omni:interactive:${!this._isExpanded ? 'expand' : 'minimize'}\"></omni-icon>\n            </button>\n            <div slot=\"content\">${!this._isExpanded ? 'Expand Chat' : 'Minimize Chat'}</div>\n          </omni-tooltip>\n          <button class=\"button is-text\" @click=${this.#close}>\n            <omni-icon class=\"is-size-1\" icon-id=\"omni:interactive:close\"></omni-icon>\n          </button>\n        </omni-style>\n      </div>\n    `;\n  }\n\n  async #handleChat(prompt?: string) {\n    const content = typeof prompt === 'string' ? prompt : this._textareaEl.value;\n    const trimmedContent = content.trim();\n    if (!trimmedContent) {\n      return;\n    }\n    this.dispatchNewEvent('submit-chat', { detail: content });\n    await this._textareaEl.clear();\n  }\n\n  get #chatView() {\n    const suggestions = this.suggestions.length && !this.history.length ? this.suggestions.slice(0, 3) : [];\n    return html`\n      <div class=\"history-container ${this.history.length ? 'has-content' : ''}\">\n        ${repeat(\n          this.history,\n          (item, idx) => idx,\n          (item, idx) => html`\n            <div class=\"one-chat-history\">\n              <div class=\"avatar-and-chat-text ${item.role}\">\n                <div class=\"avatar-container\">\n                  ${item.role === 'user'\n                    ? userAvatarTemplate(this.userImage)\n                    : html`<omni-icon icon-id=\"omni:brand:omni\"></omni-icon>`}\n                </div>\n                <div class=\"chat-text-container ${item.role}\">\n                  ${item.role === 'assistant'\n                    ? html`\n                        <omni-markdown\n                          .markdown=${item.content as string}\n                          style=\"--markdown-font-size: 14px\"></omni-markdown>\n                        <slot name=\"response-footer\">\n                          <omni-assist-feedback-controls .response=${item} .request=${this.history[idx - 1]}>\n                          </omni-assist-feedback-controls>\n                        </slot>\n                      `\n                    : html`<p>${item.content}</p>`}\n                </div>\n              </div>\n              ${item.timestamp\n                ? html`\n                    <div class=\"chat-timestamp ${item.role}\">\n                      ${this.#dateFormatter.format(new Date(item.timestamp))}\n                    </div>\n                  `\n                : nothing}\n            </div>\n          `\n        )}\n        ${this.isLoading\n          ? html`\n              <div class=\"loading-container\">\n                <omni-icon icon-id=\"omni:brand:omni\"></omni-icon>\n                <omni-dot-loader></omni-dot-loader>\n              </div>\n            `\n          : nothing}\n        ${when(this._scrollBottom > 100 && this.history.length, () => {\n          return html`\n            <omni-style class=\"more-button-container\">\n              <div class=\"white-background\">\n                <button class=\"button is-outlined\" @click=${() => this.#scrollToBottom(true)}>\n                  <omni-icon icon-id=\"omni:interactive:down\"></omni-icon>\n                  <span> More Results Below </span>\n                </button>\n              </div>\n            </omni-style>\n          `;\n        })}\n      </div>\n\n      ${when(\n        suggestions.length,\n        () => html`\n          <div class=\"suggestions\" slot=\"footer\">\n            ${this.suggestions.map(\n              one => html`\n                <div class=\"suggestion\" @click=${() => this.#handleChat(one.prompt)}>\n                  <h3>${one.category}</h3>\n                  <p>${one.prompt}</p>\n                </div>\n              `\n            )}\n          </div>\n        `\n      )}\n      <div slot=\"footer\" class=\"textarea-container\">\n        <omni-textarea\n          ?disabled=${this.isLoading || this.isStreaming}\n          placeholder=\"How can I help you?\"\n          hidefooter\n          transparent\n          rows=\"1\"\n          maxRows=\"3\"\n          @keydown=${(e: KeyboardEvent) => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n              e.preventDefault();\n              this.#handleChat();\n            }\n          }}></omni-textarea>\n        <omni-style>\n          <button ?disabled=${this.isLoading || this.isStreaming} class=\"button is-text\" @click=\"${this.#handleChat}\">\n            <omni-icon icon-id=\"omni:interactive:forward\"></omni-icon>\n          </button>\n        </omni-style>\n      </div>\n      <div slot=\"footer\" class=\"disclaimer-container\">${OMNI_ASSIST_DISCLAIMER}</div>\n    `;\n  }\n\n  get #pluginView() {\n    return html`\n      <div class=\"plugin-view\">\n        <div class=\"plugin-header\">\n          <h3>Choose a plugin</h3>\n          <p>\n            Select a plugin to use. You can always switch between plugins later. If you're not sure which plugin to use,\n            start with Omni Standard AI.\n          </p>\n        </div>\n        <div class=\"plugins\">\n          ${this.plugins.map(one => {\n            const isActive = this.activePlugin === one;\n            const isStaged = this._stagedPlugin === one;\n            const classes = classMap({\n              plugin: true,\n              active: isActive,\n              staged: isStaged\n            });\n            return html`\n              <div\n                tabindex=${isActive ? '-1' : '0'}\n                class=${classes}\n                @click=${(e: Event & { target: HTMLElement }) => {\n                  if (!isActive) {\n                    this._stagedPlugin = one;\n                  }\n                }}\n                @keypress=${(e: KeyboardEvent) => {\n                  if (e.key === 'Enter' && !isActive) {\n                    this._stagedPlugin = one;\n                  }\n                }}>\n                <div class=\"icon\" style=${one.iconBackground ? `background: ${one.iconBackground} ` : ''}>\n                  ${one.icon}\n                </div>\n                <div class=\"info\">\n                  <h3>${one.name}</h3>\n                  <p>${one.description}</p>\n                </div>\n                ${!isActive\n                  ? html`\n                      <omni-radio tabindex=\"-1\" ?checked=${isStaged}>\n                        ${isStaged ? html`<label>Select</label>` : nothing}\n                      </omni-radio>\n                    `\n                  : html` <span class=\"active-label\">Active</span> `}\n              </div>\n            `;\n          })}\n        </div>\n        <omni-style class=\"buttons\">\n          <button\n            class=\"button is-outlined\"\n            @click=${() => {\n              this.view = 'chat';\n              this._stagedPlugin = null;\n            }}>\n            Cancel\n          </button>\n          <button\n            ?disabled=${!this._stagedPlugin || this.activePlugin === this._stagedPlugin}\n            class=\"button is-primary\"\n            @click=${() => (this.view = 'confirm')}>\n            <span> Next </span>\n            <omni-icon icon-id=\"omni:interactive:forward\"></omni-icon>\n          </button>\n        </omni-style>\n      </div>\n    `;\n  }\n\n  #emitActivePluginChange() {\n    this.dispatchNewEvent('active-plugin-change', { detail: this.activePlugin });\n  }\n\n  get #confirmView() {\n    return html`\n      <div class=\"confirm-view\">\n        <div class=\"confirm-header\">\n          <omni-icon class=\"is-warning\" icon-id=\"omni:informative:alert\"></omni-icon>\n          <p>\n            Switching plugin will delete your current conversational history as it is not currently supported. Consider\n            making a copy of any important answers generated.\n          </p>\n        </div>\n        <omni-style class=\"buttons\">\n          <button\n            class=\"button is-outlined\"\n            @click=${() => {\n              this.view = 'chat';\n              this._stagedPlugin = null;\n            }}>\n            Cancel\n          </button>\n          <button\n            class=\"button is-primary\"\n            @click=${() => {\n              this.activePlugin = this._stagedPlugin;\n              this.view = 'chat';\n              this._stagedPlugin = null;\n              this.#emitActivePluginChange();\n            }}>\n            <span> Switch Plugin </span>\n          </button>\n        </omni-style>\n      </div>\n    `;\n  }\n\n  /** toggle the chat window opened or closed */\n  public async toggleOpened() {\n    if (this._isOpened) {\n      await this.#close();\n    } else {\n      await this.#open();\n    }\n  }\n\n  /** toggle the chat window expanded or minimized */\n  public async toggleExpanded(expand = !this._isExpanded) {\n    const width1 = this._chatWindowTileEl.clientWidth;\n    const height1 = this._chatWindowTileEl.clientHeight;\n    this._isExpanded = expand;\n    await this.updateComplete;\n    const width2 = this._chatWindowTileEl.clientWidth;\n    const height2 = this._chatWindowTileEl.clientHeight;\n    await this._chatWindowTileEl.animate(\n      [{ transform: `scale(${width1 / width2},${height1 / height2})` }, { transform: `scale(1)` }],\n      { duration: 175, easing: 'cubic-bezier(0, 1, 0.4, 0.93)' }\n    ).finished;\n  }\n\n  render() {\n    const tileClasses = classMap({\n      [this._animationClass]: true,\n      [this.#dragController.corner]: true,\n      expanded: this._isExpanded\n    });\n    return html`\n      <omni-tooltip ?disabled=${this._isOpened} .place=${this.#dragController.tooltipPlace}>\n        <div class=\"chat-circle\" slot=\"invoker\">\n          <omni-icon icon-id=\"omni:brand:omni\"></omni-icon>\n        </div>\n        <p slot=\"content\">Omni Assist</p>\n      </omni-tooltip>\n      <omni-tile scroll class=${tileClasses} @pointerdown=${(e: Event) => e.stopPropagation()}>\n        ${when(\n          this._animationClass === 'opened',\n          () => html`\n            ${this.#chatWindowHeaderTemplate}\n            ${choose(\n              this.view,\n              [\n                ['chat', () => this.#chatView],\n                ['plugins', () => this.#pluginView],\n                ['confirm', () => this.#confirmView]\n              ],\n              () => html`<h1>Error</h1>`\n            )}\n          `\n        )}\n      </omni-tile>\n      ${this.dragging ? html`<div class=\"drag-underlay\"></div>` : nothing}\n    `;\n  }\n}\n\nOmniElement.register('omni-assist-with-plugins', OmniAssistWithPlugins);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'omni-assist-with-plugins': OmniAssistWithPlugins;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
