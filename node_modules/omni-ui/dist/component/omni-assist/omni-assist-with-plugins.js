var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { html, nothing } from "lit";
import { property, query, state } from "lit/decorators.js";
import { OmniElement } from "../../omni-element.js";
import { OmniAssistDragController } from "./omni-assist-drag-controller.js";
import {
  AI_CHAT_MESSAGE_ICON_SVG,
  AI_CHAT_PLUGIN_L_AND_D_SVG,
  AI_CHAT_PLUGIN_BOXES_SVG,
  OMNI_ASSIST_DISCLAIMER,
  userAvatarTemplate
} from "./omni-assist.shared.js";
import { choose } from "lit/directives/choose.js";
import { classMap } from "lit/directives/class-map.js";
import { when } from "lit/directives/when.js";
import { repeat } from "lit/directives/repeat.js";
import "../omni-dot-loader/omni-dot-loader.js";
import "../omni-markdown/omni-markdown.js";
import "./omni-assist-feedback-controls.js";
import "../omni-tooltip/omni-tooltip.js";
import { css } from "lit";
const styles = css`:host{position:fixed;z-index:1000;--offset-left: 40px;--chat-window-min-height: max(60vh, 400px);--chat-window-max-height: calc(100vh - var(--omni-app-layout-header-height) - 2rem);--chat-window-max-width: calc(100vw - calc(80px * 2) - var(--offset-left));--chat-icon-color: var(--color-almost-black)}.drag-underlay{position:relative;width:0;height:0;z-index:999}.chat-circle{display:flex;flex-direction:column;justify-content:center;align-items:center;height:4rem;width:4rem;border-radius:2rem;color:#fff;background-color:#00a1d2;cursor:pointer;z-index:1001;transition:all 100ms ease-in-out}.chat-circle omni-icon{width:1.8571428571rem;height:1.8571428571rem;aspect-ratio:1/1;--color-icon-lines: white}:host([dragging]){cursor:grabbing !important}:host([dragging]) .drag-underlay{position:fixed;height:100%;width:100%;inset:0;background-color:rgba(0,0,0,0)}:host([dragging]) .chat-circle{cursor:grabbing}:host([opened]) .chat-circle{background-color:rgba(207,233,245,.8)}:host([opened]) .chat-circle omni-icon{--color-icon-lines: #00a1d2}.chat-circle:hover,:host([opened]) .chat-circle:hover{background-color:#d1f4ff;box-shadow:0 24px 31px -6px rgba(59,62,63,.35)}.chat-circle:hover omni-icon,:host([opened]) .chat-circle:hover omni-icon{--color-icon-lines: #00a1d2}@keyframes scale-in{0%{transform:scale(0);opacity:0}100%{transform:scale(1);opacity:1}}omni-tile{position:absolute;min-height:var(--chat-window-min-height);max-height:var(--chat-window-max-height);box-shadow:rgba(0,0,50,.3) 1px 7px 13px;border-radius:.5714285714rem}omni-tile.closed{display:none}omni-tile.opened{height:80vh;width:800px;opacity:1}omni-tile.expanded{width:var(--chat-window-max-width);height:var(--chat-window-max-height)}omni-tile.BL{bottom:0;margin-left:70px;transform-origin:bottom left}omni-tile.TL{top:0;margin-left:70px;transform-origin:top left}omni-tile.BR{bottom:0;right:0;margin-right:70px;transform-origin:bottom right}omni-tile.TR{top:0;right:0;margin-right:70px;transform-origin:top right}omni-tile::part(body-slot){background-color:#fff;padding:0;display:flex}omni-tile::part(body-scroller){flex:0 0 1;max-height:100%;border-bottom-left-radius:.7142857143rem;border-bottom-right-radius:.7142857143rem}.header{padding:1rem 1rem .2857142857rem;display:flex;justify-content:space-between;align-items:center}.header .assist-title{display:flex;flex-direction:column}.header .assist-title span{color:var(--color-almost-black);font-size:1.1428571429rem;font-style:normal;font-weight:600;line-height:1.1428571429rem;letter-spacing:.0026428571rem}.header .active-plugin{display:flex;justify-content:flex-start;align-items:center;height:2.2857142857rem}.header .active-plugin svg{height:1rem;width:1rem;--chat-icon-color: var(--color-almost-black)}.header .active-plugin span{margin-left:.5rem;color:var(--color-almost-black);font-size:.7857142857rem;font-style:normal;font-weight:600;line-height:.8571428571rem;letter-spacing:.0024285714rem}.header .active-plugin .icon-buttons{display:flex;justify-content:flex-end;align-items:center;--chat-icon-color: var(--color-almost-black)}.history-container,.plugin-container{padding:0 4.2857142857rem}.history-container{position:relative;display:flex;flex-direction:column;justify-content:flex-end;align-items:stretch;padding-bottom:1rem;width:100%;max-width:100%;background-color:#fff}.history-container.has-content{background-color:#f6f8fc}.one-chat-history{display:flex;flex-direction:column;justify-content:flex-start;align-items:stretch;margin:.7142857143rem 0}.one-chat-history .avatar-and-chat-text.assistant{display:flex;justify-content:flex-start;align-items:flex-start}.one-chat-history .avatar-and-chat-text.user{display:flex;flex-direction:row-reverse;justify-content:flex-start;align-items:flex-start}.one-chat-history .avatar-and-chat-text omni-icon{width:1.7142857143rem;height:1.7142857143rem;aspect-ratio:1/1;--color-icon-lines: #00a1d2}.one-chat-history .avatar-and-chat-text .chat-text-container{padding:.7142857143rem;max-width:calc(100% - 3.1428571429rem);box-shadow:rgba(1,33,78,.1) 0 10px 60px -5px;border-radius:10px;background-color:var(--color-white);color:var(--color-almost-black);margin:0 1.0714285714rem}.one-chat-history .avatar-and-chat-text .chat-text-container omni-markdown{max-width:100%;--markdown-font-size: var(--size-4)}.one-chat-history .avatar-and-chat-text .chat-text-container.user p{white-space:pre-wrap;margin:0;padding:0}.one-chat-history .chat-timestamp{color:#686a6c;padding:.2857142857rem 0 0 0;font-size:.8571428571rem;font-style:normal;font-weight:400;line-height:1.1428571429rem;letter-spacing:.0022857143rem}.one-chat-history .chat-timestamp.user{align-self:flex-end;margin-right:3.1428571429rem}.one-chat-history .chat-timestamp.assistant{align-self:flex-start;margin-left:3.1428571429rem}.one-chat-history:last-child{margin-bottom:0}.loading-container{display:flex;justify-content:flex-start;align-items:center;padding:0 0 1rem 0}.loading-container omni-icon{width:1.7142857143rem;height:1.7142857143rem;aspect-ratio:1/1;--color-icon-lines: #00a1d2;margin-right:.5rem}.loading-container omni-dot-loader{font-size:10px}.more-button-container{position:sticky;bottom:1.4285714286rem;align-self:center}.more-button-container .white-background{background-color:#fff;border-radius:.5714285714rem}.omni button.button.is-oulined{background-color:#fff}.suggestions{display:flex;flex-wrap:wrap;justify-content:flex-start;align-items:flex-start;padding:1.7142857143rem 1.7142857143rem .7142857143rem 1.7142857143rem;max-width:800px;margin:0 auto}.suggestions .suggestion{display:flex;flex-direction:column;justify-content:flex-start;align-items:flex-start;flex:0 0 calc(50% - 2*0.5714285714rem);height:4.2857142857rem;padding:.5714285714rem 1.1428571429rem;border-radius:.7142857143rem;border:1px solid #edf0f5;background:#fff;margin-bottom:1rem}.suggestions .suggestion:nth-child(odd){margin-right:1.1428571429rem}.suggestions .suggestion:hover{cursor:pointer;border-radius:10px;background:#f5f8fb}.suggestions .suggestion h3{margin:0;padding:0;color:#3b3e3f;font-size:.9285714286rem;font-style:normal;font-weight:600;line-height:1.2857142857rem;letter-spacing:.0027142857rem}.suggestions .suggestion p{margin:0;padding:0;color:rgba(59,62,63,.6);font-size:.8571428571rem;font-style:normal;font-weight:400;line-height:1.1428571429rem;letter-spacing:.0022857143rem;display:-webkit-box;-webkit-line-clamp:1;-webkit-box-orient:vertical;overflow:hidden}.textarea-container{display:flex;justify-content:center;align-items:center;background-color:#f1f5fa;padding:.5714285714rem 1.4285714286rem}.textarea-container omni-textarea{margin:0 1.4285714286rem 0 0;flex-grow:1}.disclaimer-container{display:flex;justify-content:center;align-items:center}.disclaimer-container p{color:#686a6c;text-align:center;font-size:.8571428571rem;font-style:normal;font-weight:400;line-height:1.1428571429rem;letter-spacing:.0022857143rem;margin:.7142857143rem 0}.plugin-view,.confirm-view{flex-grow:1;display:flex;flex-direction:column;justify-content:center;align-items:stretch;background-color:#fff;padding:1.4285714286rem;max-width:800px;margin:0 auto}.plugin-header{flex:0 0 15rem;display:flex;flex-direction:column;justify-content:center;align-items:flex-start}.plugin-header h3{margin:0 0 .2857142857rem 0;padding:0;color:var(--color-almost-black);font-size:1rem;font-style:normal;font-weight:400;line-height:1.5714285714rem;letter-spacing:.0030714286rem}.plugin-header p{margin:0;padding:0;color:#686a6c;font-size:1rem;font-style:normal;font-weight:400;line-height:1.5714285714rem;letter-spacing:.0030714286rem}.plugins{display:flex;justify-content:center;align-items:flex-start;flex-grow:1}.plugin{position:relative;display:flex;justify-content:flex-start;align-items:center;border-radius:.7142857143rem;border:1px solid var(--color-pale-grey-three);padding:1.7142857143rem 1.4285714286rem;margin:0 .7142857143rem}.plugin:hover:not(.active),.plugin:focus:not(.active),.plugin:active:not(.active),.plugin.staged{box-shadow:none;cursor:pointer;background:#fff;outline:2px solid var(--color-electric-blue-between);border:1px solid rgba(0,0,0,0)}.plugin:hover:not(.active){box-shadow:0 .2857142857rem .4285714286rem 0 rgba(17,155,235,.2509803922)}.plugin.active{background:var(--table-background-color)}.plugin .icon{height:4.4285714286rem;aspect-ratio:1/1;border-radius:.7142857143rem;display:flex;justify-content:center;align-items:center;margin-right:1.4285714286rem;border:.2857142857rem solid #fff;background:var(--gradient-primary);box-shadow:0 4px 6px 0 rgba(59,62,63,.1)}.plugin .icon svg{height:2.2857142857rem;width:2.2857142857rem;--chat-icon-color: white}.plugin .info{display:flex;flex-direction:column}.plugin .info h3{margin:0 0 .2857142857rem 0;padding:0;color:var(--color-almost-black);font-size:.9285714286rem;font-style:normal;font-weight:600;line-height:1.2857142857rem;letter-spacing:.0027142857rem}.plugin .info p{margin:0;padding:0;color:rgba(59,62,63,.5);font-size:.8571428571rem;font-style:normal;font-weight:400;line-height:1.1428571429rem;letter-spacing:.0022857143rem}.plugin omni-radio{position:absolute;top:.8571428571rem;right:.8571428571rem;--radio-height-width: 0.8571428571rem;pointer-events:none;min-height:1.4285714286rem;display:flex;justify-content:center;align-items:center}.plugin:hover omni-radio{--radio-background: var(--color-primary)}.plugin omni-radio label{color:var(--color-primary)}.plugin span.active-label{position:absolute;top:.8571428571rem;right:.8571428571rem;color:#adb0b3;font-size:1rem;font-style:normal;font-weight:600;line-height:1.4285714286rem;letter-spacing:.0030714286rem}.buttons{flex:0 0 2.5714285714rem;display:flex;justify-content:flex-end;align-items:center}.buttons button:first-child{margin-right:.7142857143rem}.confirm-header{flex-grow:1;display:flex;justify-content:center;align-items:center;padding:0 2.8571428571rem}.confirm-header p{color:#686a6c;font-size:1rem;font-style:normal;font-weight:600;line-height:1.4285714286rem;letter-spacing:.0030714286rem}.confirm-header omni-icon{width:4.2857142857rem;height:4.2857142857rem;aspect-ratio:1/1;margin-right:1.4285714286rem}`;
class OmniAssistWithPlugins extends OmniElement {
  constructor() {
    super(...arguments);
    this.#dateFormatter = new Intl.DateTimeFormat("en-US", {
      hour: "numeric",
      minute: "numeric",
      hour12: true
    });
    this._isOpened = false;
    this._isExpanded = false;
    this._animationClass = "closed";
    this._isUserScrolledAway = false;
    this._scrollBottom = 0;
    this.view = "chat";
    this.dragging = false;
    this.isLoading = false;
    this.isStreaming = false;
    this.history = [];
    this.plugins = [
      {
        name: "Omni Standard AI",
        description: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque scelerisque nulla a porta",
        icon: AI_CHAT_MESSAGE_ICON_SVG
      },
      {
        name: "Learning and Development",
        description: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque scelerisque nulla a porta ",
        icon: AI_CHAT_PLUGIN_L_AND_D_SVG,
        iconBackground: "linear-gradient(90deg, #2CC4AD 0%, #00E3AE 100%)"
      }
    ];
    this.suggestions = [];
    this.#handleChatTileElScroll = (e) => {
      const target = this._chatWindowTileEl.bodyScrollerDiv;
      const distanceFromBottom = Math.floor(target.scrollHeight - target.scrollTop - target.clientHeight);
      this._isUserScrolledAway = distanceFromBottom > 20;
      this._scrollBottom = distanceFromBottom;
    };
    this.#handleDragend = (e) => {
      if (e.detail.isClick) {
        this.toggleOpened();
      }
    };
  }
  static get styles() {
    return [...super.styles, styles];
  }
  #dateFormatter;
  #dragController;
  connectedCallback() {
    super.connectedCallback();
    this.#dragController = new OmniAssistDragController(this);
    this.addEventListener("omni-dragend", this.#handleDragend);
    if (this.plugins.length && !this.activePlugin) {
      this.activePlugin = this.plugins[0];
      this.#emitActivePluginChange();
    }
  }
  updated(changed) {
    if (changed.has("history")) {
      this.#scrollToBottom();
    }
  }
  async firstUpdated() {
    await this.updateComplete;
    await this._chatWindowTileEl.updateComplete;
    this._chatWindowTileEl.bodyScrollerDiv.addEventListener("scroll", this.#handleChatTileElScroll);
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener("omni-dragend", this.#handleDragend);
    this._chatWindowTileEl.bodyScrollerDiv.removeEventListener("scroll", this.#handleChatTileElScroll);
  }
  #handleChatTileElScroll;
  #handleDragend;
  async #open() {
    this._animationClass = "opened";
    await this.updateComplete;
    this.setAttribute("opened", "");
    this._isOpened = true;
    await this._chatWindowTileEl.animate(
      [
        { transform: "scale(0)", opacity: "0" },
        { transform: "scale(.5)", opacity: "1" },
        { transform: "scale(1)", opacity: "1" }
      ],
      { duration: 175, easing: "cubic-bezier(0, 1, 0.4, 0.93)" }
    ).finished;
    await this.updateComplete;
    this._textareaEl.focus();
  }
  async #close() {
    await this._chatWindowTileEl.animate(
      [
        { transform: "scale(1)", opacity: "1" },
        { transform: "scale(.5)", opacity: "0" },
        { transform: "scale(0)", opacity: "0" }
      ],
      {
        duration: 175,
        easing: "cubic-bezier(.88,.25,.75,.98)"
      }
    ).finished;
    this.removeAttribute("opened");
    this._isOpened = false;
    this._animationClass = "closed";
    this.view = "chat";
  }
  async #scrollToBottom(userInitiated = false) {
    if (!userInitiated) {
      if (this._isUserScrolledAway) {
        return;
      }
    }
    await this._chatWindowTileEl.updateComplete;
    const bodyScroller = this._chatWindowTileEl.bodyScrollerDiv;
    bodyScroller.style.scrollBehavior = "smooth";
    bodyScroller.scrollTop = bodyScroller.scrollHeight;
  }
  get #chatWindowHeaderTemplate() {
    return html`
      <div slot="header" class="header">
        <div class="assist-title">
          <span>Omni Assist</span>
          <div class="active-plugin">
            ${this.activePlugin.icon}
            <span>${this.activePlugin.name}</span>
          </div>
        </div>
        <omni-style class="icon-buttons">
          <omni-tooltip>
            <button
              class="button is-text ${this.view === "plugins" || this.view === "confirm" ? "is-active" : ""}"
              @click=${(e) => {
      this.view = this.view === "plugins" ? "chat" : "plugins";
      this._stagedPlugin = null;
    }}>
              ${AI_CHAT_PLUGIN_BOXES_SVG}
            </button>
            <div slot="content">${this.view === "plugins" ? "View Chat" : "Select Plugin"}</div>
          </omni-tooltip>
          <omni-tooltip>
            <button class="button is-text" @click=${() => this.toggleExpanded()}>
              <omni-icon icon-id="omni:interactive:${!this._isExpanded ? "expand" : "minimize"}"></omni-icon>
            </button>
            <div slot="content">${!this._isExpanded ? "Expand Chat" : "Minimize Chat"}</div>
          </omni-tooltip>
          <button class="button is-text" @click=${this.#close}>
            <omni-icon class="is-size-1" icon-id="omni:interactive:close"></omni-icon>
          </button>
        </omni-style>
      </div>
    `;
  }
  async #handleChat(prompt) {
    const content = typeof prompt === "string" ? prompt : this._textareaEl.value;
    const trimmedContent = content.trim();
    if (!trimmedContent) {
      return;
    }
    this.dispatchNewEvent("submit-chat", { detail: content });
    await this._textareaEl.clear();
  }
  get #chatView() {
    const suggestions = this.suggestions.length && !this.history.length ? this.suggestions.slice(0, 3) : [];
    return html`
      <div class="history-container ${this.history.length ? "has-content" : ""}">
        ${repeat(
      this.history,
      (item, idx) => idx,
      (item, idx) => html`
            <div class="one-chat-history">
              <div class="avatar-and-chat-text ${item.role}">
                <div class="avatar-container">
                  ${item.role === "user" ? userAvatarTemplate(this.userImage) : html`<omni-icon icon-id="omni:brand:omni"></omni-icon>`}
                </div>
                <div class="chat-text-container ${item.role}">
                  ${item.role === "assistant" ? html`
                        <omni-markdown
                          .markdown=${item.content}
                          style="--markdown-font-size: 14px"></omni-markdown>
                        <slot name="response-footer">
                          <omni-assist-feedback-controls .response=${item} .request=${this.history[idx - 1]}>
                          </omni-assist-feedback-controls>
                        </slot>
                      ` : html`<p>${item.content}</p>`}
                </div>
              </div>
              ${item.timestamp ? html`
                    <div class="chat-timestamp ${item.role}">
                      ${this.#dateFormatter.format(new Date(item.timestamp))}
                    </div>
                  ` : nothing}
            </div>
          `
    )}
        ${this.isLoading ? html`
              <div class="loading-container">
                <omni-icon icon-id="omni:brand:omni"></omni-icon>
                <omni-dot-loader></omni-dot-loader>
              </div>
            ` : nothing}
        ${when(this._scrollBottom > 100 && this.history.length, () => {
      return html`
            <omni-style class="more-button-container">
              <div class="white-background">
                <button class="button is-outlined" @click=${() => this.#scrollToBottom(true)}>
                  <omni-icon icon-id="omni:interactive:down"></omni-icon>
                  <span> More Results Below </span>
                </button>
              </div>
            </omni-style>
          `;
    })}
      </div>

      ${when(
      suggestions.length,
      () => html`
          <div class="suggestions" slot="footer">
            ${this.suggestions.map(
        (one) => html`
                <div class="suggestion" @click=${() => this.#handleChat(one.prompt)}>
                  <h3>${one.category}</h3>
                  <p>${one.prompt}</p>
                </div>
              `
      )}
          </div>
        `
    )}
      <div slot="footer" class="textarea-container">
        <omni-textarea
          ?disabled=${this.isLoading || this.isStreaming}
          placeholder="How can I help you?"
          hidefooter
          transparent
          rows="1"
          maxRows="3"
          @keydown=${(e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        this.#handleChat();
      }
    }}></omni-textarea>
        <omni-style>
          <button ?disabled=${this.isLoading || this.isStreaming} class="button is-text" @click="${this.#handleChat}">
            <omni-icon icon-id="omni:interactive:forward"></omni-icon>
          </button>
        </omni-style>
      </div>
      <div slot="footer" class="disclaimer-container">${OMNI_ASSIST_DISCLAIMER}</div>
    `;
  }
  get #pluginView() {
    return html`
      <div class="plugin-view">
        <div class="plugin-header">
          <h3>Choose a plugin</h3>
          <p>
            Select a plugin to use. You can always switch between plugins later. If you're not sure which plugin to use,
            start with Omni Standard AI.
          </p>
        </div>
        <div class="plugins">
          ${this.plugins.map((one) => {
      const isActive = this.activePlugin === one;
      const isStaged = this._stagedPlugin === one;
      const classes = classMap({
        plugin: true,
        active: isActive,
        staged: isStaged
      });
      return html`
              <div
                tabindex=${isActive ? "-1" : "0"}
                class=${classes}
                @click=${(e) => {
        if (!isActive) {
          this._stagedPlugin = one;
        }
      }}
                @keypress=${(e) => {
        if (e.key === "Enter" && !isActive) {
          this._stagedPlugin = one;
        }
      }}>
                <div class="icon" style=${one.iconBackground ? `background: ${one.iconBackground} ` : ""}>
                  ${one.icon}
                </div>
                <div class="info">
                  <h3>${one.name}</h3>
                  <p>${one.description}</p>
                </div>
                ${!isActive ? html`
                      <omni-radio tabindex="-1" ?checked=${isStaged}>
                        ${isStaged ? html`<label>Select</label>` : nothing}
                      </omni-radio>
                    ` : html` <span class="active-label">Active</span> `}
              </div>
            `;
    })}
        </div>
        <omni-style class="buttons">
          <button
            class="button is-outlined"
            @click=${() => {
      this.view = "chat";
      this._stagedPlugin = null;
    }}>
            Cancel
          </button>
          <button
            ?disabled=${!this._stagedPlugin || this.activePlugin === this._stagedPlugin}
            class="button is-primary"
            @click=${() => this.view = "confirm"}>
            <span> Next </span>
            <omni-icon icon-id="omni:interactive:forward"></omni-icon>
          </button>
        </omni-style>
      </div>
    `;
  }
  #emitActivePluginChange() {
    this.dispatchNewEvent("active-plugin-change", { detail: this.activePlugin });
  }
  get #confirmView() {
    return html`
      <div class="confirm-view">
        <div class="confirm-header">
          <omni-icon class="is-warning" icon-id="omni:informative:alert"></omni-icon>
          <p>
            Switching plugin will delete your current conversational history as it is not currently supported. Consider
            making a copy of any important answers generated.
          </p>
        </div>
        <omni-style class="buttons">
          <button
            class="button is-outlined"
            @click=${() => {
      this.view = "chat";
      this._stagedPlugin = null;
    }}>
            Cancel
          </button>
          <button
            class="button is-primary"
            @click=${() => {
      this.activePlugin = this._stagedPlugin;
      this.view = "chat";
      this._stagedPlugin = null;
      this.#emitActivePluginChange();
    }}>
            <span> Switch Plugin </span>
          </button>
        </omni-style>
      </div>
    `;
  }
  /** toggle the chat window opened or closed */
  async toggleOpened() {
    if (this._isOpened) {
      await this.#close();
    } else {
      await this.#open();
    }
  }
  /** toggle the chat window expanded or minimized */
  async toggleExpanded(expand = !this._isExpanded) {
    const width1 = this._chatWindowTileEl.clientWidth;
    const height1 = this._chatWindowTileEl.clientHeight;
    this._isExpanded = expand;
    await this.updateComplete;
    const width2 = this._chatWindowTileEl.clientWidth;
    const height2 = this._chatWindowTileEl.clientHeight;
    await this._chatWindowTileEl.animate(
      [{ transform: `scale(${width1 / width2},${height1 / height2})` }, { transform: `scale(1)` }],
      { duration: 175, easing: "cubic-bezier(0, 1, 0.4, 0.93)" }
    ).finished;
  }
  render() {
    const tileClasses = classMap({
      [this._animationClass]: true,
      [this.#dragController.corner]: true,
      expanded: this._isExpanded
    });
    return html`
      <omni-tooltip ?disabled=${this._isOpened} .place=${this.#dragController.tooltipPlace}>
        <div class="chat-circle" slot="invoker">
          <omni-icon icon-id="omni:brand:omni"></omni-icon>
        </div>
        <p slot="content">Omni Assist</p>
      </omni-tooltip>
      <omni-tile scroll class=${tileClasses} @pointerdown=${(e) => e.stopPropagation()}>
        ${when(
      this._animationClass === "opened",
      () => html`
            ${this.#chatWindowHeaderTemplate}
            ${choose(
        this.view,
        [
          ["chat", () => this.#chatView],
          ["plugins", () => this.#pluginView],
          ["confirm", () => this.#confirmView]
        ],
        () => html`<h1>Error</h1>`
      )}
          `
    )}
      </omni-tile>
      ${this.dragging ? html`<div class="drag-underlay"></div>` : nothing}
    `;
  }
}
__decorateClass([
  state()
], OmniAssistWithPlugins.prototype, "_isOpened", 2);
__decorateClass([
  state()
], OmniAssistWithPlugins.prototype, "_isExpanded", 2);
__decorateClass([
  state()
], OmniAssistWithPlugins.prototype, "_animationClass", 2);
__decorateClass([
  state()
], OmniAssistWithPlugins.prototype, "_stagedPlugin", 2);
__decorateClass([
  state()
], OmniAssistWithPlugins.prototype, "_isUserScrolledAway", 2);
__decorateClass([
  state()
], OmniAssistWithPlugins.prototype, "_scrollBottom", 2);
__decorateClass([
  property({ type: String })
], OmniAssistWithPlugins.prototype, "userImage", 2);
__decorateClass([
  property({ type: String })
], OmniAssistWithPlugins.prototype, "view", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniAssistWithPlugins.prototype, "dragging", 2);
__decorateClass([
  property({ type: Boolean })
], OmniAssistWithPlugins.prototype, "isLoading", 2);
__decorateClass([
  property({ type: Boolean })
], OmniAssistWithPlugins.prototype, "isStreaming", 2);
__decorateClass([
  property({ attribute: false })
], OmniAssistWithPlugins.prototype, "history", 2);
__decorateClass([
  property({ attribute: false })
], OmniAssistWithPlugins.prototype, "plugins", 2);
__decorateClass([
  property({ attribute: false })
], OmniAssistWithPlugins.prototype, "suggestions", 2);
__decorateClass([
  property({ attribute: false })
], OmniAssistWithPlugins.prototype, "activePlugin", 2);
__decorateClass([
  query("omni-tile")
], OmniAssistWithPlugins.prototype, "_chatWindowTileEl", 2);
__decorateClass([
  query("omni-textarea")
], OmniAssistWithPlugins.prototype, "_textareaEl", 2);
OmniElement.register("omni-assist-with-plugins", OmniAssistWithPlugins);
export {
  OmniAssistWithPlugins
};
//# sourceMappingURL=omni-assist-with-plugins.js.map
