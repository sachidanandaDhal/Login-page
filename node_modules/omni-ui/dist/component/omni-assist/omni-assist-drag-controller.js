class OmniAssistDragController {
  constructor(host, cornerGravity = true, offsetLeft = 40) {
    this.host = host;
    this.cornerGravity = cornerGravity;
    this.offsetLeft = offsetLeft;
    this.#chatCircleWidth = 56;
    this.#chatCircleHeight = 56;
    this.#dragging = false;
    this.#startX = 0;
    this.#startY = 0;
    this.#position = { left: 0, top: 0, offsetX: 0, offsetY: 0 };
    this.corner = "BR";
    this.hEdgeOffset = 30;
    this.vEdgeOffset = 20;
    this.#cornerToCoordinates = () => {
      return {
        TL: {
          left: this.offsetLeft,
          top: this.vEdgeOffset
        },
        TR: {
          left: window.innerWidth - this.#chatCircleWidth - this.hEdgeOffset,
          top: this.vEdgeOffset
        },
        BL: {
          left: this.offsetLeft,
          top: window.innerHeight - this.#chatCircleHeight - this.vEdgeOffset
        },
        BR: {
          left: window.innerWidth - this.#chatCircleWidth - this.hEdgeOffset,
          top: window.innerHeight - this.#chatCircleHeight - this.vEdgeOffset
        }
      };
    };
    this.setPosition = (e = null, animate = false) => {
      if (animate) {
        this.host.animate(
          [
            { top: `${this.#position.top}px`, left: `${this.#position.left}px` },
            {
              top: this.#cornerToCoordinates()[this.corner].top + "px",
              left: this.#cornerToCoordinates()[this.corner].left + "px"
            }
          ],
          { duration: 300, easing: "cubic-bezier(0.42, 0, 0.58, 1)" }
        );
      }
      this.#position.left = this.#cornerToCoordinates()[this.corner].left;
      this.#position.top = this.#cornerToCoordinates()[this.corner].top;
      this.host.style.left = `${Math.round(this.#position.left)}px`;
      this.host.style.top = `${Math.round(this.#position.top)}px`;
    };
    this.#handlePointerDown = (e) => {
      this.#dragging = false;
      this.#startX = e.clientX;
      this.#startY = e.clientY;
      const { left, top } = this.host.getBoundingClientRect();
      const offsetX = e.clientX - left;
      const offsetY = e.clientY - top;
      this.#position = {
        left,
        top,
        offsetX,
        offsetY
      };
      document.addEventListener("pointermove", this.#handlePointerMove);
      document.addEventListener("mouseleave", this.#handlePointerUp);
      document.addEventListener("mouseout", this.#handlePointerUp);
      document.addEventListener("mouseup", this.#handlePointerUp);
      document.addEventListener("pointerup", this.#handlePointerUp);
      document.addEventListener("pointerleave", this.#handlePointerUp);
      document.addEventListener("pointerout", this.#handlePointerUp);
      document.addEventListener("pointercancel", this.#handlePointerUp);
      this.#originalBodyStyle = document.body.style.cssText;
    };
    this.#handlePointerMove = (e) => {
      e.preventDefault();
      if (Math.abs(e.clientX - this.#startX) > 5 || Math.abs(e.clientY - this.#startY) > 5) {
        this.#dragging = true;
        this.host.dragging = true;
      }
      document.body.style.cursor = "grabbing";
      document.body.style.userSelect = "none";
      document.body.style["-webkit-user-select"] = "none";
      const { clientX, clientY } = e;
      const { offsetX, offsetY } = this.#position;
      const left = clientX - offsetX;
      const top = clientY - offsetY;
      this.#position.left = left;
      this.#position.top = top;
      this.host.style.left = `${Math.round(this.#position.left)}px`;
      this.host.style.top = `${Math.round(top)}px`;
      const { innerWidth, innerHeight } = self;
      if (left < innerWidth / 2 && top < innerHeight / 2) {
        this.corner = "TL";
      } else if (left < innerWidth / 2 && top >= innerHeight / 2) {
        this.corner = "BL";
      } else if (left >= innerWidth / 2 && top < innerHeight / 2) {
        this.corner = "TR";
      } else {
        this.corner = "BR";
      }
      this.host.requestUpdate();
    };
    this.#handlePointerUp = async (e) => {
      document.removeEventListener("pointermove", this.#handlePointerMove);
      document.removeEventListener("mouseleave", this.#handlePointerUp);
      document.removeEventListener("mouseout", this.#handlePointerUp);
      document.removeEventListener("mouseup", this.#handlePointerUp);
      document.removeEventListener("pointerup", this.#handlePointerUp);
      document.removeEventListener("pointerleave", this.#handlePointerUp);
      document.removeEventListener("pointerout", this.#handlePointerUp);
      document.removeEventListener("pointercancel", this.#handlePointerUp);
      document.body.style.cssText = this.#originalBodyStyle;
      this.host.dragging = false;
      if (this.cornerGravity && this.#dragging) {
        await this.host.animate(
          [
            { top: `${this.#position.top}px`, left: `${this.#position.left}px` },
            {
              top: this.#cornerToCoordinates()[this.corner].top + "px",
              left: this.#cornerToCoordinates()[this.corner].left + "px"
            }
          ],
          { duration: 350, easing: "cubic-bezier(0.42, 0, 0.58, 1)" }
        ).finished;
        this.setPosition();
      }
      const isClick = !this.#dragging;
      this.#dragging = false;
      this.host.dispatchNewEvent("omni-dragend", { detail: { corner: this.corner, isClick } });
    };
    this.host.addController(this);
  }
  #originalBodyStyle;
  #chatCircleWidth;
  #chatCircleHeight;
  #dragging;
  #startX;
  #startY;
  #position;
  hostConnected() {
    this.setPosition();
    window.addEventListener("resize", this.setPosition);
    this.host.addEventListener("pointerdown", this.#handlePointerDown);
  }
  #cornerToCoordinates;
  get tooltipPlace() {
    const positionToPlace = {
      TL: "right",
      TR: "left",
      BL: "right",
      BR: "left"
    };
    return positionToPlace[this.corner];
  }
  #handlePointerDown;
  #handlePointerMove;
  #handlePointerUp;
  hostDisconnected() {
    window.removeEventListener("resize", this.setPosition);
    this.host.removeEventListener("pointerdown", this.#handlePointerDown);
  }
}
export {
  OmniAssistDragController
};
//# sourceMappingURL=omni-assist-drag-controller.js.map
