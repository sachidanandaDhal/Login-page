var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { html } from "lit";
import { OmniElement } from "../../omni-element.js";
import { foundationsBadge, professionalBadge, endToEndBadge } from "../../assets/badges.js";
import { property } from "lit/decorators.js";
import { css } from "lit";
const styles = css`:host{height:2em;width:2em}`;
class OmniBadgeElement extends OmniElement {
  constructor() {
    super(...arguments);
    this.ariaLabel = "Certification badge";
    this.level = "omni foundations";
  }
  static get styles() {
    return [...super.styles, styles];
  }
  renderBadge() {
    switch (this.level.toLowerCase()) {
      case "omni foundations":
        return foundationsBadge(html);
      case "omni professional":
        return professionalBadge(html);
      case "omni end-to-end":
        return endToEndBadge(html);
      default:
        console.error(`The level attribute '${this.level}' does not match an omni-badge case`);
        return "";
    }
  }
  render() {
    return html`<div part="badge">${this.renderBadge()}</div>`;
  }
}
__decorateClass([
  property({ type: String, attribute: "aria-label", reflect: true })
], OmniBadgeElement.prototype, "ariaLabel", 2);
__decorateClass([
  property({ type: String, reflect: true })
], OmniBadgeElement.prototype, "level", 2);
OmniElement.register("omni-badge", OmniBadgeElement);
export {
  OmniBadgeElement
};
//# sourceMappingURL=omni-badge.js.map
