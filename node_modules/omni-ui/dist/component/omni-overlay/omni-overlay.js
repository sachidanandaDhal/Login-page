var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { html } from "lit";
import { property } from "lit/decorators.js";
import { OmniElement } from "../../omni-element.js";
const _OmniOverlay = class _OmniOverlay extends OmniElement {
  _titleview() {
    const { pageX, pageY } = this.__event;
    const { style } = this.shadowRoot.querySelector('slot[name="title"]');
    style.setProperty("top", `${pageY}px`);
    style.setProperty("left", `${pageX}px`);
    this.requestUpdate();
  }
  _pointermove(event) {
    const [node] = OmniElement.pathfinder(event, "[title]");
    const { __title, istitle } = this;
    if (!node && !istitle)
      return;
    const title = node ? node.title : "";
    if (__title === title)
      return;
    this.__title = title;
    this.istitle = !!title.trim();
    this.__event = event;
    cancelAnimationFrame(this.__task);
    this.__task = requestAnimationFrame(() => {
      this._titleview();
    });
  }
  constructor() {
    super();
    this.addEventListener("click", this._click);
    this._overlay = this._overlay.bind(this);
    this._pointermove = this._pointermove.bind(this);
    this._resize = this._resize.bind(this);
    this._keystroke = this._keystroke.bind(this);
    this._focusout = this._focusout.bind(this);
  }
  _keystroke(event) {
    if (!this.attributes.length)
      return;
    const { code } = event;
    switch (code) {
      case "Tab":
        const { activeElement } = document;
        const contains = this.contains(activeElement);
        if (!contains) {
          event.preventDefault();
          this.focus();
        }
        break;
      case "Escape":
        this.close();
        break;
    }
  }
  _resize() {
    this.close(":not(omni-dialog)");
  }
  _focusout() {
    const contains = this.contains(document.activeElement);
    requestAnimationFrame(() => {
      const { activeElement } = document;
      const contains2 = this.contains(activeElement);
      if (!contains2) {
        this.focus();
      }
    });
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    self.removeEventListener("keydown", this._keystroke);
    self.removeEventListener("focusout", this._focusout);
    self.removeEventListener("overlay", this._overlay);
    this.close();
    self.removeEventListener("resize", this._resize);
  }
  connectedCallback() {
    super.connectedCallback();
    self.addEventListener("keydown", this._keystroke);
    self.addEventListener("focusout", this._focusout);
    self.addEventListener("overlay", this._overlay);
    self.addEventListener("resize", this._resize);
  }
  _overlay(event) {
    const { detail } = event;
    requestAnimationFrame(() => {
      const slot = detail.getAttribute("slot");
      if (!slot) {
        this._remove(detail);
        return;
      }
      this.shadowRoot.querySelector(`slot[name=${slot}]`).assignedNodes().forEach(this._remove, { except: detail });
      this.append(detail);
      detail.dispatchEvent(new CustomEvent("overlay-append", { detail }));
    });
  }
  _remove(node) {
    const { except, selector } = this;
    if (except && node === except || selector && !node.matches(selector)) {
      return;
    }
    node.remove();
    node.dispatchEvent(new CustomEvent("overlay-remove", { detail: node }));
  }
  ___contains(node) {
    return node.contains(this);
  }
  _click(event) {
    const { target } = event;
    const children = Array.from(this.children).filter(this.___contains, target);
    if (this.ismodal) {
      if (this.attributes.length > 1) {
        const [child] = children;
        if (children.length && !child.localName.includes("omni-dialog")) {
          return;
        }
        this.close(":not(omni-dialog)");
      }
    } else if (!children.length) {
      this.close();
    }
  }
  close(selector) {
    if (this._closing || !this.children.length)
      return;
    this._closing = true;
    requestAnimationFrame(() => {
      this._closing = false;
      Array.from(this.children).forEach(this._remove, { selector });
    });
  }
  createRenderRoot() {
    return this.attachShadow({
      mode: "open",
      delegatesFocus: true
    });
  }
  static blocking(on, node = document.documentElement) {
    const { style } = node;
    style.setProperty("overflow", on ? "hidden" : "");
    return node;
  }
  static get tag() {
    return "omni-overlay";
  }
  static createOverlay() {
    const { document: document2 } = self;
    const { tag } = this;
    const symbol = Symbol.for(tag);
    const overlay = self[symbol] ?? document2.querySelector(tag) ?? document2.createElement(tag);
    self[symbol] = overlay;
    requestAnimationFrame(() => {
      document2.body.appendChild(overlay);
    });
    return overlay;
  }
  static get overlay() {
    const { tag } = this;
    const symbol = Symbol.for(tag);
    return self[symbol] ?? this.createOverlay();
  }
  render() {
    return html`
      <style>
        /* non-positioning styles are the responsibility of the form custom element */
        slot[name='form']::slotted(*) {
          position: fixed;
        }
        :host {
          display: block;
          contain: style;
          margin: 0;
          padding: 0;
          width: 100vw;
          height: 100vh;
          background-color: transparent;
          position: fixed;
          inset: 0;
          z-index: 9876543210;
          overflow: auto;
          --color-bg: transparent;
          box-sizing: border-box;
          pointer-events: none;
        }
        :host(:empty) {
          display: none;
        }
        :host(:is([blocked], [isform], [ismodal])) {
          pointer-events: auto;
          background-color: var(--color-bg);
          overscroll-behavior: contain;
        }

        slot[name='indicator'],
        slot[name='indicator']::slotted(*) {
        }

        slot[name='form'],
        slot[name='indicator'],
        slot[name='title'] {
          position: fixed;
          display: block;
        }
        slot[name='title'],
        slot[name='indicator'],
        slot[name='indicator']::slotted(*),
        slot[name='title']::slotted(*) {
          pointer-events: none;
        }
        slot[name='modal']::slotted(*) {
        }
      </style>
      <slot @slotchange=${this._slotchange} name="modal"></slot>
      <slot @slotchange=${this._slotchange} name="form"></slot>
      <slot @slotchange=${this._slotchange} name="indicator"></slot>
      <slot @slotchange=${this._slotchange} name="title">${this.__title ?? ""}</slot>
    `;
  }
  updated(changedProperties) {
    if (changedProperties.has("isform")) {
      _OmniOverlay.blocking(this.isform);
    }
  }
  _slotchange(event) {
    const path = event.composedPath();
    const [slot] = path;
    const nodes = slot.assignedElements();
    const name = slot.getAttribute("name");
    const count = nodes.length;
    this[`is${name || void 0}`] = count !== 0;
    nodes.forEach(this._slotting, this);
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  _slotting(node, i) {
    if (this.contains(this.ownerDocument.activeElement))
      return;
    requestAnimationFrame(() => {
      this.focus();
    });
  }
};
__decorateClass([
  property({ type: Boolean, reflect: true, attribute: "ismodal" })
], _OmniOverlay.prototype, "ismodal", 2);
__decorateClass([
  property({ type: Boolean, reflect: true, attribute: "isform" })
], _OmniOverlay.prototype, "isform", 2);
__decorateClass([
  property({ type: Boolean, reflect: true, attribute: "isindicator" })
], _OmniOverlay.prototype, "isindicator", 2);
__decorateClass([
  property({ type: Boolean, reflect: true, attribute: "istitle" })
], _OmniOverlay.prototype, "istitle", 2);
__decorateClass([
  property({ type: String })
], _OmniOverlay.prototype, "__title", 2);
let OmniOverlay = _OmniOverlay;
OmniOverlay.register("omni-overlay", OmniOverlay);
export {
  OmniOverlay
};
//# sourceMappingURL=omni-overlay.js.map
