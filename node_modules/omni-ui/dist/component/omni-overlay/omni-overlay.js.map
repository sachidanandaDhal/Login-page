{
  "version": 3,
  "sources": ["../../../lib/component/omni-overlay/omni-overlay.ts"],
  "sourcesContent": ["import { html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { OmniElement } from '../../omni-element.js';\n\nexport class OmniOverlay extends OmniElement {\n  __event;\n  __task;\n  _closing;\n  @property({ type: Boolean, reflect: true, attribute: 'ismodal' }) ismodal: boolean;\n  @property({ type: Boolean, reflect: true, attribute: 'isform' }) isform: boolean;\n  @property({ type: Boolean, reflect: true, attribute: 'isindicator' }) isindicator: boolean;\n  @property({ type: Boolean, reflect: true, attribute: 'istitle' }) istitle: boolean;\n  @property({ type: String }) __title: string;\n  _titleview() {\n    const { pageX, pageY } = this.__event;\n    const { style } = this.shadowRoot.querySelector('slot[name=\"title\"]') as HTMLElement;\n    style.setProperty('top', `${pageY}px`);\n    style.setProperty('left', `${pageX}px`);\n    this.requestUpdate();\n  }\n\n  _pointermove(event) {\n    // @ts-ignore\n    const [node] = OmniElement.pathfinder(event, '[title]');\n    const { __title, istitle } = this;\n    if (!node && !istitle) return;\n    const title = node ? node.title : '';\n    if (__title === title) return;\n    this.__title = title;\n    this.istitle = !!title.trim();\n\n    this.__event = event;\n    cancelAnimationFrame(this.__task);\n    this.__task = requestAnimationFrame(() => {\n      this._titleview();\n    });\n  }\n\n  constructor() {\n    super();\n    this.addEventListener('click', this._click);\n    this._overlay = this._overlay.bind(this);\n    this._pointermove = this._pointermove.bind(this);\n    this._resize = this._resize.bind(this);\n\n    this._keystroke = this._keystroke.bind(this);\n    this._focusout = this._focusout.bind(this);\n  }\n\n  _keystroke(event) {\n    if (!this.attributes.length) return;\n\n    const { code } = event;\n    switch (code) {\n      case 'Tab':\n        // eslint-disable-next-line no-case-declarations\n        const { activeElement } = document;\n        // eslint-disable-next-line no-case-declarations\n        const contains = this.contains(activeElement);\n        if (!contains) {\n          event.preventDefault();\n          this.focus();\n        }\n        break;\n      case 'Escape':\n        // @ts-ignore\n        this.close();\n        break;\n    }\n  }\n\n  _resize() {\n    this.close(':not(omni-dialog)');\n  }\n\n  _focusout() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const contains = this.contains(document.activeElement);\n    requestAnimationFrame(() => {\n      const { activeElement } = document;\n      const contains = this.contains(activeElement);\n      if (!contains) {\n        this.focus();\n      }\n    });\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    self.removeEventListener('keydown', this._keystroke);\n    self.removeEventListener('focusout', this._focusout);\n    self.removeEventListener('overlay', this._overlay);\n    // @ts-ignore\n    this.close();\n    self.removeEventListener('resize', this._resize);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    self.addEventListener('keydown', this._keystroke);\n    self.addEventListener('focusout', this._focusout);\n    self.addEventListener('overlay', this._overlay);\n    self.addEventListener('resize', this._resize);\n  }\n\n  _overlay(event) {\n    const { detail } = event;\n    requestAnimationFrame(() => {\n      const slot = detail.getAttribute('slot');\n      if (!slot) {\n        this._remove(detail);\n        return;\n      }\n      (this.shadowRoot.querySelector(`slot[name=${slot}]`) as HTMLSlotElement)\n        .assignedNodes()\n        .forEach(this._remove, { except: detail });\n      this.append(detail);\n      detail.dispatchEvent(new CustomEvent('overlay-append', { detail }));\n    });\n  }\n\n  _remove(node) {\n    // @ts-ignore\n    const { except, selector } = this;\n    if ((except && node === except) || (selector && !node.matches(selector))) {\n      return;\n    }\n    node.remove();\n    node.dispatchEvent(new CustomEvent('overlay-remove', { detail: node }));\n  }\n\n  ___contains(node) {\n    return node.contains(this);\n  }\n\n  _click(event) {\n    const { target } = event;\n    // clicking within children mostly handle their own events\n    const children = Array.from(this.children).filter(this.___contains, target);\n    if (this.ismodal) {\n      // figure out if we need to close other layers\n      if (this.attributes.length > 1) {\n        // if the click is outside one of the overlay's respective children\n        // otherwise that node will handle its own interactions\n        const [child] = children;\n        if (children.length && !child.localName.includes('omni-dialog')) {\n          return;\n        }\n        this.close(':not(omni-dialog)');\n      }\n    } else if (!children.length) {\n      // @ts-ignore\n      this.close();\n    }\n  }\n\n  close(selector) {\n    if (this._closing || !this.children.length) return;\n    this._closing = true;\n    // TODO title self.removeEventListener('pointermove', this._pointermove);\n    requestAnimationFrame(() => {\n      this._closing = false;\n      Array.from(this.children).forEach(this._remove, { selector });\n    });\n  }\n\n  createRenderRoot() {\n    return this.attachShadow({\n      mode: 'open',\n      delegatesFocus: true\n    });\n  }\n\n  static blocking(on, node = document.documentElement) {\n    const { style } = node;\n    style.setProperty('overflow', on ? 'hidden' : '');\n\n    return node;\n  }\n\n  static get tag() {\n    return 'omni-overlay';\n  }\n\n  static createOverlay() {\n    const { document } = self;\n    const { tag } = this;\n    const symbol = Symbol.for(tag);\n    const overlay = self[symbol] ?? document.querySelector(tag) ?? document.createElement(tag);\n    self[symbol] = overlay;\n\n    requestAnimationFrame(() => {\n      document.body.appendChild(overlay);\n    });\n\n    return overlay;\n  }\n\n  static get overlay() {\n    const { tag } = this;\n    const symbol = Symbol.for(tag);\n    return self[symbol] ?? this.createOverlay();\n  }\n\n  render() {\n    return html`\n      <style>\n        /* non-positioning styles are the responsibility of the form custom element */\n        slot[name='form']::slotted(*) {\n          position: fixed;\n        }\n        :host {\n          display: block;\n          contain: style;\n          margin: 0;\n          padding: 0;\n          width: 100vw;\n          height: 100vh;\n          background-color: transparent;\n          position: fixed;\n          inset: 0;\n          z-index: 9876543210;\n          overflow: auto;\n          --color-bg: transparent;\n          box-sizing: border-box;\n          pointer-events: none;\n        }\n        :host(:empty) {\n          display: none;\n        }\n        :host(:is([blocked], [isform], [ismodal])) {\n          pointer-events: auto;\n          background-color: var(--color-bg);\n          overscroll-behavior: contain;\n        }\n\n        slot[name='indicator'],\n        slot[name='indicator']::slotted(*) {\n        }\n\n        slot[name='form'],\n        slot[name='indicator'],\n        slot[name='title'] {\n          position: fixed;\n          display: block;\n        }\n        slot[name='title'],\n        slot[name='indicator'],\n        slot[name='indicator']::slotted(*),\n        slot[name='title']::slotted(*) {\n          pointer-events: none;\n        }\n        slot[name='modal']::slotted(*) {\n        }\n      </style>\n      <slot @slotchange=${this._slotchange} name=\"modal\"></slot>\n      <slot @slotchange=${this._slotchange} name=\"form\"></slot>\n      <slot @slotchange=${this._slotchange} name=\"indicator\"></slot>\n      <slot @slotchange=${this._slotchange} name=\"title\">${this.__title ?? ''}</slot>\n    `;\n  }\n\n  updated(changedProperties) {\n    if (changedProperties.has('isform')) {\n      OmniOverlay.blocking(this.isform);\n    }\n  }\n\n  _slotchange(event) {\n    const path = event.composedPath();\n    const [slot] = path;\n    const nodes = slot.assignedElements();\n    const name = slot.getAttribute('name');\n    const count = nodes.length;\n    // generic flagging based on slot\n    this[`is${name || undefined}`] = count !== 0;\n\n    nodes.forEach(this._slotting, this);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _slotting(node, i) {\n    if (this.contains(this.ownerDocument.activeElement)) return;\n    requestAnimationFrame(() => {\n      this.focus();\n    });\n  }\n}\n\nOmniOverlay.register('omni-overlay', OmniOverlay);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'omni-overlay': OmniOverlay;\n  }\n}\n"],
  "mappings": "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",
  "names": ["contains", "document"]
}
