var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import { html, nothing } from "lit";
import { OmniElement } from "../../omni-element.js";
import { debounce } from "../../omni-util.js";
import { property, query, state } from "lit/decorators.js";
import { css } from "lit";
const styles = css`omni-style,.omni .field,.control,input{position:relative;height:100%;display:flex;flex-direction:column}.icon{pointer-events:all !important;cursor:pointer !important;z-index:auto !important;display:flex;flex-direction:column;justify-content:center;align-items:center}.icon.is-left-icon{position:absolute;left:0;bottom:0;margin:auto 0}.icon.is-right-icon{position:absolute;right:0;bottom:0;margin:auto 0}.omni .input:focus-visible{box-shadow:none !important}omni-icon{font-size:1.5rem}omni-icon::part(icon){max-height:100%}.options{position:absolute;max-height:15rem;background:#fff;margin-top:5px;z-index:10;width:100%;border-radius:10px;box-shadow:0 8px 44px -5px rgba(38,55,79,.29);overflow:auto;cursor:pointer}`;
import "../omni-options/omni-options.js";
import { styleMap } from "lit/directives/style-map.js";
class OmniSearchElement extends OmniElement {
  constructor() {
    super(...arguments);
    this.isExpanded = false;
    this.value = "";
    this.ph = "";
    this.filteredOptions = [];
    this.isOpen = false;
    this.inputDebounceTimer = 750;
    this._showFilterOptions = false;
    this._optionsStyle = { top: "25px" };
    /** @internal */
    this.#handleOutsideClick = (event) => {
      if (!event.composedPath().includes(this._inputField)) {
        this._showFilterOptions = false;
      }
    };
  }
  static get styles() {
    return [...super.styles, styles];
  }
  async connectedCallback() {
    super.connectedCallback();
    if (this.filteredOptions.length > 0)
      document.addEventListener("click", this.#handleOutsideClick);
    if (this.value) {
      await this.updateComplete;
      this.updateSearch();
    }
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    document.removeEventListener("click", this.#handleOutsideClick);
  }
  updated(changed) {
    if (!changed.has("_optionsStyle") && this.filteredOptions?.length && this._inputField) {
      const height = this._inputField.getBoundingClientRect().height;
      this._optionsStyle = { top: `${height}px` };
    }
  }
  getInput() {
    return this.shadowRoot.querySelector("#search-input");
  }
  async toggleSearch(flag = !this.isExpanded) {
    this.isExpanded = this.isOpen ? this.isOpen : flag;
    if (flag || this.isOpen) {
      await this.updateComplete;
      this.getInput()?.focus();
    }
  }
  closeSearch() {
    this.getInput().value = "";
    this.value = "";
    this.toggleSearch(false);
    this.updateSearch();
  }
  #optionsOpen() {
    if (this.filteredOptions.length > 0) {
      this._showFilterOptions = true;
    }
  }
  #handleOutsideClick;
  updateSearch() {
    const { value } = this.getInput() ?? { value: this.value };
    this.value = value;
    this.dispatchNewEvent("search-update", { detail: { value } });
    this._showFilterOptions = true;
  }
  /** @internal */
  get xIconTemplate() {
    if (this.isOpen && !this.value?.length)
      return nothing;
    return html`
      <span class="icon is-right-icon" part="x-icon-wrapper">
        <omni-icon part="x-icon" id="clear-search-icon" icon-id="omni:interactive:close" @click=${this.closeSearch}>
        </omni-icon>
      </span>
    `;
  }
  #selectFromFilteredList(e) {
    const data = e.detail;
    this.value = String(typeof data === "object" ? data.value : data);
    this.dispatchNewEvent("search-update", { detail: { value: this.value.trim() } });
    this._showFilterOptions = false;
  }
  #handleEnterOnItem(e) {
    if (e.detail.eventKey === "Enter") {
      const data = e.detail.value;
      this.value = String(typeof data === "object" ? data.value : data);
      this.dispatchNewEvent("search-update", { detail: { value: this.value.trim() } });
      this._showFilterOptions = false;
    }
    if (e.detail.eventKey === "Escape") {
      this._showFilterOptions = false;
    }
  }
  render() {
    return html`
      <omni-style>
        ${this.isExpanded || this.isOpen ? html`
              <div class="field">
                <div class="control has-icons-left has-icons-right">
                  <input
                    class="input is-small"
                    part="input"
                    type="text"
                    id="search-input"
                    tabindex="-1"
                    placeholder="${this.ph || "Search Entry"}"
                    @focus=${this.#optionsOpen}
                    @input=${debounce(() => this.updateSearch(), this.inputDebounceTimer)}
                    .value=${this.value} />
                  <span class="icon is-left-icon" part="search-icon-opened-wrapper">
                    <omni-icon
                      part="search-icon-opened"
                      icon-id="omni:interactive:search"
                      @click=${this.toggleSearch}></omni-icon>
                  </span>
                  ${this.xIconTemplate}
                </div>
                ${this._showFilterOptions && this.filteredOptions?.length ? html`
                      <div class="options" style=${styleMap(this._optionsStyle)}>
                        <omni-options
                          .options=${this.filteredOptions}
                          @selectChange=${(e) => {
      this.#selectFromFilteredList(e);
    }}
                          @enterOnItem=${(e) => {
      this.#handleEnterOnItem(e);
    }}></omni-options>
                      </div>
                    ` : nothing}
              </div>
            ` : html`
              <div class="icon" part="search-icon-closed-wrapper">
                <omni-icon
                  part="search-icon-closed"
                  icon-id="omni:interactive:search"
                  @click=${this.toggleSearch}></omni-icon>
              </div>
            `}
      </omni-style>
    `;
  }
}
__decorateClass([
  property({ type: Boolean })
], OmniSearchElement.prototype, "isExpanded", 2);
__decorateClass([
  property({ type: String })
], OmniSearchElement.prototype, "value", 2);
__decorateClass([
  property({ type: String })
], OmniSearchElement.prototype, "ph", 2);
__decorateClass([
  property({ type: Array, reflect: true })
], OmniSearchElement.prototype, "filteredOptions", 2);
__decorateClass([
  property({ type: Boolean, attribute: true, reflect: true })
], OmniSearchElement.prototype, "isOpen", 2);
__decorateClass([
  property({ type: Number })
], OmniSearchElement.prototype, "inputDebounceTimer", 2);
__decorateClass([
  state()
], OmniSearchElement.prototype, "_showFilterOptions", 2);
__decorateClass([
  state()
], OmniSearchElement.prototype, "_optionsStyle", 2);
__decorateClass([
  query(".field")
], OmniSearchElement.prototype, "_inputField", 2);
OmniElement.register("omni-search", OmniSearchElement);
export {
  OmniSearchElement
};
//# sourceMappingURL=omni-search.js.map
