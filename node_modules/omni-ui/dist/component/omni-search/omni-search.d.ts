import { nothing } from 'lit';
import { OmniElement } from '../../omni-element.js';
import '../omni-options/omni-options.js';
import { type Option } from '../omni-dropdown/omni-dropdown.types.js';
/**
 * To include within your project `import { OmniSearchElement } from 'omni-ui';`
 *
 * The Omni Search Element is a component in our design system, returns the characters entered by the user.
 * If the user pass the filtered options list then it will show an autocomplete list.
 * It is built with Lit and exposes several attributes for customization.
 *
 * ---
 *
 * ## üí° Overview
 *
 * The `omni-search` Element component in our design system is designed to be flexible and customizable.
 * It exposes several attributes for customization, such as `ph`, `isOpen`,`inputDebounceTimer`
 * and `filteredOptions`
 * These attributes allow for versatile content customization per icon-action instance.
 *
 * ---
 *
 * ## üìù Usage
 *
 * **Basic Omni Icon Action Rendering**:
 *
 * ```html
 * <omni-style>
 *   <omni-search @search-update = ${onFliter}
 *       inputDebounceTimer = 100
 *       ph = `Search`
 *       isopen
 *       .filteredOptions = [`abc`,`cde`]>
 *   </omni-search>
 * </omni-style>
 * ```
 * ** Call-back Function**:
 *
 * ```Js
 * filteredWords = filteredOptions;
 *
 * function onFliter(event){
 *   let value = event.detail.value;
 *   filteredWords = filteredOptions.filter((word) => {
 *      if( typeof word === 'object' &&
 *          word.value.toLowerCase().trim().includes(value.toLowerCase())){
 *          return word;
 *      }
 *      if( typeof word !== 'object' && word.toLowerCase().trim().includes(value.toLowerCase())){
 *         return word;
 *      }
 *   })
 * }
 * ```
 * @tagname omni-search
 * @attr {boolean} isOpen - Define the open state of omni-search element
 * @attr {string} ph - placeholder for omni-search element
 * @attr {string[]} filteredOptions - Array of numbers/strings/objects for search suggestions
 * @attr {number} inputDebounceTimer - debounce time for search
 * @event {CustomEvent<string>} search-update - fires event when user types in search box
 */
export declare class OmniSearchElement extends OmniElement {
    #private;
    static get styles(): import("lit").CSSResult[];
    /** @internal */
    isExpanded: boolean;
    /** @internal */
    value: string;
    ph: string;
    filteredOptions: Option[];
    isOpen: boolean;
    inputDebounceTimer: number;
    /** @internal */
    private _showFilterOptions;
    /** @internal */
    private _optionsStyle;
    /** @internal */
    private _inputField;
    connectedCallback(): Promise<void>;
    disconnectedCallback(): void;
    updated(changed: Map<string, unknown>): void;
    getInput(): HTMLInputElement | undefined;
    toggleSearch(flag?: boolean): Promise<void>;
    closeSearch(): void;
    updateSearch(): void;
    /** @internal */
    get xIconTemplate(): import("lit-html").TemplateResult<1> | typeof nothing;
    render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'omni-search': OmniSearchElement;
    }
}
//# sourceMappingURL=omni-search.d.ts.map