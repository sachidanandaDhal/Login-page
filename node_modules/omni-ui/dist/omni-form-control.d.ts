export { css };
export class OmniFormControl extends OmniElement {
    static get properties(): {
        autofocus: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        autocomplete: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        required: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        name: {
            type: StringConstructor;
            reflect: boolean;
            converter: {
                toAttribute(value: any): any;
            };
        };
    };
    static get formAssociated(): boolean;
    name: string;
    required: boolean;
    disabled: boolean;
    internals: import("element-internals-polyfill/dist/element-internals.js").ElementInternals & import("element-internals-polyfill").IElementInternals;
    get form(): HTMLFormElement;
    get labels(): import("element-internals-polyfill").LabelsList;
    get type(): string;
    get validity(): import("element-internals-polyfill/dist/ValidityState.js").ValidityState & ValidityState;
    get validationMessage(): string;
    get willValidate(): boolean;
    setCustomValidity(msg: any): string;
    checkValidity(): boolean;
    reportValidity(): boolean;
    /** setup in components if indicated
        formAssociatedCallback(form){ }
        formResetCallback(){ }
        // called when ancestor fieldset and similar are [disabled], and the element itself is NOT [disabled]
        formDisabledCallback(disabled){ }
        // mode === 'restore' when browser restarts, navigation; or alternately 'autocomplete' where enabled on the form or element
        formStateRestoreCallback(state, mode){}
    */
    formStateRestoreCallback(state: any, mode: any): void;
}
import { css } from 'lit';
import { OmniElement } from './omni-element.js';
//# sourceMappingURL=omni-form-control.d.ts.map