import { css } from "lit";
import { stylesheet } from "./stylesheet.js";
const htmlStyleVariables = stylesheet.match(/(?:\bhtml[^{]*{)([^}]+)}/)?.[1] ?? "";
const omniStyleVariables = stylesheet.match(/(?:\.omni[^{]*{)([^}]+)}/)?.[1] ?? "";
const variables = css`
  ${css([`${htmlStyleVariables} ${omniStyleVariables}`])}
  --font-family-serif: Georgia, Cambria, serif;
  --font-family-sans: BlinkMacSystemFont, 'Calibri', 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Roboto', sans-serif;
  --font-family-monospace: ui-monospace, 'Cascadia Mono', 'Segoe UI Mono', 'Ubuntu Mono', 'Roboto Mono', Menlo, Monaco,
    Consolas, monospace;

  /* TODO
	--form-bgimg-off: linear-gradient(135deg,rgba(0, 0, 0, 0) 0,var(0,0,0,0) 100%);

	provide a context for changing styles to form elements without side effects
	*/
  --form-font-size: 1rem;
  --form-bg: var(--color-pale-grey-two, #ddd);
  --form-bg-on: var(--color-blue-true80, #dfd);
  --form-border: var(--form-bg);
  --form-border-on: var(--form-bg);
  --form-bgimg-off: none;
  --form-bgimg: var(--gradient-electric-blue);
  --form-bgimg-on: var(--gradient-electric-blue);
  --form-fg: var(--color-almost-black, #111);
  --form-fg-on: var(--color-green-dark, #120);
  --form-focused: var(--blue);
`;
const forms = css`
  omni-option,
  :host(omni-option),
  input,
  button,
  select,
  option,
  textarea {
    font-family: inherit;
    font-size: var(--form-font-size, 1rem);
    line-height: 1.5;
    margin: 0;
    background-color: var(--form-bg);
    border: thin solid var(--form-bg);
    border-radius: var(--radius, 0.5em);
    padding: 0 1.4em;
    position: relative;
    box-sizing: border-box;
  }

  omni-select,
  :host(omni-select),
  omni-dropdown,
  :host(omni-dropdown),
  select {
    outline: none;
  }

  input:where([type='button'], [type='reset'], [type='submit']),
  button {
    display: inline-flex;
    align-items: center;
    text-align: center;
    white-space: nowrap;
    background-color: var(--form-bg);
    background-image: var(--form-bgimg-off);
    border-color: var(--form-border);
    border-width: thin;
    color: var(--form-fg, #333);
    cursor: pointer;
    font-weight: 600;
    letter-spacing: 0.014em;
    line-height: 1;
    height: 2.2em;
    transition: background-color background-image border-color color 0.25s;
    user-select: none;
  }
  /*
*/
  input:where([type='button'], [type='reset'], [type='submit']):focus-visible,
  button:focus-visible {
    box-shadow:
      rgb(59 62 63 / 10%) 0px 4px 6px 0px,
      0 0 0 0.125em var(--form-focused);
    outline: 0;
  }

  /* special visual overrides
	.is-text
	.is-outlined
	.is-
 * */
  .is-text input:where([type='button'], [type='reset'], [type='submit']),
  input:where([type='button'], [type='reset'], [type='submit']).is-text,
  .is-text button,
  button.is-text {
    --form-border: transparent;
    --form-bg: transparent;
    --form-bg-on: var(--color-pale-grey-two);
    --form-fg: var(--primary);
    --form-fg-on: var(--color-green-dark);
    text-decoration: none;
  }

  input:where([type='button'], [type='reset'], [type='submit']):where(:active, :hover, :focus),
  button:where(:active, :hover, :focus) {
    box-shadow: rgb(59 62 63 / 10%) 0px 4px 6px 0px;
    background-color: var(--form-bg-on);
    border-color: var(--form-border-on);
    color: var(--form-fg-on, #000);
    outline: 0;
  }

  .is-outlined input:where([type='button'], [type='reset'], [type='submit']),
  input:where([type='button'], [type='reset'], [type='submit']).is-outlined,
  .is-outlined button,
  button.is-outlined {
    --form-bg: transparent;
    --form-bg-on: var(--color-electric-blue-between);
    --form-bgimg-on: var(--form-bgimg);
    --form-fg: var(--primary);
    --form-border: var(--primary);
    --form-fg-on: var(--white);
    --form-border: var(--primary);
    --form-border-on: var(--primary);
  }
  .is-outlined input:where([type='button'], [type='reset'], [type='submit']):where(:active, :hover, :focus),
  input:where([type='button'], [type='reset'], [type='submit']).is-outlined:where(:active, :hover, :focus),
  .is-outlined button:where(:active, :hover, :focus),
  button.is-outlined:where(:active, :hover, :focus) {
    --form-fg-on: var(--white);
  }
`;
const all = css`
  :host {
    ${variables}
  }
  ${forms}
`;
export {
  all,
  forms,
  variables
};
//# sourceMappingURL=styles.js.map
