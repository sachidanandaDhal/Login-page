import 'element-internals-polyfill';
import { OmniElement } from './omni-element.js';
/**
 * @event {Event} invalid - fires when client-side form input validation fails
 */
export interface IElementInternalsBase<T> {
    readonly valueMissingMessage: string;
    disabled: boolean;
    required: boolean;
    name: string;
    value: T;
    _internals: ElementInternals;
    reportValidity(): boolean;
    checkValidity(): boolean;
    valid: boolean;
}
/** common element internals boilerplate for form participating elements */
export declare abstract class ElementInternalsBase<T = string> extends OmniElement implements IElementInternalsBase<T> {
    static get formAssociated(): boolean;
    abstract readonly valueMissingMessage: string;
    /** disable the input from user interaction */
    disabled: boolean;
    /** value must be specified for the input before owning form can be submitted */
    required: boolean;
    abstract name: string;
    abstract value: T;
    /** @internal */
    _internals: ElementInternals;
    connectedCallback(): void;
    /** check the form input for client-side validation, if false fire invalid event and send the `validationMessage` to the user agent to handle */
    reportValidity(): boolean;
    /** check the form input for client-side validation, if false fire invalid event */
    checkValidity(): boolean;
    /** readonly */
    get valid(): boolean;
}
//# sourceMappingURL=element-internals-base.d.ts.map