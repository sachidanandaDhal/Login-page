{
  "version": 3,
  "sources": ["../../lib/api/image-api.ts"],
  "sourcesContent": ["/**\n * Image API - Frontend interface for Serverless Image Handler API\n * See https://bitbucket.org/annalect/serverless-image-handler/src/develop/README.md\n *\n * CORS Prerequisite: You must register your request origins with Annalect DevOps\n * NOTE: API currently only supports ANsid tokens\n */\n\nimport { fetchJSON, merge } from '../omni-util.js';\n\nconst originsByEnv = {\n  local: 'https://devimages.annalect.com',\n  dev: 'https://devimages.annalect.com',\n  qa: 'https://qaimages.annalect.com',\n  stg: 'https://stgimages.annalect.com',\n  prod: 'https://images.annalect.com'\n};\n\nexport class ImageAPI {\n  token: string;\n  env: string;\n  origin: string;\n  fetchOptions: Record<string | number | symbol, unknown>;\n\n  constructor(token: string, env = 'prod') {\n    this.token = token;\n    this.env = env;\n\n    this.origin = originsByEnv[env];\n    this.fetchOptions = {\n      // NOTE: API currently only supports ANsid tokens\n      headers: { version: 'v2', ANsid: token }\n    };\n  }\n\n  /**\n   * Create a hosted image URL\n   * @param  {File} file image file to upload (e.g. obtained via <omni-file-input>)\n   * @return {Promise<string>}   a Promise for an image URL\n   */\n  createImageURL(file: File): Promise<string> {\n    const url = new URL(`/images`, this.origin);\n\n    const formData = new FormData();\n    formData.append('environment', this.env);\n    formData.append(file.name, file);\n\n    const options = merge(this.fetchOptions, {\n      method: 'POST',\n      body: formData\n    });\n\n    // Remove Content-Type header!\n    // https://muffinman.io/blog/uploading-files-using-fetch-multipart-form-data/\n    delete options['Content-Type'];\n\n    return fetchJSON(url, options)\n      .then(([imgData]) => encodeImageURL(this.origin, imgData.key, imgData.originalFileName))\n      .catch(res => {\n        // TODO error handling?\n        console.warn(`error with request`, { url, options, res });\n        return Promise.reject(res);\n      });\n  }\n}\n\nfunction encodeImageURL(origin, key, filename) {\n  const encodedKey = encodeURI(btoa(JSON.stringify({ key })));\n  const encodedFilename = encodeURIComponent(filename);\n  // Set image file name as URL hash segment for easy access and to differentiate from default\n  // image URLs.\n  return `${origin}/images/${encodedKey}#${encodedFilename}`;\n}\n"],
  "mappings": "AAQA,SAAS,WAAW,aAAa;AAEjC,MAAM,eAAe;AAAA,EACnB,OAAO;AAAA,EACP,KAAK;AAAA,EACL,IAAI;AAAA,EACJ,KAAK;AAAA,EACL,MAAM;AACR;AAEO,MAAM,SAAS;AAAA,EAMpB,YAAY,OAAe,MAAM,QAAQ;AACvC,SAAK,QAAQ;AACb,SAAK,MAAM;AAEX,SAAK,SAAS,aAAa,GAAG;AAC9B,SAAK,eAAe;AAAA;AAAA,MAElB,SAAS,EAAE,SAAS,MAAM,OAAO,MAAM;AAAA,IACzC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,eAAe,MAA6B;AAC1C,UAAM,MAAM,IAAI,IAAI,WAAW,KAAK,MAAM;AAE1C,UAAM,WAAW,IAAI,SAAS;AAC9B,aAAS,OAAO,eAAe,KAAK,GAAG;AACvC,aAAS,OAAO,KAAK,MAAM,IAAI;AAE/B,UAAM,UAAU,MAAM,KAAK,cAAc;AAAA,MACvC,QAAQ;AAAA,MACR,MAAM;AAAA,IACR,CAAC;AAID,WAAO,QAAQ,cAAc;AAE7B,WAAO,UAAU,KAAK,OAAO,EAC1B,KAAK,CAAC,CAAC,OAAO,MAAM,eAAe,KAAK,QAAQ,QAAQ,KAAK,QAAQ,gBAAgB,CAAC,EACtF,MAAM,SAAO;AAEZ,cAAQ,KAAK,sBAAsB,EAAE,KAAK,SAAS,IAAI,CAAC;AACxD,aAAO,QAAQ,OAAO,GAAG;AAAA,IAC3B,CAAC;AAAA,EACL;AACF;AAEA,SAAS,eAAe,QAAQ,KAAK,UAAU;AAC7C,QAAM,aAAa,UAAU,KAAK,KAAK,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;AAC1D,QAAM,kBAAkB,mBAAmB,QAAQ;AAGnD,SAAO,GAAG,MAAM,WAAW,UAAU,IAAI,eAAe;AAC1D;",
  "names": []
}
