{
  "version": 3,
  "sources": ["../lib/color.ts"],
  "sourcesContent": ["/**\n * Color class for handling color objects from picker events, parsing and generating CSS color values\n * ```js\n *\tconst color1 = new Color({r: 255, g: 255, b: 255}); // color1.hex returns '#fff'\n *\tconst color2 = new Color('hsl(204, 255, 0)').hex // returns #cf0\n * ```\n */\nexport default class Color {\n  r;\n  g;\n  b;\n  h;\n  s;\n  l;\n  a;\n  angle;\n  static number(input, relativeTo = 1): number {\n    let n;\n    if (typeof input === 'string' && input.endsWith('%')) {\n      // '50%' -> .5; '50%' of 50 -> 25\n      n = ((Number(input.slice(0, -1)) || 0) / 100) * relativeTo;\n    } else {\n      n = Number(input) || 0;\n    }\n    return n;\n  }\n\n  /*\n         parse input to an expected color dictionary describing a color\n         @param {object|string} input - like css strings 'rgb(0,0,0)' 'hsl(1turn, 50%, 50% / 0.5)' '#11223344' and objects {r:255,g:255,b:255} from vanilla-colorful picker events for various types\n         @returns {type: 'rgb|hsl', r, g, b, h, s, l, a, grad: 'deg|grad|rad|turn'} with whatever values correlate, all number values on properties except type (and angle for hsl)\n       */\n  static parse(input) {\n    let output = {};\n    let alpha;\n    if (typeof input === 'object') {\n      // numeric values only\n      const { r, g, b, h, s, l, a, angle = 'deg' } = input;\n      if (typeof r === 'number') {\n        // clone\n        output = { r, g, b, a };\n      } else if (typeof h === 'number') {\n        output = { h, s, l, a, angle };\n      }\n    } else if (typeof input === 'string') {\n      const txt = input.trim();\n      let r;\n      let g;\n      let b;\n      let a;\n      if (txt.startsWith('#')) {\n        // hex as #rgb #rgba #rrggbb #rrggbbaa\n        const size = txt.length;\n        // F => '0xFF' => 255\n        if (size <= 5) {\n          r = Color.number(`0x${txt[1]}${txt[1]}`);\n          g = Color.number(`0x${txt[2]}${txt[2]}`);\n          b = Color.number(`0x${txt[3]}${txt[3]}`);\n          // alpha #F => 0xFF => 255 => 1\n          if (size > 4) a = Color.number(`0x${txt[4]}${txt[4]}`) / 255;\n        } else {\n          r = Color.number(`0x${txt[1]}${txt[2]}`);\n          g = Color.number(`0x${txt[3]}${txt[4]}`);\n          b = Color.number(`0x${txt[5]}${txt[6]}`);\n          // alpha #00 => 0 => 0; #FF => 255 => 1\n          if (size > 7) a = Color.number(`0x${txt[7]}${txt[8]}`) / 255;\n        }\n        alpha = a;\n        output = { r, g, b };\n      } else if (txt.startsWith('rgb') || txt.startsWith('hsl')) {\n        // color-function(value)\n        const [prefix = '', value = ''] = txt.split(/[()]/);\n        // (r|h, g|s, b|l, a) number percent% number / 0.5 comma, or space or / separated\n        const [v1 = '', v2 = '', v3 = '', v4] = value.trim().split(/[,\\s/]+/) ?? [];\n        if (prefix.startsWith('hsl')) {\n          // hue = deg (default) | rad | grad | turn on color wheel\n          // sat % saturated 100% to unsaturated gray 0%\n          // lightness % 100% white to 0% black\n          // deg rad grad turn https://developer.mozilla.org/en-US/docs/Web/CSS/angle\n          let [s, h = '', angle = '', l] = v1.match(/^([0-9.]+)([a-z]*)/) ?? [];\n          if (!/deg|turn|grad|rad/.test(angle)) angle = 'deg';\n          // @ts-ignore\n          h = Color.number(h);\n          // s and l percentages %\n          // @ts-ignore\n          s = Color.number(v2);\n          // @ts-ignore\n          l = Color.number(v3);\n          output = { h, s, l, angle };\n        } else {\n          // % or number\n          r = Color.number(v1, 255);\n          g = Color.number(v2, 255);\n          b = Color.number(v3, 255);\n          output = { r, g, b };\n        }\n\n        if (v4) {\n          a = Color.number(v4);\n        }\n        alpha = a;\n      }\n      if (alpha !== undefined) {\n        alpha = Color.number(alpha);\n        if (alpha < 0) {\n          alpha = 0;\n        } else if (alpha > 1) {\n          alpha = 1;\n        }\n        // @ts-ignore\n        output.a = alpha;\n      }\n    }\n    return output;\n  }\n\n  static convertRGBtoHSL(r, g, b) {\n    // cannot convert from rgb if no valid number\n    if (typeof r !== 'number') throw new Error('missing red for conversion to HSL');\n\n    const [red, green, blue] = [r / 255, g / 255, b / 255];\n    const [min, max] = [Math.min(red, green, blue), Math.max(red, green, blue)];\n    const diff = max - min;\n    let h;\n    let s;\n    let l;\n    h = s = l = 0; /* eslint-disable-line no-multi-assign */\n    if (diff === 0) {\n      h = 0;\n    } else if (max === red) {\n      h = ((green - blue) / diff) % 6;\n    } else if (max === green) {\n      h = (blue - red) / diff + 2;\n    } else {\n      h = (red - green) / diff + 4;\n    }\n    const angle = 'deg';\n    // degrees is the default, range 0 to 360\u00B0\n    h = Math.round(h * 60) % 360;\n    // -10 -> 350\u00B0\n    if (h < 0) h += 360;\n\n    // lightness\n    l = (max + min) / 2;\n    // saturation\n    s = diff / (1 - Math.abs(2 * l - 1));\n\n    return { h, s, l, angle };\n  }\n\n  static convertHSLtoRGB(hue, saturation, luminescence, angleUnits = 'deg') {\n    // cannot convert from hsl if no valid number\n    if (typeof hue !== 'number') throw new Error('missing hue for conversion to RGB');\n\n    let degrees = hue;\n    if (!angleUnits.includes('deg')) {\n      if (angleUnits.includes('rad')) {\n        degrees = (hue * 180) / Math.PI;\n      } else if (angleUnits.includes('grad')) {\n        degrees = (hue * 360) / 400;\n      } else if (angleUnits.includes('turn')) {\n        degrees = hue * 360;\n      }\n    }\n\n    let r;\n    let g;\n    let b;\n    r = g = b = 0; /* eslint-disable-line no-multi-assign */\n\n    const chroma = (1 - Math.abs(2 * luminescence - 1)) * saturation;\n    const x = chroma * (1 - Math.abs(((degrees / 60) % 2) - 1));\n    const m = luminescence - chroma / 2;\n\n    // color wheel 60\u00B0 segments, so 6 sections ~ 0-5\n    const section = Math.floor((degrees % 360) / 60);\n    switch (section) {\n      case 0: // 0-59\n        r = chroma;\n        g = x;\n        b = 0;\n        break;\n      case 1: // 60-119\n        r = x;\n        g = chroma;\n        b = 0;\n        break;\n      case 2: // 120-179\n        r = 0;\n        g = chroma;\n        b = x;\n        break;\n      case 3: // 180-239\n        r = 0;\n        g = x;\n        b = chroma;\n        break;\n      case 4: // 240-299\n        r = x;\n        g = 0;\n        b = chroma;\n        break;\n      default:\n        // 5: 300-359\n        r = chroma;\n        g = 0;\n        b = x;\n    }\n\n    r = Math.round((r + m) * 255);\n    g = Math.round((g + m) * 255);\n    b = Math.round((b + m) * 255);\n\n    return { r, g, b };\n  }\n\n  toHSL() {\n    // set h,s,l from r,g,b\n    const { r, g, b } = this;\n\n    const convert = Color.convertRGBtoHSL(r, g, b);\n\n    Object.assign(this, convert);\n\n    return this;\n  }\n\n  toRGB() {\n    // set r,g,b from h,s,l\n    const { h, s, l, angle = 'deg' } = this;\n\n    const convert = Color.convertHSLtoRGB(h, s, l, angle);\n\n    Object.assign(this, convert);\n\n    return this;\n  }\n\n  constructor(colorLike) {\n    const input = Color.parse(colorLike);\n    Object.assign(this, { a: 1 }, input);\n  }\n\n  // explicit rgba(r,g,b, alpha)\n  get rgba() {\n    return this.toString('rgba');\n  }\n\n  // rgb(r,g,b) include alpha when it exists\n  get rgb() {\n    return this.toString('rgb');\n  }\n\n  // hsl(h, s, l, a) hsl includes optional alpha when exists\n  get hsl() {\n    return this.toString('hsl');\n  }\n\n  // #rgb and alpha when it exists #rrggbbaa\n  get hex() {\n    return this.toString('hex');\n  }\n\n  toString(as = 'hex') {\n    let { r, g, b, h, s, l, a, angle } = this; /* eslint-disable-line prefer-const */\n    // nothing to convert between\n    if (typeof r !== 'number' && typeof h !== 'number') return 'Invalid Color';\n    let prefix = as || (typeof h === 'number' ? 'hsl' : 'rgb');\n    let alpha = '';\n    if (prefix.endsWith('a') || (a >= 0 && a < 1)) {\n      a = +a || 0; // ensure valid number from anything\n      if (a < 0 || a > 1) {\n        a = 1; // resolve out of bounds to default\n      }\n      // ok 0, 1, 0.67, max to hundredths: 0.12, no trailing 0, so 0.10 -> 0.1\n      alpha = a.toPrecision(2);\n      if (alpha.length > 2 && alpha.endsWith('0')) {\n        alpha = a.toPrecision(1);\n      }\n    }\n    if (prefix.startsWith('hsl')) {\n      if (typeof h !== 'number') {\n        this.toHSL();\n        h = this.h;\n        s = this.s;\n        l = this.l;\n      }\n      const hsl = [h + (angle || ''), `${(s * 100).toFixed()}%`, `${(l * 100).toFixed()}%`];\n      if (alpha) hsl.push(alpha);\n      return `hsl(${hsl.join(', ')})`;\n    }\n    // rgb | hex\n    if (typeof r !== 'number') {\n      this.toRGB();\n      r = this.r;\n      g = this.g;\n      b = this.b;\n    }\n    if (prefix.startsWith('hex')) {\n      const rgb = [r, g, b];\n      if (alpha) {\n        // FF === 255; 00 = 0; range 0-1; (alpha * 255).toString(16)\n        rgb.push(Math.round(a * 255));\n      }\n      const short = ['', ''];\n      const rrggbb = rgb.map(n => {\n        if (n === undefined) return '';\n        let hx = n.toString(16);\n        if (hx.length < 2) hx = `0${hx}`;\n        const [h0, h1] = hx.split('');\n        short[0] += h0;\n        short[1] += h1;\n        return hx;\n      });\n      const hex = short[0];\n      return `#${hex === short[1] ? hex : rrggbb.join('')}`;\n    }\n    if (prefix.startsWith('rgb')) {\n      const rgb = [r, g, b];\n      prefix = 'rgb';\n      if (alpha) {\n        prefix = 'rgba';\n        rgb.push(alpha);\n      }\n      return `${prefix}(${rgb.join(', ')})`;\n    }\n\n    return 'Invalid Color';\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
