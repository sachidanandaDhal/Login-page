import { EVENT_TYPE, contextConsumerMixin, contextSymbol, providerSymbol } from "./context-consumer.js";
const store = /* @__PURE__ */ new WeakMap();
const createProvider = (initialValue, identifier) => class Provider extends HTMLElement {
  constructor() {
    super();
    this.value = initialValue;
    this[providerSymbol] = identifier;
    this.onGetProvider = this.onGetProvider.bind(this);
  }
  set value(value) {
    if (this.value !== value) {
      store.set(this, value);
      this.dispatchEvent(new Event("context-changed"));
    }
  }
  get value() {
    return store.get(this);
  }
  connectedCallback() {
    if (super.connectedCallback) {
      super.connectedCallback();
    }
    this.addEventListener(EVENT_TYPE, this.onGetProvider);
  }
  disconnectedCallback() {
    this.removeEventListener(EVENT_TYPE, this.onGetProvider);
    if (super.disconnectedCallback) {
      super.disconnectedCallback();
    }
  }
  onGetProvider(e) {
    if (!e.detail?.identifier)
      return;
    if (this[providerSymbol] !== e.detail.identifier)
      return;
    e.stopPropagation();
    e.detail.provider = this;
  }
};
const createContextProvider = (initialValue) => createProvider(initialValue, contextSymbol);
export {
  contextConsumerMixin,
  createContextProvider,
  createProvider
};
//# sourceMappingURL=context-provider.js.map
