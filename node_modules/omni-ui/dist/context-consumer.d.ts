declare const providerSymbol: string;
declare const contextSymbol: string;
declare const EVENT_TYPE = "context-provider";
/**
 * Provides a `context` property with the value of the nearest Provider component.
 * Changes in the `value` property of the Provider can be handled by implementing
 * the `onContextChanged()` hook.
 *
 * @mixin
 */
declare const contextConsumerMixin: (SuperClass: any) => {
    new (): {
        [x: string]: any;
        readonly context: any;
        _discoverContextProvider(): Promise<void>;
        _forgetContextProvider(): void;
        connectedCallback(): void;
        disconnectedCallback(): void;
        /**
         * Callback executed when the nearest Provider changes its `value` property.
         */
        onContextChanged(): void;
    };
    [x: string]: any;
};
export { EVENT_TYPE, providerSymbol, contextSymbol, contextConsumerMixin };
//# sourceMappingURL=context-consumer.d.ts.map