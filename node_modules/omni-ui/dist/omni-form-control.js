import "element-internals-polyfill";
import { css } from "lit";
import { OmniElement } from "./omni-element.js";
import { OmniOverlay } from "./component/omni-overlay/omni-overlay.js";
class OmniFormControl extends OmniElement {
  // value implement in component
  static get properties() {
    return {
      autofocus: { type: Boolean, reflect: true },
      autocomplete: { type: Boolean, reflect: true },
      disabled: { type: Boolean, reflect: true },
      required: { type: Boolean, reflect: true },
      name: {
        type: String,
        reflect: true,
        converter: {
          // when the name is empty remove the attribute
          toAttribute(value) {
            const name = value.trim();
            return name || void 0;
          }
        }
      }
    };
  }
  static get styles() {
    return [
      css`
        :host {
          --bg-color: var(--color-pale-grey-two, #fff);
          background-color: var(--bg-color);
          border: var(--form-input-border, #ddd);
          --color: var(--color-gray-36);
          --color-disabled: #aaa;
        }
        :host([disabled]) {
        }
      `
    ];
  }
  connectedCallback() {
    super.connectedCallback();
    OmniOverlay.overlay;
    if (!this.hasAttribute("tabindex")) {
      this.tabIndex = 0;
    }
  }
  static get formAssociated() {
    return true;
  }
  constructor() {
    super();
    this.name = "";
    this.required = false;
    this.disabled = false;
    this.internals = this.attachInternals();
  }
  get form() {
    return this.internals.form;
  }
  get labels() {
    return this.internals.labels;
  }
  get type() {
    return this.localName;
  }
  get validity() {
    return this.internals.validity;
  }
  get validationMessage() {
    return this.internals.validationMessage;
  }
  get willValidate() {
    return this.internals.willValidate;
  }
  setCustomValidity(msg) {
    msg ? this.internals.setValidity({ customError: true }, msg) : this.internals.setValidity({});
    return this.validationMessage;
  }
  /*
  TODO implement validity checks for the attributes in the link
  static validation
  @return {Boolean} true ok, false fail
  @see {@link https://developer.mozilla.org/docs/Web/Guide/HTML/Constraint_validation} Constraint_validation API
   */
  checkValidity() {
    return this.internals.checkValidity();
  }
  /*
    interactive validation, ie shows ui elements related to invalid
    TODO
   */
  reportValidity() {
    return this.internals.reportValidity();
  }
  /** setup in components if indicated
   formAssociatedCallback(form){ }
   formResetCallback(){ }
   // called when ancestor fieldset and similar are [disabled], and the element itself is NOT [disabled]
   formDisabledCallback(disabled){ }
   // mode === 'restore' when browser restarts, navigation; or alternately 'autocomplete' where enabled on the form or element
   formStateRestoreCallback(state, mode){}
  */
  formStateRestoreCallback(state, mode) {
    console.warn("formStateRestoreCallback", mode, state);
  }
}
export {
  OmniFormControl,
  css
};
//# sourceMappingURL=omni-form-control.js.map
